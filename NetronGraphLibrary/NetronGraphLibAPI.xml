<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetronGraphLib</name>
    </assembly>
    <members>
        <member name="T:Netron.GraphLib.Attributes.NetronGraphAttribute">
            <summary>
            Abstract base class for the attributes related to serialization
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Attributes.NetronGraphAttribute.mKey">
            <summary>
            the key of the shape, usually a GUID
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Attributes.NetronGraphAttribute.mName">
            <summary>
            the name of the shape
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Attributes.NetronGraphAttribute.mReflectionName">
            <summary>
            the full name of the shape to reflect
            </summary>
            
        </member>
        <member name="F:Netron.GraphLib.Attributes.NetronGraphAttribute.mDescription">
            <summary>
            a description
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Attributes.NetronGraphAttribute.mIsInternal">
            <summary>
            whether the shape is only accessible via code or internally
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.NetronGraphAttribute.ReflectionName">
            <summary>
            Gets or sets the full name to reflect the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.NetronGraphAttribute.Description">
            <summary>
            Gets a mDescription of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.NetronGraphAttribute.Key">
            <summary>
            Gets the unique identifier of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.NetronGraphAttribute.Name">
            <summary>
            Gets the shape name
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.NetronGraphAttribute.IsInternal">
            <summary>
            Gets whether the entity is available via the interface or false if only via code
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Attributes.NetronGraphShapeAttribute">
            <summary>
            Attribute to tag a class as a Netron graph shape
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Attributes.NetronGraphShapeAttribute.mShapeCategory">
            <summary>
            the cateogry under which it will stay
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Attributes.NetronGraphShapeAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor, marks a class as a shape-class for the Netron graph library
            </summary>
            <param name="mShapeName"></param>
            <param name="mShapeKey"></param>
            <param name="mShapeCategory"></param>
            <param name="reflectionName"></param>
        </member>
        <member name="M:Netron.GraphLib.Attributes.NetronGraphShapeAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor, marks a class as a shape-class for the Netron graph library
            </summary>
            <param name="mShapeName"></param>
            <param name="mShapeKey"></param>
            <param name="mShapeCategory"></param>
            <param name="reflectionName"></param>
            <param name="mDescription"></param>
        </member>
        <member name="M:Netron.GraphLib.Attributes.NetronGraphShapeAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor, marks a class as a shape-class for the Netron graph library
            </summary>
            <param name="mShapeName"></param>
            <param name="mShapeKey"></param>
            <param name="mShapeCategory"></param>
            <param name="reflectionName"></param>
            <param name="mDescription"></param>
            <param name="internalUsage"></param>
        </member>
        <member name="P:Netron.GraphLib.Attributes.NetronGraphShapeAttribute.ShapeCategory">
            <summary>
            Gets the category of the shape under which it will reside in a viewer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Attributes.NetronGraphConnectionAttribute">
            <summary>
            Attribute to tag a class as a Netron graph connection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Attributes.NetronGraphConnectionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionName"></param>
            <param name="key"></param>
            <param name="reflectionName"></param>
        </member>
        <member name="T:Netron.GraphLib.Attributes.ConnectionStyleAttribute">
            <summary>
            Attribute to tag a class as a Netron graph connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Attributes.ConnectionStyleAttribute.mExtraStyles">
            <summary>
            ArrayList of extra connection-styles
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Attributes.ConnectionStyleAttribute.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor, marks a class as custom connection
            </summary>
            <param name="extra"></param>
        </member>
        <member name="M:Netron.GraphLib.Attributes.ConnectionStyleAttribute.#ctor">
            <summary>
            Constructor, marks a class as a custom connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.ConnectionStyleAttribute.ExtraStyles">
            <summary>
            Gets or sets the ArrayList of custom connection styles
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Attributes.GraphLayerAttribute">
            <summary>
            Attribute to tag a class as a Netron graph layer
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Attributes.GraphLayerAttribute.mLayers">
            <summary>
            STC of layers
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Attributes.GraphLayerAttribute.#ctor(Netron.GraphLib.GraphLayerCollection)">
            <summary>
            Constructor, marks a class as a graph-layer
            </summary>
            <param name="layers"></param>
        </member>
        <member name="M:Netron.GraphLib.Attributes.GraphLayerAttribute.#ctor">
            <summary>
            Constructor, marks a class as a graph-layer
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.GraphLayerAttribute.Layers">
            <summary>
            Gets or sets the layer-collection
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Attributes.ReflectedEnumAttribute">
            <summary>
            Attribute to tag a class as a reflected enum type.
            This solves the problem that an Enum type in a reflected assembly is not available in the propertygrid.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Attributes.ReflectedEnumAttribute.mEnums">
            <summary>
            ArrayList of extra connection-styles
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Attributes.ReflectedEnumAttribute.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor, marks a class as custom connection
            </summary>
            <param name="extra"></param>
        </member>
        <member name="M:Netron.GraphLib.Attributes.ReflectedEnumAttribute.#ctor">
            <summary>
            Constructor, marks a class as a custom connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Attributes.ReflectedEnumAttribute.Enums">
            <summary>
            Gets or sets the ArrayList of custom connection styles
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Attributes.GraphMLDataAttribute">
            <summary>
            Attribute class for designating which properties will be serialized
            by the NML serializer.
            </summary>	
        </member>
        <member name="M:Netron.GraphLib.Attributes.GraphMLDataAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Attributes.GraphMLDataAttribute.GetValuesOfTaggedFields(System.Object)">
            <summary>
            Returns a PropertiesHashtable of name-values for the given object's properties
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.BasicShapes.BasicNode">
            <summary>
            A simple rectangular shape with four connectors.
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Shape">
            <summary>
            Template class definition to be inherited by all shapes you want to insert and use in your plex
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Entity">
            <summary>
            Abstract base class for everything that participates in the diagram/graph (connection, connector...)	
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IEntity">
            <summary>
            Entity interface
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IPaintable">
            <summary>
            Describes a paintable element of the graph-control
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IPaintable.Invalidate">
            <summary>
            Invalidating/refreshes part or all of a control
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IPaintable.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the entity on the canvas
            </summary>
            <param name="g"></param>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IPaintable.Site">
            <summary>
            Gets or sets the site (or graph control) to which the entity belongs
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IEntity.SetLayer(System.String)">
            <summary>
            Sets the layer to which the entity belongs
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IEntity.SetLayer(System.Int32)">
            <summary>
            Sets the layer to which the entity belongs
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IEntity.AddProperties">
            <summary>
            Adds the properties of the entity to the bag
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IEntity.GetCursor(System.Drawing.PointF)">
            <summary>
            Gets the cursor when the mouse is hovering the given point in the entity
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IEntity.Hit(System.Drawing.RectangleF)">
            <summary>
            Says wether, for the given rectangle, the underlying shape is contained in it.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IEntity.PostDeserialization">
            <summary>
            Post-deserialization actions
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntity.UID">
            <summary>
            Gets or sets the unique identifier of the entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntity.Layer">
            <summary>
            Gets the layer to which the entity belongs
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntity.Tag">
            <summary>
            Gets or sets the tag-object attached to the entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntity.Properties">
            <summary>
            Gets the propertybag of the entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntity.Text">
            <summary>
            Gets or sets the text of the entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntity.Tracker">
            <summary>
            Gets the tracker of the entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntity.Summary">
            <summary>
            Gets the Summary for this entity
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mLayer">
            <summary>
            the layer to which the entity belongs,
            the default layer is a static unique layer defined in the GraphAbstract.		
            </summary>		
        </member>
        <member name="F:Netron.GraphLib.Entity.mTag">
            <summary>
            volatile all-purpose tag
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mRecalculateSize">
            <summary>
            whether to recalculate the shape size, speed up the rendering
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mBag">
            <summary>
            the property bag
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mBluePen">
            <summary>
            default blue mPen, speeds up rendering
            Note that the Pen is not serialzable!
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mBlackPen">
            <summary>
            default black mPen, speeds up rendering
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mPenWidth">
            <summary>
            the mPen's width
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mPen">
            <summary>
            default mPen
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mIsGuiReset">
            <summary>
            whether the entity is reset
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mFontFamily">
            <summary>
            the font family
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mIsSelected">
            <summary>
            whether the entity is selected
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mIsHovered">
            <summary>
            whether this entity is being hovered
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mUID">
            <summary>
            the unique identitfier
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mText">
            <summary>
            mText or label
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mShowLabel">
            <summary>
            whether to show the mText label
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mTextColor">
            <summary>
            the default mText color
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mFontSize">
            <summary>
            the default font size in points
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mFont">
            <summary>
            the default font for entities
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Entity.mSite">
            <summary>
            the mSite of the entity
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Entity.#ctor">
            <summary>
            Constructor for the entity class, initializes a new GUID for the entity
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Entity.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Creates a new entity, specifying the mSite 
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.Dispose">
            <summary>
            IDispose implementation
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Entity.SetLayer(Netron.GraphLib.GraphLayer)">
            <summary>
            Sets the layer the entity belongs to
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.SetLayer(System.String)">
            <summary>
            Sets the shape in a layer.
            Use "default" to set the shape in the default layer.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.SetLayer(System.Int32)">
            <summary>
            Sets the shape in a layer.
            Layer 0 is the default layer.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.GetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Determines which properties are accessible via the property grid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.SetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Sets the values passed by the property grid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.AddProperties">
            <summary>
            When overriden, allows user defined entities to get custom properties
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Entity.InitEntity">
            <summary>
            Initializes the class. This method is necessary when deserializing since various elements like
            the Pen cannot be serialized to file and have to be, hence, set after deserialization.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Entity.Paint(System.Drawing.Graphics)">
            <summary>
            creates the actual visual element on screen
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.GetCursor(System.Drawing.PointF)">
            <summary>
            Gets the cursor for the current position of the mouse
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Entity.Delete">
            <summary>
            GraphAbstract delete method; deletes the entity from the plex
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Entity.Hit(System.Drawing.RectangleF)">
            <summary>
            Says wether, for the given rectangle, the underlying shape is contained in it.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Entity.Invalidate">
            <summary>
            Invalidating refreshes part or all of a control
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Entity.PaintAdornments(System.Drawing.Graphics)">
            <summary>
            Allows to paints additional things like the clickable elements on shapes
            independently of the shape's design
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.PaintTracker(System.Drawing.Graphics)">
            <summary>
            Paints the tracker of the entity
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.GenerateNewUID">
            <summary>
            Regenerates a GUID for this entity
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Entity.RaiseMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse down event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.RaiseMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the mouse up event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Entity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="M:Netron.GraphLib.Entity.PostDeserialization">
            <summary>
            Post-deserialization actions
            </summary>
        </member>
        <member name="E:Netron.GraphLib.Entity.OnMouseDown">
            <summary>
            Occurs when the mouse is pressed on this entity
            </summary>
        </member>
        <member name="E:Netron.GraphLib.Entity.OnMouseUp">
            <summary>
            Occurs when the mouse is released while above this entity
            </summary>
        </member>
        <member name="E:Netron.GraphLib.Entity.OnMouseMove">
            <summary>
            Occurs when the mouse is moved while above this entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.Pen">
            <summary>
            Gets or sets the pen-object to paint and draw
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.Bag">
            <summary>
            Gets the property-bag
            </summary>
            <remarks>The bag acts as a proxy-object for the properties and his part of the propertybag mechanism.</remarks>
        </member>
        <member name="P:Netron.GraphLib.Entity.RecalculateSize">
            <summary>
            Gets or sets whether the next painting roun will have to recalculate the size of the entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.BlackPen">
            <summary>
            Gets the default black mPen for drawing text and lines
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.FontFamily">
            <summary>
            Gets or sets the font-family used by derived class to draw and paint on the canvas
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.Layer">
            <summary>
            Gets the layer ths shape is on. If null, the shape is in the default layer.
            </summary>
            <remarks>User the SetLayer() method to set or change the layer.
            </remarks>
        </member>
        <member name="P:Netron.GraphLib.Entity.Tag">
            <summary>
            Gets or sets a general purpose tag object
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.PenWidth">
            <summary>
            Gets or sets the mPen width
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.ShowLabel">
            <summary>
            Gets or sets whether the shape label should be shown.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.Properties">
            <summary>
            Allows to view/change the properties of the shape, most probably on double-clicking it.
            </summary>			
        </member>
        <member name="P:Netron.GraphLib.Entity.Text">
            <summary>
            Gets or sets the entity label
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.Site">
            <summary>
            Gets or sets the mSite of the entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.IsSelected">
            <summary>
            Tells wether the entity (shape) is selected
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.IsGuiReset">
            <summary>
            Gets or sets whether the entity's UID is reset
            </summary>
            <remarks>USed in the cotext of copy/paste</remarks>
        </member>
        <member name="P:Netron.GraphLib.Entity.IsHovered">
            <summary>
            Gives true if the mouse is hovering over this entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.TextColor">
            <summary>
            Gets or sets the mText color
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.FontSize">
            <summary>
            Gets or sets the font size of the mText
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.Font">
            <summary>
            Gets or sets the font to be used when drawing text-data
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.UID">
            <summary>
            Gets or sets the unique identifier for the shape.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.Summary">
            <summary>
            Gets the Summary for this entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Entity.Tracker">
            <summary>
            Gets the tracker of the entity
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IAutomataCell">
            <summary>
            Required signature for being part of a cellular automata network
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IAutomataCell.InitAutomata">
            <summary>
            Initialization or reset method
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IAutomataCell.Update">
            <summary>
            Elementary step or update of the cell's state
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IAutomataCell.Transmit">
            <summary>
            Transmits data between connections
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IAutomataCell.BeforeUpdate">
            <summary>
            Actions before the actual update is performed
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IAutomataCell.AfterUpdate">
            <summary>
            Actions after the update is performed
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IShape">
            <summary>
            The Shape interface
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.ILayoutElement">
            <summary>
            This interfaces lays out the basic elements necessary to participate in a layout procedure
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.ILayoutElement.X">
            <summary>
            Gets or sets the x-coordinate of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.ILayoutElement.Y">
            <summary>
            Gets or sets the y-coordinate of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.ILayoutElement.dx">
            <summary>
            Gets or sets an infinitesimal change in the x-direction
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.ILayoutElement.dy">
            <summary>
            Gets or sets an infinitesimal change in the y-direction
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.ILayoutElement.IsFixed">
            <summary>
            Gets or sets whether the shape participates to the layout process
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IShape.GetThumbnail">
            <summary>
            Returns a thumbnail to be shown in the shape-viewer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IShape.FitSize(System.Boolean)">
            <summary>
            Adapts the shape's width and height to fit the text
            
            </summary>
            <param name="square">true to make the shape square</param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IShape.ShapeMenu">
            <summary>
            Allows to extend the default menu on a per-shape basis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IShape.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Additional actions on key-down for a shape
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IShape.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Additional actions on key-press for a shape
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IShape.ZOrder">
            <summary>
            Gets or sets the z-order of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IShape.IsResizable">
            <summary>
            Gets or sets whether the shape is resizable
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IShape.CanMove">
            <summary>
            Gets or sets whether the shape can be moved around.
            Note that the Fixed property is used to set whether the shape
            participates in the layout-process.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IShape.ShapeColor">
            <summary>
            Gets or sets the color of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IShape.Location">
            <summary>
            Gets or sets the location of the shape on the canvas
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.urlImage">
            <summary>
            the URL icon
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mURL">
            <summary>
            hyperlink to web or file
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mSquare">
            <summary>
            whether the shape is square
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mZOrder">
            <summary>
            the z-order of the shapes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mCanMove">
            <summary>
            whether you can move the shape
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mControls">
            <summary>
            the array list of .Net mControls the shape contains
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mDeltaX">
            <summary>
            the infinitesimal x-shift used by layout
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mDeltaY">
            <summary>
            the infinitesimal y-shift used by layout
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mIsFixed">
            <summary>
            fixed node boolean
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mShapeColor">
            <summary>
            the default node color
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mIsResizable">
            <summary>
            tells wether or not the user can resize the mRectangle
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mConnectors">
            <summary>
            The internal collection of mConnectors attached to this shape object
            </summary>
            <remarks>
            Note that mConnectors are sub-ordinated to the shapes and thus do not have to be deleted or taken care off independently
            </remarks>
        </member>
        <member name="F:Netron.GraphLib.Shape.mRectangle">
            <summary>
            This is the floating-point mRectangle associated to the shape
            It determines the shape's size or boundaries
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mShapeTracker">
            <summary>
            The internal tracker object, representing the mRectangle and grips with which one can resize the shape.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mIsVisible">
            <summary>
            whether the shape is visible
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Shape.mIsExpanded">
            <summary>
            whether the shape's adjacent nodes are expanded
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.PostDeserialization">
            <summary>
            Additional actions after deserialization
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.Zoom(System.Single)">
            <summary>
            Zooms the shape
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.SetLayer(Netron.GraphLib.GraphLayer)">
            <summary>
            Override the Entity.SetLayer to adapt the shape's appearance in function of the 
            layer's parameters.
            </summary>
            <param name="layer">a pre-defined or added graph-layer</param>
        </member>
        <member name="M:Netron.GraphLib.Shape.NewConnectionsTo(System.Boolean)">
            <summary>
            Sets whether the connectors of this shape allow new connections to be attached to this shape
            </summary>
            <param name="value">if true, all connectors allow new connection to this shape</param>
        </member>
        <member name="M:Netron.GraphLib.Shape.NewConnectionsFrom(System.Boolean)">
            <summary>
            Sets whether the connectors of this shape allow new connections to be launched from this shape
            </summary>
            <param name="value">if true, all connectors allow new connection to this shape</param>
        </member>
        <member name="M:Netron.GraphLib.Shape.Transmit">
            <summary>
            This method represents the transmission of data over a connection. Once the data is transmitted to the mConnectors the senders' value is reset
            </summary>
            <remarks>This method is not strictly part of the plex structure but belongs to the possible applications.</remarks>
        </member>
        <member name="M:Netron.GraphLib.Shape.BeforeUpdate">
            <summary>
            Actions to perform before the update
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.AfterUpdate">
            <summary>
            Actions to perform after the update
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.Update">
            <summary>
            The method allows to update the dynamical state of the plex, to compute something on the basis of the received values and to set the new send values.
            
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.IsConnectedTo(Netron.GraphLib.Shape)">
            <summary>
            Returns whether the shape is connected to a given shape
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Shape.InitAutomata">
            <summary>
            Required interface implementation
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.Insert(Netron.GraphLib.GraphAbstract)">
            <summary>
            Adds the shape to an GraphAbstract collection
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.Delete">
            <summary>
            Removes itself from an GraphAbstract. The mConnectors are deleted as part of this deletion process.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.Hit(System.Drawing.RectangleF)">
            <summary>
            Returns true if the given mRectangle contains the shape (this)
            </summary>
            <param name="r">A floating-point mRectangle object</param>
            <returns>True if contained</returns>
        </member>
        <member name="M:Netron.GraphLib.Shape.ConnectionPoint(Netron.GraphLib.Connector)">
            <summary>
            Returns the coordinates of a given connector attached to this shape
            </summary>
            <param name="c">A connector object</param>
            <returns>A floating-point point (pointF)</returns>
        </member>
        <member name="M:Netron.GraphLib.Shape.GetThumbnail">
            <summary>
            Returns the thumbnail of the shape (for the shape viewer)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Shape.Paint(System.Drawing.Graphics)">
            <summary>
            Overrides the paint method
            </summary>
            <remarks>
            Do not forget to call this via base.Paint to paint the tracker.
            </remarks>
            <param name="g">The graphics canvas onto which to paint</param>
        </member>
        <member name="M:Netron.GraphLib.Shape.PaintAdornments(System.Drawing.Graphics)">
            <summary>
            Paints the adornments (URL link etc.)
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.FitSize(System.Boolean)">
            <summary>
            
            </summary>
            <param name="square">if true the shape will be square with the maximum otherwise only the width will be resized to fit the content</param>
        </member>
        <member name="M:Netron.GraphLib.Shape.Invalidate">
            <summary>
            Refreshes the shape
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.GetCursor(System.Drawing.PointF)">
            <summary>
            Returns the cursor for this shape
            </summary>
            <param name="p">A floaint-point point</param>
            <returns>A cursor object</returns>
        </member>
        <member name="M:Netron.GraphLib.Shape.HandleURL">
            <summary>
            Handles the different recognized URL types:
            http://  - opens the default browser
            netron:// - opens the diagram from the specified location
            showgraphproperties - the graph properties are displayed
            showgraphlayers - the graph layers are displayed
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.MoveControls">
            <summary>
            Moves the shape controls (if any) when the shape has been moved
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.AddProperties">
            <summary>
            Adds the basic properties of the shape
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Shape.GetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Allows the propertygrid to set new values
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.SetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Allows the propertygrid to set new values
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.ShapeMenu">
            <summary>
            Allows to extend the default canvas menu with additional items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Shape.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overridable OnKeyDown handler
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Overridable OnKeyPress handler
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Shape.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="P:Netron.GraphLib.Shape.URL">
            <summary>
            Gets or sets the hyperlink of this shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.IsSquare">
            <summary>
            Gets or sets whether width and height are equal (square shape)
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.Abstract">
            <summary>
            Gets the abstract of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.FontSize">
            <summary>
            Gets or sets the font size
            </summary>
            /// <remarks>Redefines the FontSize property of the Entity class as public <see cref="T:Netron.GraphLib.Entity"/></remarks>
        </member>
        <member name="P:Netron.GraphLib.Shape.Font">
            <summary>
            Gets or sets the font to be used for drawing text
            
            </summary>
            <remarks>Redefines the Font property of the Entity class as public <see cref="T:Netron.GraphLib.Entity"/></remarks>
        </member>
        <member name="P:Netron.GraphLib.Shape.ZOrder">
            <summary>
            Gets or sets the z-order of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.IsResizable">
            <summary>
            Gets or sets whether the shape can be resized
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.CanMove">
            <summary>
            Gets or sets whether the shape can be moved around.
            Note that the Fixed property is used to set whether the shape
            participates in the layout-process.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.Rectangle">
            <summary>
            Returns the associated mRectangle for this shape
            </summary>
            <remarks>
            The need for this becomes more clear if start to use non-rectangular shapes.
            </remarks>
        </member>
        <member name="P:Netron.GraphLib.Shape.Connectors">
            <summary>
            Returns the collection of mConnectors for this shape object
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.IsSelected">
            <summary>
            Is the shape selected?
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.Controls">
            <summary>
            The list of Controls the shape contains
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.Tracker">
            <summary>
            Returns the tracker, which represents the grips and mRectangle with which one can resize the shape.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.X">
            <summary>
            Gets or sets the x-coordinate of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.Y">
            <summary>
            Gets or sets the y-coordinate
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.Location">
            <summary>
            Gets or sets the location of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.dx">
            <summary>
            Increment in x for the graph layout
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.dy">
            <summary>
            Increment in y for the graph layout
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.IsFixed">
            <summary>
            Gets or sets whether the shape is fixed/unmovable.
            Note that the CanMove property is used to enable/disable the shape moves
            via the mouse while this property enables/disable the layout-process for this shape.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.ShapeColor">
            <summary>
            Gets or sets the node color
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.BackgroundBrush">
            <summary>
            Gets the background brush
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.TextBrush">
            <summary>
            Gets the text brush
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.Width">
            <summary>
            Width of a shape.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.Height">
            <summary>
            Height of a shape.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.AdjacentNodes">
            <summary>
            Gets the collection of nodes attached to this node
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.IsVisible">
            <summary>
            Gets or sets whether the shape is visible on the canvas
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Shape.IsExpanded">
            <summary>
            Gets or sets whether the shape shows its sub-shapes
            This property, its validity, depends on the overal topology of the graph
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.BasicNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.BasicNode.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            This is the default constructor of the class.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.BasicNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.BasicNode.GetThumbnail">
            <summary>
            Overrides the default bitmap used in the shape viewer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.BasicNode.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the shape of the person object in the plex. Here you can let your imagination go.
            MAKE IT PERFORMANT, this is a killer method called 200.000 times a minute!
            </summary>
            <param name="g">The graphics canvas onto which to paint</param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.BasicNode.ConnectionPoint(Netron.GraphLib.Connector)">
            <summary>
            Returns a floating-point point coordinates for a given connector
            </summary>
            <param name="c">A connector object</param>
            <returns>A floating-point pointF</returns>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.BasicNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Netron.GraphLib.BasicShapes.SimpleNode">
            <summary>
            A simple rectangular shape with one connector.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.SimpleNode.#ctor">
            <summary>
            This is the default constructor of the class.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.SimpleNode.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.SimpleNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.SimpleNode.GetThumbnail">
            <summary>
            Overrides the default thumbnail used in the shape viewer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.SimpleNode.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the shape of the person object in the plex. Here you can let your imagination go.
            </summary>
            <param name="g">The graphics canvas onto which to paint</param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.SimpleNode.ConnectionPoint(Netron.GraphLib.Connector)">
            <summary>
            Returns a floating-point point coordinates for a given connector
            </summary>
            <param name="c">A connector object</param>
            <returns>A floating-point pointF</returns>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.SimpleNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="T:Netron.GraphLib.BasicShapes.TextLabel">
            <summary>
            A text label shape
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicShapes.TextLabel.stringAlignment">
            <summary>
            the alignment of the text
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.#ctor">
            <summary>
            This is the default constructor of the class.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.GetThumbnail">
            <summary>
            Returns a thumbanil representation of this shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the shape of the person object in the plex. Here you can let your imagination go.
            </summary>
            <param name="g">The graphics canvas onto which to paint</param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.ShapeMenu">
            <summary>
            Changes the default context-menu
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.AddProperties">
            <summary>
            Adds additional properties to the shape
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.SetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Allows the propertygrid to access/set the properties of this shape
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.BasicShapes.TextLabel.GetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Allows the propertygrid to access the properties of this shape
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Netron.GraphLib.BasicShapes.TextLabel.ShowPage">
            <summary>
            Gets or sets whether the 'page' is drawn. If set to false the shape will appear as a text-only container.
            </summary>
        </member>
        <member name="T:Netron.GraphLib.BezierHandleCollection">
            <summary>
            STC of Bezier handles
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierHandleCollection.mCurve">
            <summary>
            the curve's painter
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.#ctor(Netron.GraphLib.BezierPainter)">
            <summary>
            Constructs a collection and assigns the collection to the given curve
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Constrcuts a collection on the basis of a PointF collection
            </summary>
            <param name="list">An ArrayList of PointF's</param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the collection to the given array, starting at the given position
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.Contains(Netron.GraphLib.BezierHandle)">
            <summary>
            Returns whether the given handle is contained in the collection
            </summary>
            <param name="value">a Bezier handle</param>
            <returns>true if withing the collection, otherwise false</returns>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.CopyTo(Netron.GraphLib.BezierHandle[],System.Int32)">
            <summary>
            Provide the strongly typed member for ICollection
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.IndexOf(Netron.GraphLib.BezierHandle)">
            <summary>
            Returns the index of the given handle
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.Remove(Netron.GraphLib.BezierHandle)">
            <summary>
            Removes and item from the collection
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.Add(Netron.GraphLib.BezierHandle)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierHandleCollection.Insert(System.Int32,Netron.GraphLib.BezierHandle)">
            <summary>
            Inserts an item in the collection
            </summary>
            <param name="index"></param>
            <param name="handle"></param>
        </member>
        <member name="P:Netron.GraphLib.BezierHandleCollection.Curve">
            <summary>
            Gets or sets the BezierPainter attached to this handle collection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierHandleCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ConnectionCollection">
            <summary>
            STC of connections
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionCollection.ar">
            <summary>
            necessary intermediate deserialization array
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor based on an existing array of Connection objects
            </summary>
            <param name="newarray"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.Add(Netron.GraphLib.Connection)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.Contains(System.Object)">
            <summary>
            Returns whether the given item is contained in the collection
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.Remove(Netron.GraphLib.Connection)">
            <summary>
            Removes an item from the collection
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.Clone">
            <summary>
            Clones the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.RaiseOnConnectionAdded(Netron.GraphLib.Connection,System.Boolean)">
            <summary>
            Raises the OnConnectionAdded event
            </summary>
            <param name="con"></param>
            <param name="manual"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.RaiseOnConnectionRemoved(Netron.GraphLib.Connection,System.Boolean)">
            <summary>
            Raises the OnShapeRemoved event
            </summary>
            <param name="con"></param>
            <param name="manual"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization method
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionCollection.OnDeserialization(System.Object)">
            <summary>
            IDeserializationCallback implementation
            </summary>
            <param name="sender"></param>
        </member>
        <member name="E:Netron.GraphLib.ConnectionCollection.OnConnectionAdded">
            <summary>
            Occurs when a connection is added to the collection
            </summary>
        </member>
        <member name="E:Netron.GraphLib.ConnectionCollection.OnConnectionRemoved">
            <summary>
            Occurs when a connection is removed from the collection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.ConnectionCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ConnectorCollection">
            <summary>
            Implements a strongly typed collection of connectors
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectorCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectorCollection.Add(Netron.GraphLib.Connector)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectorCollection.AddRange(Netron.GraphLib.ConnectorCollection)">
            <summary>
            Adds a range to the collection
            </summary>
            <param name="collection"></param>
        </member>
        <member name="P:Netron.GraphLib.ConnectorCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="P:Netron.GraphLib.ConnectorCollection.Item(System.String)">
            <summary>
            String indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.EntityCollection">
            <summary>
            Collection of entity objects
            </summary>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor
            </summary>
            <param name="newarray"></param>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.Clone">
            <summary>
            Clones the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.Add(Netron.GraphLib.Entity)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.AddRange(Netron.GraphLib.ShapeCollection)">
            <summary>
            Adds or merges a collection into this collection
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.AddRange(Netron.GraphLib.ConnectionCollection)">
            <summary>
            Adds a range of connections to the collection
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.Contains(System.Object)">
            <summary>
            Returns whether the given item in contained in the collection
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.Remove(Netron.GraphLib.Entity)">
            <summary>
            Removes an item from the collection 
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Netron.GraphLib.EntityCollection.Sort(System.String,Netron.GraphLib.SortDirection)">
            <summary>
            Sorts the collection
            </summary>
            <param name="sortParameter">the property upon which the sorting is based</param>
            <param name="direction">the SortDirection enum of the sorting algorithm</param>
        </member>
        <member name="P:Netron.GraphLib.EntityCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.PointFCollection">
            <summary>
            STC of PointF
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.#ctor(System.Drawing.PointF[])">
            <summary>
            Constructs a collection and assigns the array to the collection
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Constrcuts a collection on the basis of a PointF collection
            </summary>
            <param name="list">An ArrayList of PointF's</param>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the collection to the given array, starting at the given position
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.Contains(System.Drawing.PointF)">
            <summary>
            Returns whether the given handle is contained in the collection
            </summary>
            <param name="value">a Bezier handle</param>
            <returns>true if withing the collection, otherwise false</returns>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.CopyTo(System.Drawing.PointF[],System.Int32)">
            <summary>
            Provide the strongly typed member for ICollection
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.IndexOf(System.Drawing.PointF)">
            <summary>
            Returns the index of the given handle
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.Remove(System.Drawing.PointF)">
            <summary>
            Removes and item from the collection
            </summary>
            <param name="p">a point to be removed from the collection</param>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.Add(System.Drawing.PointF)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="p">the point to be added to the collection</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.PointFCollection.Insert(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts an item in the collection
            </summary>
            <param name="index"></param>
            <param name="p"></param>
        </member>
        <member name="P:Netron.GraphLib.PointFCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ShapeCollection">
            <summary>
            Collection of shape objects
            </summary>
            <remarks>
            Note that the naive ISerializable does not work without the IDeserializationCallback interface for some reasons, see http://msdn.microsoft.com/msdnmag/issues/02/07/net/
            </remarks>
        </member>
        <member name="F:Netron.GraphLib.ShapeCollection.ar">
            <summary>
            necessary intermediate deserialization array
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor
            </summary>
            <param name="newarray"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.Sort(System.String,Netron.GraphLib.SortDirection)">
            <summary>
            Sorts the collection
            </summary>
            <param name="sortParameter">the property upon which the sorting is based</param>
            <param name="direction">the SortDirection enum of the sorting algorithm</param>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.RaiseOnShapeAdded(Netron.GraphLib.Shape)">
            <summary>
            Raises the OnShapeAdded event
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.RaiseOnShapeRemoved(Netron.GraphLib.Shape)">
            <summary>
            Raises the OnShapeRemoved event
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization method
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.OnDeserialization(System.Object)">
            <summary>
            IDeserializationCallback implementation, necessary to have ISerializable work on CollectionBase inherited class.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.Clone">
            <summary>
            Clones the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.Add(Netron.GraphLib.Shape)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.Contains(System.Object)">
            <summary>
            Returns whether the given item in contained in the collection
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ShapeCollection.Remove(Netron.GraphLib.Shape)">
            <summary>
            Removes an item from the collection 
            </summary>
            <param name="shape"></param>
        </member>
        <member name="E:Netron.GraphLib.ShapeCollection.OnShapeAdded">
            <summary>
            Occurs when a shape is added to the collection
            </summary>
        </member>
        <member name="E:Netron.GraphLib.ShapeCollection.OnShapeRemoved">
            <summary>
            Occurs when a shape is removed from the collection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.ShapeCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.StringCollection">
            <summary>
            STC of strings
            </summary>
        </member>
        <member name="M:Netron.GraphLib.StringCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.StringCollection.Add(System.String)">
            <summary>
            Adds a string to the collection
            </summary>
            <param name="value">a string</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.StringCollection.Contains(System.String)">
            <summary>
            Returns whether the given string is in the collection
            </summary>
            <param name="value">a string</param>
            <returns>Returns the index in the collection if found, otherwise -1.</returns>
        </member>
        <member name="P:Netron.GraphLib.StringCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.WidgetCollection">
            <summary>
            STC of IWidget objects
            </summary>
        </member>
        <member name="M:Netron.GraphLib.WidgetCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.WidgetCollection.Add(Netron.GraphLib.Interfaces.IWidget)">
            <summary>
            Adds a widget to the collection
            </summary>
            <param name="widget"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.WidgetCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Configuration.ConnectionSummary">
            <summary>
            Encapsulates the essential information of a custom connection
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Configuration.Summary">
            <summary>
            Summarizes the essential elements to reflect a graph element
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.Summary.mDescription">
            <summary>
            the description
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.Summary.mReflectionName">
            <summary>
            the fully qualified name to reflect the object
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.Summary.mKey">
            <summary>
            the unique key of the object
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.Summary.mName">
            <summary>
            the name of the object
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.Summary.mLibPath">
            <summary>
            the name of the dll where the lib is to be found
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.Summary.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.Summary.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="libraryPath"></param>
            <param name="name"></param>
            <param name="key"></param>
            <param name="reflectionName"></param>
        </member>
        <member name="M:Netron.GraphLib.Configuration.Summary.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="libraryPath"></param>
            <param name="name"></param>
            <param name="key"></param>
            <param name="reflectionName"></param>
            <param name="description"></param>
        </member>
        <member name="P:Netron.GraphLib.Configuration.Summary.LibPath">
            <summary>
            Gets or sets the library path
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Configuration.Summary.Key">
            <summary>
            Gets or sets the key of the summary
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Configuration.Summary.Name">
            <summary>
            Gets or sets the name of the library
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Configuration.Summary.Description">
            <summary>
            Gets or sets the summary
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Configuration.Summary.ReflectionName">
            <summary>
            Gets or sets the fully qualified namespace to reflect
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ConnectionSummary.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ConnectionSummary.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="libraryPath"></param>
            <param name="name"></param>
            <param name="key"></param>
            <param name="reflectionName"></param>
        </member>
        <member name="T:Netron.GraphLib.Configuration.ConnectionSummaryCollection">
            <summary>
            Implements a strongly typed collection of connection summaries
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ConnectionSummaryCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ConnectionSummaryCollection.Add(Netron.GraphLib.Configuration.ConnectionSummary)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="summary"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Configuration.ConnectionSummaryCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Configuration.GraphLibConfigurationHandler">
            <summary>
            Reads the custom configuration section by implementing the 
            IConfigurationSectionHandler interface.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.GraphLibConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Returns an  ArrayList object with all the paths		
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Configuration.GraphObjectsLibrary">
            <summary>
            Collects shape and lib info of an assembly containing custom shapes and/or connections
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.GraphObjectsLibrary.mPath">
            <summary>
            the path to the lib
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.GraphObjectsLibrary.shapeSummmaries">
            <summary>
            the summary collection for the custom shapes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.GraphObjectsLibrary.conSummaries">
            <summary>
            the summary collection for the custom connections
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.GraphObjectsLibrary.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.GraphObjectsLibrary.#ctor(System.String)">
            <summary>
            Constructor with the library-path
            </summary>
            <param name="libPath"></param>
        </member>
        <member name="P:Netron.GraphLib.Configuration.GraphObjectsLibrary.Path">
            <summary>
            Gets or sets the mPath of the library
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Configuration.GraphObjectsLibrary.ShapeSummaries">
            <summary>
            Gets or sets the shape summaries
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Configuration.GraphObjectsLibrary.ConnectionSummaries">
            <summary>
            Gets or sets the connection summaries
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Configuration.GraphObjectsLibraryCollection">
            <library>
            Strongly typed collection of shape libraries
            </library>
        </member>
        <member name="M:Netron.GraphLib.Configuration.GraphObjectsLibraryCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.GraphObjectsLibraryCollection.Add(Netron.GraphLib.Configuration.GraphObjectsLibrary)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="library"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Configuration.GraphObjectsLibraryCollection.GetShapeSummary(System.String)">
            <summary>
            Returns the summary for a shape with the given key
            </summary>
            <param name="shapeKey"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Configuration.GraphObjectsLibraryCollection.GetConnectionSummary(System.String)">
            <summary>
            Returns the summary for the connection with the given key
            </summary>
            <param name="connectionName"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Configuration.GraphObjectsLibraryCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Configuration.ShapeSummary">
            <summary>
            Collects info about a shape from the class attributes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Configuration.ShapeSummary.mShapeCategory">
            <summary>
            the shape's category
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ShapeSummary.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ShapeSummary.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="libraryPath"></param>
            <param name="mShapeKey"></param>
            <param name="mShapeName"></param>
            <param name="mShapeCategory"></param>
            <param name="reflectionName"></param>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ShapeSummary.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="libraryPath"></param>
            <param name="mShapeKey"></param>
            <param name="mShapeName"></param>
            <param name="mShapeCategory"></param>
            <param name="reflectionName"></param>
            <param name="mDescription"></param>
        </member>
        <member name="P:Netron.GraphLib.Configuration.ShapeSummary.ShapeCategory">
            <summary>
            Gets or sets the shape's category
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Configuration.ShapeSummary.IsInternal">
            <summary>
            Gets or sets whether the shape is only for internal use (creation can only occur by code)
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Configuration.ShapeSummaryCollection">
            <summary>
            Implements a strongly typed collection of shape summaries
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ShapeSummaryCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Configuration.ShapeSummaryCollection.Add(Netron.GraphLib.Configuration.ShapeSummary)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="summary"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Configuration.ShapeSummaryCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Connection">
            <summary>
            The connection class captures a connection between two connectors and is derived from an entity.
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IConnection">
            <summary>
            Connection interface
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IConnection.AddConnectionPoint(System.Drawing.PointF)">
            <summary>
            Adds a connection point to the collection of intermediate connection points
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IConnection.RemoveConnectionPoint(System.Drawing.PointF)">
            <summary>
            Removes an intermediate connection point
            </summary>
            <param name="point"></param>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IConnection.LinePath">
            <summary>
            Gets or sets the line-path (rectangular, Bezier...) of the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IConnection.LineStyle">
            <summary>
            Gets or sets the line-style (dashed, continuous...) of the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IConnection.LineEnd">
            <summary>
            Gets or sets the line-end (arrows etc.) of the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IConnection.LineColor">
            <summary>
            Gets or sets the line-color of the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IConnection.From">
            <summary>
            Gets or sets the start-connector of the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IConnection.To">
            <summary>
            Gets or sets the end-connector of the connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mInsertionPoints">
            <summary>
            Holds the polyline data
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mLineWidth">
            <summary>
            default line width
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mRestLength">
            <summary>
            default rest length of the connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mToPoint">
            <summary>
            This is a public floating point assigned by the canvascontrol in the MouseMove and 
            MouseDown events. It makes it possible mTo show a drawn line before there is an actual link between
            two connectors.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mFrom">
            <summary>
            The starting connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mTo">
            <summary>
            the destination connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mLineColor">
            <summary>
            The line color
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mLineStyle">
            <summary>
            The line style (Solid, Dashed...)
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mLineWeight">
            <summary>
            The line weight; thin, medium or fat. Could be set mTo arbitrary size.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mLineEnd">
            <summary>
            The type of arrow or line end
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mLinePath">
            <summary>
            the shape of the connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mPainter">
            <summary>
            the painter class used to paint the connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mTracker">
            <summary>
            Tracker used for the connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connection.mZOrder">
            <summary>
            the z-order of the connection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connection.SetLayer(Netron.GraphLib.GraphLayer)">
            <summary>
            Puts the connection in a layer
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.#ctor">
            <summary>
            Default constructor, assigns null connectors and so a null connection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connection.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.PostDeserialization">
            <summary>
            Additional actions after deserialization
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connection.AddConnectionPoint(System.Drawing.PointF)">
            <summary>
            Adds an intermediate connection point to the connection
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.RemoveConnectionPoint(System.Drawing.PointF)">
            <summary>
            Removes a connection point from the connection
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.InitConnection">
            <summary>
            Common constructors initialization
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connection.Hit(System.Drawing.RectangleF)">
            <summary>
            Returns wether or not the given rectangle is contained in the object
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Connection.GetConnectionPoints">
            <summary>
            Returns the points of the connection
            </summary>
            <returns>An array of PointF structs</returns>
        </member>
        <member name="M:Netron.GraphLib.Connection.Paint(System.Drawing.Graphics)">
            <summary>
            The painting of the connection
            </summary>
            <param name="g">The graphics object</param>
        </member>
        <member name="M:Netron.GraphLib.Connection.PaintLabel(System.Drawing.Graphics)">
            <summary>
            Paints the label
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.PaintTrack(System.Drawing.Graphics)">
            <summary>
            Paints the tracker object
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.PaintPolyLine(System.Drawing.Graphics)">
            <summary>
            Draws a line between the To and From connectors
            </summary>
            <param name="g">The graphics</param>
        </member>
        <member name="M:Netron.GraphLib.Connection.PaintArrow(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>
            Paints an arrow
            </summary>
            <param name="g"></param>
            <param name="tip"></param>
            <param name="left"></param>
            <param name="right"></param>
            <param name="filled"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.PaintArrow(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Paints an arrow
            </summary>
            <param name="endPoint"></param>
            <param name="filled"></param>
            <param name="g"></param>
            <param name="lineColor"></param>
            <param name="showLabel"></param>
            <param name="startPoint"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.Invalidate">
            <summary>
            Overrides the invalidate (refresh)
            </summary>
            <remarks>
            Note the smart way to invalidate the region arround the start and end points
            by inflating the endpoints and then to make a union rectangle
            </remarks>
        </member>
        <member name="M:Netron.GraphLib.Connection.Insert(Netron.GraphLib.Connector,Netron.GraphLib.Connector)">
            <summary>
            Adds a connection on the basis of two connectors
            </summary>
            <param name="f">The start connector</param>
            <param name="t">The end connector</param>
        </member>
        <member name="M:Netron.GraphLib.Connection.Delete">
            <summary>
            Deletes the current connection and removes it also mFrom the list in the
            From and/or To connectors.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connection.GetCursor(System.Drawing.PointF)">
            <summary>
            For the given point p it gets the appropriate cursor.
            </summary>
            <param name="p"> The floating-point point</param>
            <returns>A cursor.</returns>
        </member>
        <member name="M:Netron.GraphLib.Connection.PaintAdornments(System.Drawing.Graphics)">
            <summary>
            Paints the adornments (nothing currently)
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.Transmit">
            <summary>
            Overridable Transmit method that hands over values mFrom the Sender mTo the Receiver.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connection.AddProperties">
            <summary>
            Adds property grid accessible properties mTo the connection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connection.GetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Gets the value of the requested property
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.SetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Sets the value of the given property
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Connection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="P:Netron.GraphLib.Connection.ZOrder">
            <summary>
            Gets or sets the z-order of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.ConnectionPainter">
            <summary>
            Gets the connection painter
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.InsertionPoints">
            <summary>
            Gets or sets the additional set of points along the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.Font">
            <summary>
            Gets or sets the font to be used for drawing text
            
            </summary>
            <remarks>Redefines the Font property of the Entity class as public <see cref="T:Netron.GraphLib.Entity"/></remarks>
        </member>
        <member name="P:Netron.GraphLib.Connection.BoxedLabel">
            <summary>
            Gets or sets whether the label is shown as a tooltip
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.Painter">
            <summary>
            Gets the ConnectionPainter object for this connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.IsSelected">
            <summary>
            Gets or sets whether the connection is selected
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.Tracker">
            <summary>
            Gets or set the tracker associated with the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.LinePath">
            <summary>
            Gets or sets the type of connection or shape of the path.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.RestLength">
            <summary>
            Gets or sets the rest length of the connection (used by the layour algorithms)
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.Length">
            <summary>
            Returns the length of the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.ConnectionSize">
            <summary>
            Gets the rectangle corresponding mTo or embedding the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.LineStyle">
            <summary>
            Gets or sets the line style
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.LineEnd">
            <summary>
            Gets or sets the line end
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.ToPoint">
            <summary>
            Gets or sets the temporary To point when drawing and connecting mTo a To connector.
            Holds normally the mouse coordinate.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.LineColor">
            <summary>
            Gets or sets the line color
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.LineWeight">
            <summary>
            Gets or sets the line weight
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.From">
            <summary>
            Gets or sets where the connection originates
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connection.To">
            <summary>
            Gets or sets where the connection ends
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ConnectionPainter">
            <summary>
            Abstract base class to paint a connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionPainter.mConnection">
            <summary>
            the underlying connection of this painter
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionPainter.mPen">
            <summary>
            the pen to draw with
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionPainter.mSelected">
            <summary>
            whether the connection is selected
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionPainter.mIsHovered">
            <summary>
            whether the connection is hovered
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionPainter.mPoints">
            <summary>
            the set of points to use when drawing
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionPainter.#ctor(Netron.GraphLib.Connection)">
            <summary>
            Creates a connection painter based on the given connection
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionPainter.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionPainter.PostDeserialization">
            <summary>
            Post-deserialization actions
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionPainter.AddConnectionPoint(System.Drawing.PointF)">
            <summary>
            Handles the addition of a new (intermediate) connection point
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionPainter.RemoveConnectionPoint(System.Drawing.PointF)">
            <summary>
            Handles the removal of an (intermediate) connection point
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionPainter.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the connection on the canvas
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionPainter.Hit(System.Drawing.PointF)">
            <summary>
            Returns true if the given point hit the connection
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectionPainter.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializator
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Netron.GraphLib.ConnectionPainter.Connection">
            <summary>
            Gets or sets the connection this painter paints
            </summary>
        </member>
        <member name="P:Netron.GraphLib.ConnectionPainter.Points">
            <summary>
            Gets or sets the points upon which the painting of this connection painter is based
            </summary>
        </member>
        <member name="P:Netron.GraphLib.ConnectionPainter.IsHovered">
            <summary>
            Gets or sets whether the mouse is hovering over this object
            </summary>
        </member>
        <member name="P:Netron.GraphLib.ConnectionPainter.Selected">
            <summary>
            Gets or sets whether the connection is selected
            </summary>
        </member>
        <member name="P:Netron.GraphLib.ConnectionPainter.Pen">
            <summary>
            Gets or sets the pen used by the painter
            </summary>
        </member>
        <member name="T:Netron.GraphLib.BezierEntity">
            <summary>
            Abstract base class related to the Bezier connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierEntity.mTracking">
            <summary>
            whether tracking is on
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierEntity.mCurrentPoint">
            <summary>
            the current point
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierEntity.mRectangle">
            <summary>
            the rectangle underlying the entity
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierEntity.mHovered">
            <summary>
            whether hovered by the mouse
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierEntity.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierEntity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierEntity.Hit(System.Drawing.PointF)">
            <summary>
            Returns whether the entity is hit by the mouse at the given location
            </summary>
            <param name="p">a point</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierEntity.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the entity on the canvas
            </summary>
            <param name="g">the graphics object to paint on</param>
        </member>
        <member name="M:Netron.GraphLib.BezierEntity.ChangeLocation(System.Drawing.PointF)">
            <summary>
            Changes the location of the entity to the given point
            </summary>
            <param name="p">a point</param>
        </member>
        <member name="M:Netron.GraphLib.BezierEntity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Netron.GraphLib.BezierEntity.Rectangle">
            <summary>
            Gets or sets the underlying rectangle
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierEntity.Hovered">
            <summary>
            Gets or sets whether the mouse is hovering this entity
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierEntity.Tracking">
            <summary>
            Gets or sets whether the tracking is on
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierEntity.CurrentPoint">
            <summary>
            Gets or sets the current point of this entity
            </summary>
        </member>
        <member name="T:Netron.GraphLib.BezierHandle">
            <summary>
            A handle with which the connection can be manipulated
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierHandle.mHandleType">
            <summary>
            handle type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierHandle.mTangent1">
            <summary>
            first handle
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierHandle.mTangent2">
            <summary>
            second handle
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierHandle.pen">
            <summary>
            the pen to draw lines
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierHandle.mCurve">
            <summary>
            the Bezier painter
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierHandle.mVerticalConstraint">
            <summary>
            whether the handle's shifts should be constrained to the vertical only
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.#ctor(System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="x">the x-coordinate of the handle</param>
            <param name="y">the y-coordinate of the handle</param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.#ctor(System.Single,System.Single,Netron.GraphLib.HandleTypes)">
            <summary>
            Constructor
            </summary>
            <param name="x">the x-coordinate of the handle</param>
            <param name="y">the y-coordinate of the handle</param>
            <param name="type">the handle type</param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.#ctor(System.Drawing.PointF)">
            <summary>
            Constructor
            </summary>
            <param name="p">a point</param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.#ctor(System.Drawing.PointF,Netron.GraphLib.HandleTypes)">
            <summary>
            Constructor
            </summary>
            <param name="p">a point</param>
            <param name="type">the handle type</param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.Init">
            <summary>
            Initializes the handle
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.Hit(System.Drawing.PointF)">
            <summary>
            Returns whether the mouse hit this handle
            </summary>
            <param name="p">a point</param>
            <returns>returns whether the given point hit the handle</returns>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.ChangeLocation(System.Drawing.PointF)">
            <summary>
            Changes the location of the handle to the given point
            </summary>
            <param name="p">the new location of the handle</param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the handle
            </summary>
            <param name="g">the graphics objects to paint on</param>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.Dispose">
            <summary>
            Disposes the graphics object
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializator
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Netron.GraphLib.BezierHandle.Curve">
            <summary>
            Gets or sets the curve to which this handle belongs
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierHandle.HandleType">
            <summary>
            Gets or sets the handle type
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierHandle.Tangent1">
            <summary>
            Gets or sets the first tangent
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierHandle.Tangent2">
            <summary>
            Gets or sets the second tangent
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierHandle.VerticalConstraint">
             <summary>
             Gets or sets whether the change should be constrained
             </summary>
             <remarks>This property is not used in the graph library and is useful if you use
            the Bezier stuff in a chart or similar 
            </remarks>
        </member>
        <member name="T:Netron.GraphLib.BezierPainter">
            <summary>
            A Bezier curve painter
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierPainter.division">
            <summary>
            the subdivision
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierPainter.mStepsCount">
            <summary>
            the intermediate steps count
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierPainter.mHandles">
            <summary>
            the collection of handles
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierPainter.mTracking">
            <summary>
            whether tracking is on
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.#ctor(Netron.GraphLib.Connection)">
            <summary>
            Constructor
            </summary>
            <param name="connection">the connection this painter is painting</param>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.AddConnectionPoint(System.Drawing.PointF)">
            <summary>
            Adds an intermediate connection point
            </summary>
            <param name="p">the location of the additional connection-point</param>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.RemoveConnectionPoint(System.Drawing.PointF)">
            <summary>
            Removes a connection point
            </summary>
            <param name="p">the location of the connection-point to be removed</param>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.RemoveHandle(Netron.GraphLib.BezierHandle)">
            <summary>
            Removes an handle
            </summary>
            <param name="handle">the handle to be removed</param>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.Init">
            <summary>
            Initalizes the painter
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.PostDeserialization">
            <summary>
            Post deserialization actions
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the entity on the canvas
            </summary>
            <param name="g">the graphics object to paint on</param>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.B1(System.Single)">
            <summary>
            the B1 coefficient
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.B2(System.Single)">
            <summary>
            the B2 coefficient
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.B3(System.Single)">
            <summary>
            the B3 coefficient
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.B4(System.Single)">
            <summary>
            the B4 coefficient
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.GetBezier(System.Single,Netron.GraphLib.BezierHandle,Netron.GraphLib.BezierHandle)">
            <summary>
            Gets for the given sub-elemts of the Bezier curve an intermediate point
            </summary>
            <param name="percent">the percentage along the curve</param>
            <param name="handle1">the first handle of the segment</param>
            <param name="handle2">the second handle of the segment</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.GetBezier(System.Single,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Gets an intermediate point of the Bezier curve
            </summary>
            <param name="percent">the percentage along the curve</param>
            <param name="C1">the C1 point</param>
            <param name="C2">the C2 point</param>
            <param name="C3">the C3 point</param>
            <param name="C4">the C4 point</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.Hit(System.Drawing.PointF)">
            <summary>
            Returns whether the Bezier curve is hit by the mouse
            </summary>
            <param name="p">a point</param>
            <returns>whether the given point hits the connection</returns>
            <remarks>The curve is really a collection of segments, hence the hit is a linear combination of the basic linear Hit.</remarks>
        </member>
        <member name="M:Netron.GraphLib.BezierPainter.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializator
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Netron.GraphLib.BezierPainter.Tracking">
            <summary>
            Gets or sets whether tracking is on
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierPainter.From">
            <summary>
            Gets or sets where the painter starts
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierPainter.To">
            <summary>
            Gets or sets where the painter ends
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierPainter.Handles">
            <summary>
            Gets or sets the collection of handles
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierPainter.Points">
            <summary>
            Overrides the default since this Bezier thing is based on handles rather than simple points
            </summary>
        </member>
        <member name="T:Netron.GraphLib.BezierTracker">
            <summary>
            Tracker for Bezier connection.
            This tracker consists of the tangential handles and the handles on the curve itself
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ConnectionTracker">
            <summary>
            Tracker for connection objects.
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Tracker">
            <summary>
            Abstract base class for tracker objects.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Tracker.mRectangle">
            <summary>
            Reflects the tracker in a rectangle object
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Tracker.mSite">
            <summary>
            the mSite to which the tracker belongs
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Tracker.mResizable">
            <summary>
            Resize state (Default: true).
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Tracker.mTrack">
            <summary>
            Tracking state.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Tracker.mCurrentHandle">
            <summary>
            Current mCurrentHandle.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Tracker.mCurrentPoint">
            <summary>
            Current mouse location,
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Tracker.handleSize">
            <summary>
            Size of handles (Default: 7x7).
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Tracker.#ctor(System.Boolean)">
            <summary>
            Constructor taking a resizable argument.
            </summary>
            <param name="resize">Resizable state</param>
        </member>
        <member name="M:Netron.GraphLib.Tracker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Tracker.Start(System.Drawing.PointF,System.Drawing.Point)">
            <summary>
            Start tracking
            </summary>
            <param name="p"></param>
            <param name="h"></param>
        </member>
        <member name="M:Netron.GraphLib.Tracker.End">
            <summary>
            Ends tracking
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Tracker.Hit(System.Drawing.PointF)">
            <summary>
            Hit check. To be overridden.
            </summary>
            <param name="p">Current point</param>
            <returns>Handle</returns>
        </member>
        <member name="M:Netron.GraphLib.Tracker.Cursor(System.Drawing.PointF)">
            <summary>
            Returns the cursor at a given location.
            </summary>
            <param name="p">Current location</param>
            <returns>Cursor</returns>
        </member>
        <member name="M:Netron.GraphLib.Tracker.Move(System.Drawing.PointF,System.Drawing.Size,System.Boolean,System.Int32)">
            <summary>
            Moves a tracker to the given location.
            </summary>
            <param name="p">New Location</param>
            <param name="maxSize"></param>
            <param name="snap"></param>
            <param name="snapSize"></param>
        </member>
        <member name="M:Netron.GraphLib.Tracker.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the tracker
            </summary>
            <param name="g">Graphics context</param>
        </member>
        <member name="M:Netron.GraphLib.Tracker.Grip(System.Drawing.Point)">
            <summary>
            Returns the grip at given point.
            </summary>
            <param name="p">Point</param>
            <returns>Rectangle of grip</returns>
        </member>
        <member name="P:Netron.GraphLib.Tracker.Rectangle">
            <summary>
            Gets or sets the rectangle of the tracker
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Tracker.Resizable">
            <summary>
            Gets or sets resizable mode.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Tracker.Site">
            <summary>
            Gets or sets the IGraphSite of the tracker
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Tracker.HandleWidth">
            <summary>
            Gets the width of a mCurrentHandle
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Tracker.HandleHeight">
            <summary>
            Gets the height of a mCurrentHandle
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Tracker.Track">
            <summary>
            Gets the tracking mode
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor for a connection tracker with a list of connection segment points for the handles
            </summary>
            <param name="l">list of points for the handles</param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.#ctor(System.Drawing.PointF[])">
            <summary>
            Constructor
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.#ctor(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Constructor for a connection tracker with a list of connection segment points for 
            the handles and a resize state.
            </summary>
            <param name="l">list of points for the handles</param>
            <param name="resizable">Resize state.</param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.Start(System.Drawing.PointF,System.Drawing.Point)">
            <summary>
            Starts tracking.
            </summary>
            <param name="p">Current mouse location</param>
            <param name="h">Handle</param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.Hit(System.Drawing.PointF)">
            <summary>
            Performs a hit check.
            </summary>
            <param name="p">Current mouse location</param>
            <returns>Grip</returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.Cursor(System.Drawing.PointF)">
            <summary>
            Returns cursor to a point
            </summary>
            <param name="p">Current mouse location</param>
            <returns>Cursor</returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.Move(System.Drawing.PointF,System.Drawing.Size,System.Boolean,System.Int32)">
            <summary>
            Moves the tracking rectangle
            </summary>
            <param name="p">Current mouse location</param>
            <param name="maxSize"></param>
            <param name="snap"></param>
            <param name="snapSize"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.MoveAll(System.Drawing.PointF)">
            <summary>
            Moves the tracking rectangle
            </summary>
            <param name="p">Current mouse location</param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the tracker.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionTracker.Grip(System.Drawing.Point)">
            <summary>
            Gets the grip rectangle
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="F:Netron.GraphLib.BezierTracker.mCurve">
            <summary>
            the painter attached to the curve
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BezierTracker.mHandles">
            <summary>
            the collection of handles
            </summary>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.#ctor(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="l"></param>
            <param name="resizable"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor
            </summary>
            <param name="l"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.#ctor(Netron.GraphLib.BezierPainter)">
            <summary>
            Constructor
            </summary>
            <param name="curve"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.#ctor(Netron.GraphLib.Connection)">
            <summary>
            Constructor
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the tracker on the canvas
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.Hit(System.Drawing.PointF)">
            <summary>
            Returns whether the tracker is hit by the mouse
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.Start(System.Drawing.PointF,System.Drawing.Point)">
            <summary>
            Start the tracking
            </summary>
            <param name="p"></param>
            <param name="h"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.Move(System.Drawing.PointF,System.Drawing.Size,System.Boolean,System.Int32)">
            <summary>
            Moves the tracker to another location
            </summary>
            <param name="p"></param>
            <param name="maxSize"></param>
            <param name="snap"></param>
            <param name="snapSize"></param>
        </member>
        <member name="M:Netron.GraphLib.BezierTracker.MoveAll(System.Drawing.PointF)">
            <summary>
            Moves the whole connnection (including the handles)
            </summary>
            <param name="p"></param>
        </member>
        <member name="P:Netron.GraphLib.BezierTracker.Curve">
            <summary>
            Gets or sets the underlying Bezier curve
            </summary>
        </member>
        <member name="P:Netron.GraphLib.BezierTracker.Handles">
            <summary>
            Gets the handle collection
            </summary>
        </member>
        <member name="T:Netron.GraphLib.TangentHandle">
            <summary>
            This is the tangential manipulator that allows you to change the curvature or bending of the Bezier curve at the handles
            </summary>
        </member>
        <member name="F:Netron.GraphLib.TangentHandle.pen">
            <summary>
            the pen to draw the mHandle
            </summary>
        </member>
        <member name="F:Netron.GraphLib.TangentHandle.mHandle">
            <summary>
            the mHandle to which this tangent-mHandle belongs
            </summary>
        </member>
        <member name="F:Netron.GraphLib.TangentHandle.mCotangent">
            <summary>
            the cotangent
            </summary>
        </member>
        <member name="F:Netron.GraphLib.TangentHandle.mEnabled">
            <summary>
            whether this mHandle is enabled
            </summary>
        </member>
        <member name="M:Netron.GraphLib.TangentHandle.#ctor(Netron.GraphLib.BezierHandle,System.Drawing.PointF)">
            <summary>
            Constructor
            </summary>
            <param name="mHandle"></param>
            <param name="point"></param>
        </member>
        <member name="M:Netron.GraphLib.TangentHandle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.TangentHandle.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the mHandle
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.TangentHandle.ChangeLocation(System.Drawing.PointF)">
            <summary>
            Changes the location of the mHandle to the given point
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.TangentHandle.ChangeCotangent(System.Drawing.PointF)">
            <summary>
            Changes the location of the cotangent
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.TangentHandle.Hit(System.Drawing.PointF)">
            <summary>
            Returns whether this object was hit by the mouse
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.TangentHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializator
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Netron.GraphLib.TangentHandle.Enabled">
            <summary>
            Gets or sets whether the mHandle is enabled
            </summary>
        </member>
        <member name="P:Netron.GraphLib.TangentHandle.Cotangent">
            <summary>
            Gets or sets the cotangent
            </summary>
        </member>
        <member name="P:Netron.GraphLib.TangentHandle.Handle">
            <summary>
            Gets or sets the handle to which this tangent belongs
            </summary>
        </member>
        <member name="T:Netron.GraphLib.DefaultPainter">
            <summary>
            The default connection painter
            </summary>
        </member>
        <member name="M:Netron.GraphLib.DefaultPainter.#ctor(Netron.GraphLib.Connection)">
            <summary>
            Default constructor
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Netron.GraphLib.DefaultPainter.Hit(System.Drawing.PointF)">
            <summary>
            Returns whether the default connection is hit by the mouse
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.DefaultPainter.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the connection on the canvas
            </summary>
            <param name="g"></param>
        </member>
        <member name="T:Netron.GraphLib.RectangularPainter">
            <summary>
            The rectangular connection painter
            </summary>
        </member>
        <member name="F:Netron.GraphLib.RectangularPainter.s">
            <summary>
            start and end of the painter
            </summary>
        </member>
        <member name="F:Netron.GraphLib.RectangularPainter.e">
            <summary>
            start and end of the painter
            </summary>
        </member>
        <member name="M:Netron.GraphLib.RectangularPainter.#ctor(Netron.GraphLib.Connection)">
            <summary>
            Constructor
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Netron.GraphLib.RectangularPainter.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the connection on the canvas
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.RectangularPainter.Hit(System.Drawing.PointF)">
            <summary>
            Returns whether the connection is hit by the mouse
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Connector">
             <summary>
             A Connector aka 'connection point' is the spot on a shape where a line (connection) will attach itself.
             Lits up when cursor is nearby and can contain in/outflow data that can propagate through the connections.
             </summary>
             <remarks>
             Things you can do:
             <br>- making the connector blink or flash when hit</br>
             <br>- show an extensive information box when hovered</br>
             <br>- attach a status message when hovered</br>
             <br>- differentiate different connector on their propagation type or their parnet/child relation</br>
            </remarks>
        </member>
        <member name="F:Netron.GraphLib.Connector.mConnectionShift">
            <summary>
            gives a little displacement between the connection and the connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mConnectorLocation">
            <summary>
            determines the place of the connection shift
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mAdjacentPoint">
            <summary>
            the shift point
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mAllowMultipleConnections">
            <summary>
            only 1 connection allowed if false
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mBelongsTo">
            <summary>
            object this connector belongs to.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mConnections">
            <summary>
            connections attached to this connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mSendList">
            <summary>
            collection of objects that the connector propagates
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mReceiveList">
            <summary>
            collection of values/objects that the connector receives from other connectors
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mName">
            <summary>
            name of the connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mAllowNewConnectionsFrom">
            <summary>
            allow new connections to be launched from this connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Connector.mAllowNewConnectionsTo">
            <summary>
            allow new connection to be attached to this connector
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connector.#ctor(Netron.GraphLib.Shape,System.String,System.Boolean)">
            <summary>
            Constructor of the connector clss
            </summary>
            <param name="o">the underlying shape to which the connector belongs</param>
            <param name="connectorName">the name of the connector</param>
            <param name="multipleConnections">whether the connector allows multiple connections to be added or connected to it</param>		
        </member>
        <member name="M:Netron.GraphLib.Connector.#ctor(System.String)">
            <summary>
            Internal constructor, related to deserialization
            </summary>
            <param name="uid"></param>
        </member>
        <member name="M:Netron.GraphLib.Connector.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.Connector.PaintAdornments(System.Drawing.Graphics)">
            <summary>
            Implements the abstract method of the Entity class
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.Connector.Hit(System.Drawing.RectangleF)">
            <summary>
            Says wether the given RectangleF is contained inside this connector
            </summary>
            <param name="r">the RectangleF as a candidate, usually the mouse coordinates converted to a zero sized rectangle.</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Netron.GraphLib.Connector.Paint(System.Drawing.Graphics)">
            <summary>
            Overrides the Paint of the control and paint a little connection point or a highlighted connecting widget to 
            show the user that a connection is possible.
            </summary>
            <remarks>
            The parent's Hover boolean can be used to check if the mouse is currently hovering over this object. This enables a status message or a different shape.
            </remarks>
            <param name="g">The Graphics or canvas onto which to paint.</param>
        </member>
        <member name="M:Netron.GraphLib.Connector.Delete">
            <summary>
            Necessary implementation of the abstract delete method defined in Entity
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connector.Invalidate">
            <summary>
            Update/refresh the connector's appearance
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Connector.GetCursor(System.Drawing.PointF)">
            <summary>
            Returns the cursor for the current connector
            </summary>
            <param name="p">The cursor location</param>
            <returns>A grip cursor, looks like a focus/target</returns>
        </member>
        <member name="M:Netron.GraphLib.Connector.ConnectionGrip">
            <summary>
            Represents the spot around a connector that lits up and where the connections is attaching itself
            The color is determined by various things, can be red, grey or green. See the Hover conditions in the paint handler for this.
            </summary>
            <returns>A little rectangleF (3x3)</returns>
        </member>
        <member name="M:Netron.GraphLib.Connector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="P:Netron.GraphLib.Connector.AllowNewConnectionsFrom">
            <summary>
            Gets or sets whether to allow new connections to be launched from this connector
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.AllowNewConnectionsTo">
            <summary>
            Gets or sets whether to allow new connections to be attached to this connector
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.Name">
            <summary>
            Gets or sets the name of the connector.
            
            </summary>
            <remarks>
            This property makes it possible to deserialize a connector, it's the only way to find back where a 
            serialized connector came from.
            </remarks>
        </member>
        <member name="P:Netron.GraphLib.Connector.ConnectionShift">
            <summary>
            Gets or sets the connection shift with respect to this connector.
            If the type is 'Omni' it's an offset in the direction of the connection,
            otherwise it creates a little shift/break in the connection in the direction specified by the
            ConnectorLocation.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.Location">
            <summary>
            The location of the connector
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.AllowMultipleConnections">
            <summary>
            Gets or sets whether the connector can have multiple connection attached
            </summary>	
        </member>
        <member name="P:Netron.GraphLib.Connector.Connections">
            <summary>
            Gets the connections of a connector
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.Sends">
            <summary>
            The values/objects that the connector propagates
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.Receives">
            <summary>
            The values/objects that the connectors receives from other connectors
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.BelongsTo">
            <summary>
            The get/Set the ShapeObjects this connector is attached to
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.AdjacentPoint">
            <summary>
            Gets or sets the adjacent point which allows to have a little distance between shapes and connections
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Connector.ConnectorLocation">
            <summary>
            Gets or sets the location of the connector which will determine where the adjacent point will be
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ConnectionEventArgs">
            <summary>
            Provides data for the new connection event
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEventArgs.to">
            <summary>
            the end of the connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEventArgs.from">
            <summary>
            the start of the connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEventArgs.connection">
            <summary>
            the connection under consideration
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEventArgs.manual">
            <summary>
            whether it was added via the mouse
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionEventArgs.#ctor(Netron.GraphLib.Connection)">
            <summary>
            Initializes a new instance of the ConnectionEventArgs class.
            </summary>			
        </member>
        <member name="M:Netron.GraphLib.ConnectionEventArgs.#ctor(Netron.GraphLib.Connection,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="connection"></param>
            <param name="manual"></param>
        </member>
        <member name="P:Netron.GraphLib.ConnectionEventArgs.Manual">
            <summary>
            Gets whether the new connection was created manually, i.e. via user interaction.
            If false it means that the connection was created programmatically.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.ConnectionEventArgs.Connection">
            <summary>
            Gets the newly created connection
            </summary> 
        </member>
        <member name="P:Netron.GraphLib.ConnectionEventArgs.To">
            <summary>
            Gets the 'to' connector of the connection
            </summary> 
        </member>
        <member name="P:Netron.GraphLib.ConnectionEventArgs.From">
            <summary>
            Gets the 'from' connector of the connection
            </summary> 
        </member>
        <member name="T:Netron.GraphLib.PropertiesInfo">
            <summary>
            The signature of a show-properties event
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ItemDescription">
            <summary>
            The signature of the show-description-on-hover event
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ConnectionInfo">
            <summary>
            when a new connection is added event 
            </summary>
        </member>
        <member name="T:Netron.GraphLib.InfoDelegate">
            <summary>
            The general purpose output delegate 
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ShapeInfo">
            <summary>
            when a new shape is added
            </summary>
        </member>
        <member name="T:Netron.GraphLib.FileInfo">
            <summary>
            File information delegate
            </summary>
        </member>
        <member name="T:Netron.GraphLib.InfoEventArgs">
            <summary>
            Event argument to pass generic string information
            </summary>
        </member>
        <member name="F:Netron.GraphLib.InfoEventArgs.mMessage">
            <summary>
            the message
            </summary>
        </member>
        <member name="M:Netron.GraphLib.InfoEventArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Netron.GraphLib.InfoEventArgs.Message">
            <summary>
            Gets or sets the info message
            </summary>
        </member>
        <member name="T:Netron.GraphLib.PropertySpecEventHandler">
            <summary>
            Represents the method that will handle the GetValue and SetValue events of the
            PropertyBag class.
            </summary>
        </member>
        <member name="T:Netron.GraphLib.AutomataDataType">
            <summary>
            The automata data types
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.Integer">
            <summary>
            Corresponds to .Net's Int32 data type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.Double">
            <summary>
            Corresponds to .Net's double data type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.Color">
            <summary>
            Corresponds to .Net's System.Drawing.Color data type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.Vector">
            <summary>
            A 2D floating vector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.Degree">
            <summary>
            An integer between 0 and 360
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.Radians">
            <summary>
            A floating point number interpreted as an angle
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.String">
            <summary>
            Corresponds to .Net's String data type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.Bool">
            <summary>
            Corresponds to .Net's Boolean data type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.Object">
            <summary>
            Corresponds to .Net's Object data type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataDataType.DateTime">
            <summary>
            Corresponds to .Net's datetime data type
            </summary>
        </member>
        <member name="T:Netron.GraphLib.VisualizationTypes">
            <summary>
            Enumerates the different visualization types
            </summary>
        </member>
        <member name="F:Netron.GraphLib.VisualizationTypes.Chernoff">
            <summary>
            Chernoff faces; a parametrized facial expression giving for a constraint set
            of values a very picturial representation
            </summary>
        </member>
        <member name="F:Netron.GraphLib.VisualizationTypes.Color">
            <summary>
            Using colors
            </summary>
        </member>
        <member name="F:Netron.GraphLib.VisualizationTypes.Value">
            <summary>
            The actual values
            </summary>
        </member>
        <member name="F:Netron.GraphLib.VisualizationTypes.Pie">
            <summary>
            A pie-chart
            </summary>
        </member>
        <member name="F:Netron.GraphLib.VisualizationTypes.Gauge">
            <summary>
            A gauge representation
            </summary>
        </member>
        <member name="T:Netron.GraphLib.AutomataInitialState">
            <summary>
            Enumerates the possible initial states of the automata
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataInitialState.SingleDot">
            <summary>
            A single dot in the middle of the range
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataInitialState.Alternate">
            <summary>
            An alternating black-and-white pattern
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataInitialState.Black">
            <summary>
            All cells black
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataInitialState.White">
            <summary>
            All cells white
            </summary>
        </member>
        <member name="F:Netron.GraphLib.AutomataInitialState.External">
            <summary>
            Custom definition of a pattern
            </summary>
        </member>
        <member name="T:Netron.GraphLib.CanvasBackgroundType">
            <summary>
            The types of backgrounds the control can have
            </summary>
        </member>
        <member name="F:Netron.GraphLib.CanvasBackgroundType.FlatColor">
            <summary>
            Uniform flat colored
            </summary>
        </member>
        <member name="F:Netron.GraphLib.CanvasBackgroundType.Gradient">
            <summary>
            Two-color gradient
            </summary>
        </member>
        <member name="F:Netron.GraphLib.CanvasBackgroundType.Image">
            <summary>
            A user defined image
            </summary>
        </member>
        <member name="T:Netron.GraphLib.GraphLayoutAlgorithms">
            <summary>
            The types of graph layouts
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayoutAlgorithms.SpringEmbedder">
            <summary>
            The spring embedder algorithm
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayoutAlgorithms.Tree">
            <summary>
            The tree layout algorithm
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayoutAlgorithms.Randomizer">
            <summary>
            Randomizes the nodes on the canvas
            </summary>
        </member>
        <member name="T:Netron.GraphLib.BasicShapeType">
            <summary>
            The basic types of shapes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicShapeType.BasicNode">
            <summary>
            A resizable node with four connectors
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicShapeType.SimpleNode">
            <summary>
            A non-resiable node with one connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicShapeType.TextLabel">
            <summary>
            A resizable text label node with no connectors
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ConnectionWeight">
            <summary>
            The possible weights of connections
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionWeight.Thin">
            <summary>
            Thin weight
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionWeight.Medium">
            <summary>
            Medium weight
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionWeight.Fat">
            <summary>
            Fat weight
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ConnectionEnd">
            <summary>
            The types of connection ends
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEnd.LeftFilledArrow">
            <summary>
            Filled arrow at the start
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEnd.RightFilledArrow">
            <summary>
            Filled arrow at the end
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEnd.BothFilledArrow">
            <summary>
            Filled arrow at both sides
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEnd.LeftOpenArrow">
            <summary>
            Open arrow at the start
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEnd.RightOpenArrow">
            <summary>
            Open arrow at the end
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEnd.BothOpenArrow">
            <summary>
            Open arrows at both ends
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionEnd.NoEnds">
            <summary>
            No arrows at all
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ConnectorLocation">
            <summary>
            Connector locations
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectorLocation.North">
            <summary>
            The connector's offset will point north of the connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectorLocation.East">
            <summary>
            The connector's offset will point east of the connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectorLocation.South">
            <summary>
            The connector's offset will point south of the connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectorLocation.West">
            <summary>
            The connector's offset will point west of the connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectorLocation.Omni">
            <summary>
            No connector's offset
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectorLocation.Unknown">
            <summary>
            Unknown or not set
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ShapesView">
            <summary>
            The various ways you can display the shapes in the viewer
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ShapesView.Tree">
            <summary>
            Display as a tree
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ShapesView.Icons">
            <summary>
            Display as large icons
            </summary>
        </member>
        <member name="T:Netron.GraphLib.HandleTypes">
            <summary>
            The types of handles of a Bezier curve
            </summary>
        </member>
        <member name="F:Netron.GraphLib.HandleTypes.Single">
            <summary>
            Only one tangent
            </summary>
        </member>
        <member name="F:Netron.GraphLib.HandleTypes.Free">
            <summary>
            Two independent tangents
            </summary>
        </member>
        <member name="F:Netron.GraphLib.HandleTypes.Symmetric">
            <summary>
            Two tangent symmetric on both sides of the handle
            </summary>
        </member>
        <member name="T:Netron.GraphLib.BasicMathFunction">
            <summary>
            Enumerates the basic math functions available in automata nodes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Cos">
            <summary>
            Cosine
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Sin">
            <summary>
            Sine
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Tan">
            <summary>
            Tangens
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.ACos">
            <summary>
            Inverse cosine
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.ASin">
            <summary>
            Inverse sine
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.ATan">
            <summary>
            Inverse tangens
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Cosh">
            <summary>
            Hyperbolic cosine
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Exp">
            <summary>
            Exponential
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Log">
            <summary>
            Logarithm
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Sinh">
            <summary>
            Hyperbolic sine
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Tanh">
            <summary>
            Hyperbolic tangens
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathFunction.Abs">
            <summary>
            Absolute value
            </summary>
        </member>
        <member name="T:Netron.GraphLib.BasicMathOperator">
            <summary>
            Basic math operations available to automata nodes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathOperator.Times">
            <summary>
            Multiplication
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathOperator.Divide">
            <summary>
            Division
            </summary>
        </member>
        <member name="F:Netron.GraphLib.BasicMathOperator.Mod">
            <summary>
            Modulo function
            </summary>
        </member>
        <member name="T:Netron.GraphLib.SortByType">
            <summary>
            Enumerates the type of sortings
            </summary>
        </member>
        <member name="F:Netron.GraphLib.SortByType.Method">
            <summary>
            By method
            </summary>
        </member>
        <member name="F:Netron.GraphLib.SortByType.Property">
            <summary>
            By property
            </summary>
        </member>
        <member name="T:Netron.GraphLib.SortDirection">
            <summary>
            Enumerates the sorting direction
            </summary>
        </member>
        <member name="F:Netron.GraphLib.SortDirection.Ascending">
            <summary>
            Ascending
            </summary>
        </member>
        <member name="F:Netron.GraphLib.SortDirection.Descending">
            <summary>
            Descending
            </summary>
        </member>
        <member name="T:Netron.GraphLib.OutputInfoLevels">
            <summary>
            The different levels of information send out to the outside world 
            by the graph control.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.OutputInfoLevels.Exception">
            <summary>
            Thrown exception message
            </summary>
        </member>
        <member name="F:Netron.GraphLib.OutputInfoLevels.Info">
            <summary>
            Informative message.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.OutputInfoLevels.None">
            <summary>
            Unspecified message
            </summary>
        </member>
        <member name="T:Netron.GraphLib.GraphAbstract">
            <summary>
            The abstract contains the abstract structure of the graph
            Pretty much just an enumeration of the elements with standard collection methods.
            Derived from the Shape class, can draw the whole plex as if it was a single shape
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IEntityBundle">
            <summary>
            Describes a collection of shapes and connections;
            this can be the whole GraphAbstract or a subset of a diagram.
            In general, anything that can be (de)serialized to/from the diagram.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntityBundle.Connections">
            <summary>
            Gets the connection collection of the bundle
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IEntityBundle.Shapes">
            <summary>
            Gets the shape collection of the bundle
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphAbstract.mDefaultLayer">
            <summary>
            the default and static background layer
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphAbstract.mLayers">
            <summary>
            the shape layers
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphAbstract.mSite">
            <summary>
            the control this abstract belongs to
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphAbstract.mShapes">
            <summary>
            the collection of shapes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphAbstract.mConnections">
            <summary>
            the collection of connections
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphAbstract.mGraphInformation">
            <summary>
            the meta-info of the graph (author, description,...)
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphAbstract.paintables">
            <summary>
            ordered collection of entities
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.SumRectangles">
            <summary>
            Returns the union of the bounding rectangles of all entities
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.BindEntityCollectionEvents">
            <summary>
            Binds the collections events of the ShapeCollection and ConnectionCollection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.Layers_ClearComplete(System.Object,System.EventArgs)">
            <summary>
            Performs an additional reset of all shapes to the default layer if all layers are 
            removed from the collection.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>Note that this methods needs to be public in order to serialize the class, due to security reasons.</remarks>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.Paint(System.Drawing.Graphics)">
            <summary>
            Paint overrides the base method and paints all elements of the array,
            i.e. the boxes and connectors. The paint method of the elements is called to draw themselves.
            </summary>
            <param name="g">Graphics class</param>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.PaintExternal(System.Drawing.Graphics)">
            <summary>
            Paints the abstract on request of an external object (i.e. not the graph control itself) like the printer or the SaveImage method
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.Insert(Netron.GraphLib.Shape)">
            <summary>
            Inserts a new object into the plex. 
            </summary>
            <param name="so">the object to insert</param>
            <remarks>Note that you can add only one shape at a time.
            </remarks>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.Insert(Netron.GraphLib.Connection)">
            <summary>
            Inserts a connection in the bastract
            </summary>
            <param name="con"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.Delete">
            <summary>
            Deletes an element of the plex, goes via the History class, also deletes the mConnections.
            </summary>
            <remarks>Note that multiple mShapes can be delete in one go if they have the Selected flag set to true.</remarks>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.Transmit">
            <summary>
            This method initiates the tramsmission of data over the mConnections. It calls the tramsit method on all sub-level objects.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.Update">
            <summary>
            Starts to update all the nodes of the plex; can be a calculation on the basis of the sent values or any other.
            Usually the process before all the received values are reset.
            </summary>
            <remarks>
            In normal circumstances this method goes hand-in-hand with the transmit method.
            Well, maybe some new physics can be invented if you hack here.
            </remarks>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.Invalidate">
            <summary>
            IPaintable.Invalidate implementation
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.InitAutomata">
            <summary>
            IAutomataCell.InitAutomata implementation
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.BeforeUpdate">
            <summary>
            IAutomataCell.BeforeUpdate implementation
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.AfterUpdate">
            <summary>
            IAutomataCell.AfterUpdate implementation
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="M:Netron.GraphLib.GraphAbstract.OnDeserialization(System.Object)">
            <summary>
            IDeserializationCallback implementation
            </summary>
            <param name="sender"></param>
        </member>
        <member name="P:Netron.GraphLib.GraphAbstract.Layers">
            <summary>
            Gets the shape layers
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphAbstract.DefaultLayer">
            <summary>
            Gets the default layer of the control
            
            </summary>
            <remarks>Note that this is a static property</remarks>
        </member>
        <member name="P:Netron.GraphLib.GraphAbstract.Rectangle">
            <summary>
            Gets or sets the bounding rectangle
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphAbstract.Shapes">
            <summary>
            Gets the shape collection of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphAbstract.Connections">
            <summary>
            Gets the collection of connections
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphAbstract.GraphInformation">
            <summary>
            Gets or sets the graph information, i.e. the meta-information
            of the graph like author, description, etc.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphAbstract.Site">
            <summary>
            Gets or sets the site of the abstract
            </summary>
        </member>
        <member name="T:Netron.GraphLib.GraphInformation">
            <summary>
            Allows to add meta-info to the graph; author, description, date and so on
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphInformation.mDescription">
            <summary>
            the description of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphInformation.mAuthor">
            <summary>
            the author of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphInformation.mCreationDate">
            <summary>
            the creation date of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphInformation.mSubject">
            <summary>
            the subject of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphInformation.mTitle">
            <summary>
            the title of the graph
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphInformation.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphInformation.#ctor(System.String)">
            <summary>
            Constructs an ew instance with the given title
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphInformation.#ctor(System.String,System.String)">
            <summary>
            Constructs a new instance with the given title and author
            </summary>
            <param name="title"></param>
            <param name="author"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphInformation.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a new instance with the given title, subject and author
            </summary>
            <param name="title"></param>
            <param name="author"></param>
            <param name="subject"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphInformation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphInformation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the streaming context</param>
        </member>
        <member name="P:Netron.GraphLib.GraphInformation.Description">
            <summary>
            Gets or sets the description of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphInformation.Author">
            <summary>
            Gets or sets the author of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphInformation.CreationDate">
            <summary>
            Gets or sets the creation date of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphInformation.Subject">
            <summary>
            Gets or sets the subject of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphInformation.Title">
            <summary>
            Gets or sets the title of the graph
            </summary>
        </member>
        <member name="T:Netron.GraphLib.GraphLayout">
            <summary>
            Abstract base class for the implementation of a layout algorithm
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IGraphLayout">
            <summary>
            Required layout methods
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphLayout.StartLayout">
            <summary>
            This is the layout method running on a separate thread.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphLayout.StopLayout">
            <summary>
            Stops the layout process
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayout.mSite">
            <summary>
            the IGraphSite or control
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayout.nnodes">
            <summary>
            the number of nodes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayout.nedges">
            <summary>
            the number of edges
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayout.CanvasSize">
            <summary>
            the canvas size
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayout.nodes">
            <summary>
            the nodes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayout.edges">
            <summary>
            the edges
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayout.extract">
            <summary>
            the abstract
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphLayout.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Default constructor
            </summary>
            <param name="mSite"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphLayout.StartLayout">
            <summary>
            Overridable start layout method
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphLayout.StopLayout">
            <summary>
            Overridable stop layout method
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphLayout.GraphCenter">
            <summary>
            Overridable, returns the center of the graph
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.GraphLayout.Site">
            <summary>
            Gets or sets the mSite to which the layout belongs
            </summary>
        </member>
        <member name="T:Netron.GraphLib.LayoutFactory">
            <summary>
            Factory of graph layouts
            </summary>
        </member>
        <member name="F:Netron.GraphLib.LayoutFactory.mGraphLayoutAlgorithm">
            <summary>
            the layout algorithm
            </summary>
        </member>
        <member name="F:Netron.GraphLib.LayoutFactory.mSite">
            <summary>
            the graph site
            </summary>
        </member>
        <member name="M:Netron.GraphLib.LayoutFactory.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Default constructor
            </summary>
            <param name="mSite"></param>
        </member>
        <member name="M:Netron.GraphLib.LayoutFactory.GetRunable">
            <summary>
            Return a delegate the layout-thread can run
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.LayoutFactory.GraphLayoutAlgorithm">
            <summary>
            Gets or sets the graph layout algorithm
            </summary>
        </member>
        <member name="P:Netron.GraphLib.LayoutFactory.Site">
            <summary>
            Gets or sets the IGraphSite or control the factory refers to
            </summary>
        </member>
        <member name="T:Netron.GraphLib.LayoutFactory.runableDelegate">
            <summary>
            Delegate for running a spearate thread, used by the layout process
            </summary>
        </member>
        <member name="T:Netron.GraphLib.RandomizerLayout">
            <summary>
            Organizes the diagram in a random way
            </summary>
        </member>
        <member name="M:Netron.GraphLib.RandomizerLayout.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Default constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.RandomizerLayout.StartLayout">
            <summary>
            Starts the randomizer layout
            </summary>
        </member>
        <member name="T:Netron.GraphLib.SpringEmbedder">
            <summary>
            Implements the wonderful spring embedder layout algorithm, for more information see
            the hyperlinks and information pages on the Netron Project site.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.SpringEmbedder.random">
            <summary>
            Allows to the shake the graph layout a bit
            </summary>
        </member>
        <member name="F:Netron.GraphLib.SpringEmbedder.cutOff">
            <summary>
            algorithm cutoff
            </summary>
        </member>
        <member name="M:Netron.GraphLib.SpringEmbedder.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Class Constructor 
            </summary>
        </member>
        <member name="M:Netron.GraphLib.SpringEmbedder.StartLayout">
            <summary>
            Starts the layout process
            </summary>
        </member>
        <member name="M:Netron.GraphLib.SpringEmbedder.relax">
            <summary>
            the relaxation or layout algorithm<br>
            the MethodImpl sets a lock on the class, the 'lock(this)' could be used inside the code as well </br>
            </summary>
        </member>
        <member name="P:Netron.GraphLib.SpringEmbedder.LayoutCutOff">
            <summary>
            Gets or sets the cutoff of the layout, i.e. the time in seconds the layout algorithm is working
            </summary>
        </member>
        <member name="T:Netron.GraphLib.TreeLayout">
            <summary>
            Organizes the diagram in a tree structure
            </summary>
        </member>
        <member name="F:Netron.GraphLib.TreeLayout.wordSpacing">
            <summary>
            the space between the nodes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.TreeLayout.branchHeight">
            <summary>
            the height between branches
            </summary>
        </member>
        <member name="M:Netron.GraphLib.TreeLayout.#ctor(Netron.GraphLib.Interfaces.IGraphSite)">
            <summary>
            Default constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.TreeLayout.AdjacentNodes(Netron.GraphLib.Analysis.IGraph,Netron.GraphLib.Shape)">
            <summary>
            Returns the adjacent shapes on the basis of a structuring IGraph, usually
            what is being returned by Prim's algorithm.
            This is equal to the adjacent nodes if the graph is a tree.
            Whether a connected nodes is really a 'child' is the sense of being positioned 
            on a lower level cannot be decided here but belongs to the layout
            </summary>
            <param name="structure"></param>
            <param name="shape"></param>
            <returns>A ShapeCollection of shapes</returns>
        </member>
        <member name="M:Netron.GraphLib.TreeLayout.StartLayout">
            <summary>
            Feeds the layout thread
            </summary>
        </member>
        <member name="M:Netron.GraphLib.TreeLayout.VerticalDrawTree(Netron.GraphLib.Analysis.IGraph,Netron.GraphLib.Shape,System.Boolean,System.Single,System.Single)">
            <summary>
            Positions everything underneath the node and returns the total width of the kids
            </summary>
            <param name="containerNode"></param>
            <param name="first"></param>
            <param name="shiftLeft"></param>
            <param name="shiftTop"></param>
            <param name="structure"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.TreeLayout.HorizontalDrawTree(Netron.GraphLib.Shape,System.Boolean,System.Single,System.Single)">
            <summary>
            Horizontal layout algorithm
            </summary>
            <param name="containerNode"></param>
            <param name="first"></param>
            <param name="shiftLeft"></param>
            <param name="shiftTop"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.VisitCollection">
            <summary>
            Utility class to keep track which shapes have been visited or positioned (during the layout process).
            </summary>
        </member>
        <member name="T:Netron.GraphLib.AboutForm">
            <summary>
            Splash form for the control-designer 'About'-verb.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IScript">
            <summary>
            Used by the scripter-shape in the Automatron application
            but more in general; this is part of scripting at runtime.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IScript.Initialize(Netron.GraphLib.Interfaces.IHost)">
            <summary>
            Initializes with the host
            </summary>
            <param name="Host"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IScript.Method1">
            <summary>
            Generic method
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IScript.Method2">
            <summary>
            Generic method
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IScript.Method3">
            <summary>
            Generic method
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IScript.Compute">
            <summary>
            Computes something
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IHost">
            <summary>
            Used by the scripter-shape in the Automatron application
            but more in general; this is part of scripting at runtime.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IHost.ShowMessage(System.String)">
            <summary>
            Sends a message to the GUI
            </summary>
            <param name="Message"></param>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IHost.Out">
            <summary>
            Gets the Out-connector of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IHost.XIn">
            <summary>
            Gets the x-value of the connector
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IHost.YIn">
            <summary>
            Gets the y-value of the connector
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IGraphSite">
            <summary>
            Interface of a graph site (control) 
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.Invalidate(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Invalidates the given rectangle and its children
            </summary>
            <param name="r">A System.Drawing.Rectangle object that represents the region to invalidate. </param>
            <param name="b">invalidateChildren: true to invalidate the control's child controls; otherwise, false.</param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.Invalidate(System.Drawing.Rectangle)">
            <summary>
            Invalidates the given rectangle
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.Invalidate">
            <summary>
            Invalidate the whole control
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.InvalidateRectangle(System.Drawing.Rectangle)">
            <summary>
            Let the site invalidate the rectangle
            </summary>
            <param name="rect">invalid rectangle</param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.ZoomPoint(System.Drawing.Point)">
            <summary>
            Zooms a point
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.UnzoomPoint(System.Drawing.Point)">
            <summary>
            Unzooms a point.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.ZoomRectangle(System.Drawing.Rectangle)">
            <summary>
            Zooms a rectangle.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.UnzoomRectangle(System.Drawing.Rectangle)">
            <summary>
            Unzooms a rectangle.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.ZoomPoint(System.Drawing.PointF)">
            <summary>
            Zooms a point
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.UnzoomPoint(System.Drawing.PointF)">
            <summary>
            Unzooms a point.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.ZoomRectangle(System.Drawing.RectangleF)">
            <summary>
            Zooms a rectangle.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.UnzoomRectangle(System.Drawing.RectangleF)">
            <summary>
            Unzooms a rectangle.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.PaintArrow(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Paints an arrow
            </summary>
            <param name="g"></param>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
            <param name="lineColor"></param>
            <param name="filled"></param>
            <param name="showLabel"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.GetEntity(System.String)">
            <summary>
            Gets the entity with the given UID
            </summary>
            <param name="UID"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.RaiseShowProperties(Netron.GraphLib.PropertyBag)">
            <summary>
            Raises the ShowProps event
            </summary>
            <param name="props"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.RaiseOnShapeAdded(Netron.GraphLib.Shape)">
            <summary>
            Raises the OnShapeAdded event
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.RaiseOnConnectionAdded(Netron.GraphLib.Connection,System.Boolean)">
            <summary>
            Raises the OnConnectionAdded event
            </summary>
            <param name="connection"></param>
            <param name="manual"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.RaiseOnShowGraphLayers">
            <summary>
            Raises the OnShowGraphLayers event
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.RaiseOnShowPropertiesDialogRequest">
            <summary>
            Raises the OnShowPropertiesDialogRequest event
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.GetSummary(Netron.GraphLib.Entity)">
            <summary>
            Gets the Summary of the given entity
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.GetLayerAttributes">
            <summary>
            Returns the layers as a Attribute-array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.SetToolTip(System.String)">
            <summary>
            Sets the tooltip of the control
            </summary>
            <param name="tip"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.OutputInfo(System.Object)">
            <summary>
            Outputs info to the outside world
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.OutputInfo(System.Object,Netron.GraphLib.OutputInfoLevels)">
            <summary>
            Outputs info to the outside world
            </summary>
            <param name="obj"></param>
            <param name="level"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IGraphSite.Open(System.String)">
            <summary>
            Opens a binary saved diagram
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Layers">
            <summary>
            Gets the layers defined in the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Abstract">
            <summary>
            Gets the graph-abstract
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Libraries">
            <summary>
            Gets the libraries defined and loaded of custom objects
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Shapes">
            <summary>
            Gets the collection of shapes active in the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Connections">
            <summary>
            Gets the collection of connection active in the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Size">
            <summary>
            Gets the size of the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Zoom">
            <summary>
            Gets or sets the zoom-value
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.RestrictToCanvas">
            <summary>
            Gets or sets whether to restrict to the canvas
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.AutoScrollPosition">
            <summary>
            Gets or sets the AutoScrollPosition
            <seealso cref="P:System.Windows.Forms.ScrollableControl.AutoScrollPosition"/>
            </summary>
            
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.DoTrack">
            <summary>
            Gets or sets whether tracking is on
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Width">
            <summary>
            Gets the width of the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Height">
            <summary>
            Gets the height of the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Interfaces.IGraphSite.Graphics">
            <summary>
            Gets the Graphics object used by the control
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IReporter">
            <summary>
            Describes a reporting utility
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IReporter.Report">
            <summary>
            Returns a report, the datatype depends on the actual reporting implementation
            </summary>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Interfaces.IWidget">
            <summary>
            Describes the elements of a widget
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IWidget.GetCursor(System.Drawing.PointF)">
            <summary>
            Gets the cursor when the mouse is hovering the given point in the entity
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IWidget.Hit(System.Drawing.RectangleF)">
            <summary>
            Says wether, for the given rectangle, the underlying shape is contained in it.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IWidget.OnMouseDown(System.Drawing.PointF)">
            <summary>
            Handles the mouse down event on the widget
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IWidget.OnMouseMove(System.Drawing.PointF)">
            <summary>
            Handles the mouse move event on the widget
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.Interfaces.IWidget.OnTransmission">
            <summary>
            Reacts to the transmission event
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.Binary.BinaryAmbiance">
            <summary>
            Collects ambient properties of the GraphControl
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mLocked">
            <summary>
            the Locked setting
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mShowGrid">
            <summary>
            the ShowGrid setting
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mGradientBottom">
            <summary>
            the bottom gradient
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mGradientTop">
            <summary>
            the top gradient
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mAllowAddConnection">
            <summary>
            the AllowAddConnection property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mAllowAddShape">
            <summary>
            the AllowAddShape property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mAllowDeleteShape">
            <summary>
            the AllowDeleteShape property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mAllowMoveShape">
            <summary>
            the AllowMoveShape property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mAutomataPulse">
            <summary>
            the AutomataPulse property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mBackgroundColor">
            <summary>
            the BackgroundColor property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mBackgroundImagePath">
            <summary>
            the BackgroundImagePath property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mBackgroundType">
            <summary>
            the BackgroundType property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mDefaultConnectionPath">
            <summary>
            the DefaultConnectionPath property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mGradientMode">
            <summary>
            the GradientMode property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mEnableContextMenu">
            <summary>
            the EnableContextMenu property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mGridSize">
            <summary>
            the GridSize property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mRestrictToCanvas">
            <summary>
            the RestrictToCanvas property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mSnap">
            <summary>
            the Snap property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mDefaultConnectionEnd">
            <summary>
            the DefaultConnectionEnd property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mEnableLayout">
            <summary>
            the mEnableLayout property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mGraphLayoutAlgorithm">
            <summary>
            the GraphLayoutAlgorithm property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mEnableTooltip">
            <summary>
            the EnableTooltip property
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryAmbiance.mShowAutomataController">
            <summary>
            the ShowAutomataController property
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinaryAmbiance.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinaryAmbiance.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinaryAmbiance.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization of this class
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.ShowAutomataController">
            <summary>
            Gets or sets whether the internal dataflow is runnning
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.EnableTooltip">
            <summary>
            Gets or sets the EnableTooltip property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.Locked">
            <summary>
            Gets or sets the Locked property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.GraphLayoutAlgorithm">
            <summary>
            Gets or sets the GraphLayoutAlgorithm property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.EnableLayout">
            <summary>
            Gets or sets the EnableLayout property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.DefaultConnectionEnd">
            <summary>
            Gets or sets the DefaultConnectionEnd property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.Snap">
            <summary>
            Gets or sets the Snap property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.RestrictToCanvas">
            <summary>
            Gets or sets the RestrictToCanvas property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.GridSize">
            <summary>
            Gets or sets the GridSize property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.GradientMode">
            <summary>
            Gets or sets the GradientMode property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.EnableContextMenu">
            <summary>
            Gets or sets the EnableContextMenu property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.DefaultConnectionPath">
            <summary>
            Gets or sets the DefaultConnectionPath property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.BackgroundType">
            <summary>
            Gets or sets the BackgroundType property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.BackgroundImagePath">
            <summary>
            Gets or sets the BackgroundImagePath property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.BackgroundColor">
            <summary>
            Gets or sets the BackgroundColor property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.AutomataPulse">
            <summary>
            Gets or sets the AutomataPulse property
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.AllowMoveShape">
            <summary>
            Gets or sets the AllowAddShape property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.AllowDeleteShape">
            <summary>
            Gets or sets the AllowAddShape property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.AllowAddShape">
            <summary>
            Gets or sets the AllowAddShape property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.AllowAddConnection">
            <summary>
            Gets or sets the AllowAddConnection property of the GraphControl
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.GradientTop">
            <summary>
            Gets or sets the gradient top-color
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.GradientBottom">
            <summary>
            Gets or sets the gradient bottom-color
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryAmbiance.ShowGrid">
            <summary>
            Gets or sets the ShowGrid setting
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.Binary.BinaryCapsule">
            <summary>
            Encapsulates the GraphAbstract and additional ambient properties of the GraphControl
            for binary (de)serialization.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryCapsule.mGraphAbstract">
            <summary>
            the actual diagram
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryCapsule.mBinaryAmbiance">
            <summary>
            the ambiant properties
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Binary.BinaryCapsule.mThumbnail">
            <summary>
            the thumbnail
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinaryCapsule.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinaryCapsule.#ctor(Netron.GraphLib.GraphAbstract,Netron.GraphLib.IO.Binary.BinaryAmbiance)">
            <summary>
            Constructor
            </summary>
            <param name="graphAbstract"></param>
            <param name="ambiance"></param>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryCapsule.Thumbnail">
            <summary>
            Gets or sets the thumbnail of the diagram
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryCapsule.Abstract">
            <summary>
            Gets or sets the GraphAbstract
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Binary.BinaryCapsule.Ambiance">
            <summary>
            Gets or sets the ambiance properties
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.Binary.BinarySerializer">
            <summary>
            Utility class to binary (de)serialize a diagram (from) to file
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinarySerializer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinarySerializer.GetControlAmbiance(Netron.GraphLib.UI.GraphControl)">
            <summary>
            Returns the ambiance of the GraphControl
            </summary>
            <param name="site"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinarySerializer.SetControlAmbiance(Netron.GraphLib.UI.GraphControl,Netron.GraphLib.IO.Binary.BinaryAmbiance)">
            <summary>
            Sets the GraphControl's properties with the given deserialized ambiance
            </summary>
            <param name="site"></param>
            <param name="ambiance"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinarySerializer.SaveAs(System.String,Netron.GraphLib.UI.GraphControl)">
            <summary>
            Binary saves the diagram
            </summary>
            <param name="fileName">the file-path</param>
            <param name="site">the graph-control instance to be serialized</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinarySerializer.Open(System.String,Netron.GraphLib.UI.GraphControl)">
            <summary>
            Opens the binary-saved diagram
            </summary>
            <param name="fileName"></param>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinarySerializer.UnwrapBundle(Netron.GraphLib.Interfaces.IEntityBundle,Netron.GraphLib.UI.GraphControl)">
            <summary>
            Unwraps the IEntityBundle to the given site
            </summary>
            <param name="bundle"></param>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinarySerializer.DumpInfo">
            <summary>
            Dumps info related to the binary serialization
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Binary.BinarySerializer.DumpInfo(System.Reflection.MemberInfo[])">
            <summary>
            Dumps info related to the binary serialization
            </summary>
            <param name="array"></param>
        </member>
        <member name="T:Netron.GraphLib.IO.HTML.HTMLExporter">
            <summary>
            Exports a diagram to HTML
            includes the diagram as an image with an
            imagemap if there are URL's included on shapes.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.HTML.HTMLExporter.mSite">
            <summary>
            the graph control
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.HTML.HTMLExporter.#ctor(Netron.GraphLib.UI.GraphControl)">
            <summary>
            Default constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.HTML.HTMLExporter.CreateDirAndFiles(System.String)">
            <summary>
            Creates the necessary files and directories for the export
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.HTML.HTMLExporter.GetURLMap">
            <summary>
            Creates the image-map for the clickable areas related to the URL on the shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.HTML.HTMLExporter.SaveAs(System.String)">
            <summary>
            Saves an HTML version of the diagram to the given file
            </summary>
            <param name="filePath">a path</param>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.DataCollection">
            <summary>
            Generic Collection of NML related data
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.DataCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.DataCollection.Add(System.Object)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.DataCollection.Contains(System.Object)">
            <summary>
            Returns whether the given object is in the collection
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.DataCollection.Remove(System.Object)">
            <summary>
            Remove an item from the collection
            </summary>
            <param name="o"></param>		
        </member>
        <member name="M:Netron.GraphLib.IO.NML.DataCollection.ToString">
            <summary>
            Overrides the default method to return
            the content of the collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.DataCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.FromToCollection">
            <summary>
            STC of FromTo collection, related to deserailization of connections
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.FromToCollection.Add(Netron.GraphLib.IO.NML.FromTo)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="ft">a ParentChild object</param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.FromToCollection.Item(System.Int32)">
            <summary>
            integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.ConnectionType">
            <summary>
            The XML wrappper of an edge or connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectionType.mData">
            <summary>
            the data collection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectionType.mSource">
            <summary>
            the source
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectionType.mUID">
            <summary>
            the mUID
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectionType.mSourcePort">
            <summary>
            the source-connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectionType.mTargetPort">
            <summary>
            the target-connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectionType.mTarget">
            <summary>
            the target
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectionType.mGraph">
            <summary>
            the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectionType.mInstanceKey">
            <summary>
            the unique key to the shape to be instantiated
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectionType.InstanceKey">
            <summary>
            Gets or sets which key to use to instantiate the connection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectionType.Data">
            <summary>
            Gets or sets the data collection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectionType.Graph">
            <summary>
            Gets or sets the graph the connection belongs to
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectionType.ID">
            <summary>
            Gets or sets the mUID
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectionType.Source">
            <summary>
            Gets or sets the source
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectionType.Target">
            <summary>
            Gets or sets the target
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectionType.Sourceport">
            <summary>
            Gets or sets the source-connector
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectionType.Targetport">
            <summary>
            Gets or sets the target-connector
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.ConnectorType">
            <summary>
            XML wrapper of a Connector object
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectorType.mUID">
            <summary>
            the uid
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ConnectorType.name">
            <summary>
            the name
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectorType.UID">
            <summary>
            Gets or sets the UID
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ConnectorType.Name">
            <summary>
            Gets or sets the name of the connector
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.DataType">
            <summary>
            Generic XML wrapper for any diagram data
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.DataType.mValue">
            <summary>
            data collection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.DataType.mName">
            <summary>
            the key
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.DataType.mIsCollection">
            <summary>
            the mIsCollection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.DataType.#ctor(System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.DataType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.DataType.Name">
            <summary>
            Gets or sets the key of the data type
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.DataType.IsCollection">
            <summary>
            Gets or sets the mIsCollection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.DataType.Value">
            <summary>
            Gets or sets the text
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.DefaultType">
            <summary>
            XML wrapper for a default
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.DefaultType.mText">
            <summary>
            the text
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.DefaultType.Text">
            <summary>
            Gets or sets the text
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.GraphEdgeDefaultType">
            <summary>
            XML wrapper for the edge type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.GraphEdgeDefaultType.Directed">
            <summary>
            Directed edge
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.GraphEdgeDefaultType.Undirected">
            <summary>
            Undirected edge
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.KeyForType">
            <summary>
            For key-types
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyForType.All">
            <summary>
            
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyForType.Graph">
            <summary>
            
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyForType.Node">
            <summary>
            
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyForType.Edge">
            <summary>
            
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyForType.HyperEdge">
            <summary>
            
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyForType.Port">
            <summary>
            
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyForType.EndPoint">
            <summary>
            
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.FromTo">
            <summary>
            Utility class to speed up the deserialization of connections
            This struct keeps unattached connections, the connections have the UID of the From and the To connector
            but the respective connectors are still null
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.FromTo.#ctor(System.String,System.String)">
            <summary>
            Default ctor
            </summary>		
        </member>
        <member name="M:Netron.GraphLib.IO.NML.FromTo.#ctor(System.String,System.String,Netron.GraphLib.Connection)">
            <summary>
            constructor
            </summary>
            <param name="from">the UID of the From-connector</param>
            <param name="to">the UID of the To-Connector</param>
            <param name="con">the instantiated connection</param>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.FromTo.From">
            <summary>
            Gets or sets the parent in this relation
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.FromTo.To">
            <summary>
            Gets or sets the child in this relation
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.FromTo.Connection">
            <summary>
            Gets or sets the connection
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.GraphInformationType">
            <summary>
            Generic XML wrapper for any diagram data
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.GraphInformationType.mDescription">
            <summary>
            the description of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.GraphInformationType.mAuthor">
            <summary>
            the author of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.GraphInformationType.mCreationDate">
            <summary>
            the creation date of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.GraphInformationType.mSubject">
            <summary>
            the subject of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.GraphInformationType.mTitle">
            <summary>
            the title of the graph
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.GraphInformationType.#ctor">
            <summary>
            Required XMLSerilization constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.GraphInformationType.#ctor(Netron.GraphLib.GraphInformation)">
            <summary>
            Default constructor
            </summary>
            <param name="info"></param>		
        </member>
        <member name="M:Netron.GraphLib.IO.NML.GraphInformationType.ToGraphInformation">
            <summary>
            Returns this type as a GraphInformation object.
            </summary>
            <remarks>Used at deserialization</remarks>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.GraphInformationType.Description">
            <summary>
            Gets or sets the description of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.GraphInformationType.Author">
            <summary>
            Gets or sets the author of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.GraphInformationType.CreationDate">
            <summary>
            Gets or sets the creation date of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.GraphInformationType.Subject">
            <summary>
            Gets or sets the subject of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.GraphInformationType.Title">
            <summary>
            Gets or sets the title of the graph
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.GraphType">
            <summary>
            XML wrapper for a graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.GraphType.mItems">
            <summary>
            the items
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.GraphType.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.GraphType.GraphInformation">
            <summary>
            Gets or sets the graph-info of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.GraphType.Items">
            <summary>
            Gets or sets the item collection
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.KeyType">
            <summary>
            XML wrapper for the key-type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyType.mDefault">
            <summary>
            the default type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyType.id">
            <summary>
            the ide
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyType.mDescription">
            <summary>
            the description
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.KeyType.mFor">
            <summary>
            the for key-type
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.KeyType.Desc">
            <summary>
            Gets or sets the description
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.KeyType.Default">
            <summary>
            Gets or sets the default type
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.KeyType.ID">
            <summary>
            Gets or sets the id
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.KeyType.For">
            <summary>
            Gets or sets the for key-type
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.LocatorType">
            <summary>
            XML wrapper for the locator type
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.NMLSerializer">
            <summary>
            NMLSerializer serializes a graph to NML
            Thanks to Martin Cully for his work on this.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.#ctor(Netron.GraphLib.UI.GraphControl)">
            <summary>
            Constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dtdPath"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.Open(System.String,Netron.GraphLib.UI.GraphControl)">
            <summary>
            Opens a NML serialized file
            </summary>
            <param name="filename"></param>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.SaveAs(System.String,Netron.GraphLib.UI.GraphControl)">
            <summary>
            Saves the diagram to NML format
            </summary>
            <param name="fileName">the file-path</param>
            <param name="site">the graph-control instance to be serialized</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.Serialize(System.Xml.XmlWriter,Netron.GraphLib.GraphAbstract)">
            <summary>
            Starts the serialization process. Takes the abstract of the graph and
            constructs a NMLType proxy-like object which will be serialized via the 
            standard .Net XmlSerializer process.
            </summary>
            <param name="writer">An XmlWriter</param>
            <param name="g">The GraphAbstract object to be serialized</param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.Serialize">
            <summary>
            Returns the NML representation of the given GraphAbstract
            </summary>	
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.SerializeNode(Netron.GraphLib.Shape)">
            <summary>
            Serializes a node
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.SerializeEdge(Netron.GraphLib.Connection)">
            <summary>
            Serializes an edge
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.Deserialize(System.Xml.XmlReader)">
            <summary>
            Deserializes the graph's xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the presumed NML-string to a GraphAbstract object
            </summary>
            <param name="xml">NML compliant string</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.Deserialize(Netron.GraphLib.IO.NML.NMLType)">
            <summary>
            Deserializes the graphtype, here's where all the smart stuff happens
            </summary>
            <param name="gml">the graphtype which acts as an intermediate storage between XML and the GraphAbstract
            </param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.Validate(System.Xml.XmlReader)">
            <summary>
            Validation of the XML
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.ValidationHandler(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Outputs the validation of the XML
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.GetShape(System.String)">
            <summary>
            Returns a shape on the basis of the unique instantiation key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.FormatID(Netron.GraphLib.Entity)">
            <summary>
            Returns the UID of the entity in string format
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.DataTypesFromAttributes(Netron.GraphLib.IO.NML.PropertiesHashtable)">
            <summary>
            Converts the hashtable of GraphML-marked properties to types
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.GetTypeQualifiedName(System.Object)">
            <summary>
            Returns qualified type name of o
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.NMLSerializer.GetTypeQualifiedName(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.NMLType">
            <summary>
            The base-template class for the NML serialization,
            this class corresponds to the root of the XML
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.NMLType.mKeys">
            <summary>
            the keys
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.NMLType.mGraph">
            <summary>
            the graph node
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.NMLType.mVersion">
            <summary>
            the graphlib version
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.NMLType.mItems">
            <summary>
            the data items
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.NMLType.Version">
            <summary>
            Gets or sets the NML version
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.NMLType.Graph">
            <summary>
            Gets or sets the serialized graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.NMLType.Key">
            <summary>
            Gets or sets the key-collection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.NMLType.Items">
            <summary>
            Gets or sets the data collection for the graph
            </summary>        
        </member>
        <member name="T:Netron.GraphLib.IO.NML.PortType">
            <summary>
            The NML template corresponding to the XML of a connector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.PortType.mItems">
            <summary>
            the data items
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.PortType.mName">
            <summary>
            the name of the port
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.PortType.mDescription">
            <summary>
            the description of the port
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.PortType.Desc">
            <summary>
            Gets or sets the description of the port
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.PortType.Items">
            <summary>
            Gets or sets the data items
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.PortType.Name">
            <summary>
            Gets or sets the name of the port
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.PropertiesHashtable">
            <summary>
            STC of string-value pairs, helpful in keeping a collection of properties with their value
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.PropertiesHashtable.mKeys">
            <summary>
            keeps the collection of keys
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.PropertiesHashtable.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.PropertiesHashtable.Add(System.String,System.Object)">
            <summary>
            Adds a property-value pair
            </summary>
            <param name="key"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.NML.PropertiesHashtable.Remove(System.String)">
            <summary>
            Removes an elements based on a key
            </summary>
            <param name="key">a (string) key</param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.PropertiesHashtable.Keys">
            <summary>
            Gets the keys of the hashtable and
            allows to loop over the keys without
            boxing/unboxing.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.PropertiesHashtable.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.NML.ShapeType">
            <summary>
            XML wrapper for a shape object
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ShapeType.mData">
            <summary>
            data collection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ShapeType.mDescription">
            <summary>
            the description
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ShapeType.mUID">
            <summary>
            the mUID
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.NML.ShapeType.mInstanceKey">
            <summary>
            the unique key to the shape to be instantiated
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ShapeType.InstanceKey">
            <summary>
            Gets or sets the key to use when instantiating/deserializing the node again
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ShapeType.Desc">
            <summary>
            Gets or sets the description
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ShapeType.Data">
            <summary>
            Gets or sets the data collection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.NML.ShapeType.UID">
            <summary>
            Gets or sets the mUID
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.Reporting.AssemblyReporter">
            <summary>
            Summary description for AssemblyReporter.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.AssemblyReporter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.Reporting.BinaryReport">
            <summary>
            Encapsulates the reporting of a single diagram saved to binary file
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Reporting.BinaryReport.mSize">
            <summary>
            the size of the file
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Reporting.BinaryReport.mPath">
            <summary>
            the path to tht file
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Reporting.BinaryReport.mThumbnail">
            <summary>
            the thumbnail
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Reporting.BinaryReport.mDescription">
            <summary>
            the description of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Reporting.BinaryReport.mAuthor">
            <summary>
            the author of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Reporting.BinaryReport.mCreationDate">
            <summary>
            the creation date of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Reporting.BinaryReport.mSubject">
            <summary>
            the subject of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.IO.Reporting.BinaryReport.mTitle">
            <summary>
            the title of the graph
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.BinaryReport.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReport.FileSize">
            <summary>
            Gets or sets the file-size
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReport.Path">
            <summary>
            Gets or sets the path to the file
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReport.Thumbnail">
            <summary>
            Gets or sets the thumbnail
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReport.Description">
            <summary>
            Gets or sets the description of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReport.Author">
            <summary>
            Gets or sets the author of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReport.CreationDate">
            <summary>
            Gets or sets the creation date of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReport.Subject">
            <summary>
            Gets or sets the subject of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReport.Title">
            <summary>
            Gets or sets the title of the graph
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.Reporting.BinaryReportCollection">
            <summary>
            STC of BinaryReport objects
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.BinaryReportCollection.Add(Netron.GraphLib.IO.Reporting.BinaryReport)">
            <summary>
            Adds a report to the collection
            </summary>
            <param name="report"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.BinaryReportCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Netron.GraphLib.IO.Reporting.BinaryReportCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.Reporting.BinaryReporter">
            <summary>
            Summary description for BinaryReporter.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.BinaryReporter.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="path">the path to either a binary saved diagram or a directory, in the latter case the report will contain a
            collection of reports</param>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.BinaryReporter.Report">
            <summary>
            Returns a BinaryReport or a collection of BinaryReport objects depending on whether the given path is a file or a directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.BinaryReporter.GetReports">
            <summary>
            Assuming the given path is a directory this method will return a 
            collection of BinaryReports of the binary diagram in the directory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.BinaryReporter.GetReport(System.String)">
            <summary>
            Returns a BinaryReport of the diagram save in the given path/file
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="E:Netron.GraphLib.IO.Reporting.BinaryReporter.OnReport">
            <summary>
            Occurs when a report is found and added to the collection
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.Reporting.ShapeReporter">
            <summary>
            Summary description for ShapeReporter.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.Reporting.ShapeReporter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Netron.GraphLib.IO.SVG.SVGSerializer">
            <summary>
            Exports a diagram to SVG
            </summary>
        </member>
        <member name="M:Netron.GraphLib.IO.SVG.SVGSerializer.#ctor(Netron.GraphLib.UI.GraphControl)">
            <summary>
            Defautl constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.SVG.SVGSerializer.Serialize(System.Xml.XmlWriter,Netron.GraphLib.GraphAbstract)">
            <summary>
            Serializes the given graph abstract to XML with the given XmlWriter
            </summary>
            <param name="writer"></param>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.IO.SVG.SVGSerializer.SaveAs(System.String,Netron.GraphLib.UI.GraphControl)">
            <summary>
            Saves the diagram to SVG format
            </summary>
            <param name="fileName">the file-path</param>
            <param name="site">the graph-control instance to be serialized</param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Selector">
            <summary>
            When you drag with the mouse this class produces the dashed line rectangle to visualize the elements you select.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Selector.#ctor(System.Drawing.PointF,Netron.GraphLib.UI.GraphControl)">
            <summary>
            Constructor of the class
            </summary>
            <param name="p"></param>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.Selector.Update(System.Drawing.PointF)">
            <summary>
            Update the selector to reflect the current position of the mouse
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.Selector.Paint(System.Windows.Forms.Control)">
            <summary>
            Paint the selector on the canvas
            </summary>
            <param name="c"></param>
            
        </member>
        <member name="M:Netron.GraphLib.Selector.Invalidate">
            <summary>
            Invalidates the selector
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Selector.Rectangle">
            <summary>
            The rectangle corresponding to the selector marquee
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ShapeTracker">
            <summary>
            The tracker implements the possibility to resize the plex boxes, it shows the grips with which you can drag and resize the rectangle.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.#ctor(System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Class Constructor 
            </summary>
            <param name="r"></param>
            <param name="s"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.#ctor(Netron.GraphLib.Interfaces.IGraphSite,System.Drawing.RectangleF,System.Boolean,System.Boolean,Netron.GraphLib.Shape)">
            <summary>
            Constructs a new ShapeTracker for the given IGraphSite, based on the given rectangle and whether it's resizable.
            </summary>
            <param name="site"></param>
            <param name="r"></param>
            <param name="resizable"></param>
            <param name="square">whether the tracker should constraint the shape to square proportions</param>
            <param name="shape">the shape to which this tracker applies</param>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.ChangeLocation(System.Drawing.PointF)">
            <summary>
            Changes the location of the tracker
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.Hit(System.Drawing.PointF)">
            <summary>
            Returns an integer point if hit with a given floating-point point
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.Cursor(System.Drawing.PointF)">
            <summary>
            Returns the cursor for the given point
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.Start(System.Drawing.PointF,System.Drawing.Point)">
            <summary>
            Starting point of the tracker
            </summary>
            <param name="p">floating-point point</param>
            <param name="h">handle (point)</param>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.End">
            <summary>
            Ends the tracking action
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.Move(System.Drawing.PointF,System.Drawing.Size,System.Boolean,System.Int32)">
            <summary>
            Moves the tracker to the specified location, normally attached to the mouse move.
            </summary>
            <param name="p">a point, should be the cursor location</param>
            <param name="snap"></param>
            <param name="snapSize"></param>
            <param name="maxSize">the maximum size allowed for tracking to the right. Should be the size of the canvas.</param>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.Paint(System.Drawing.Graphics)">
            <summary>
            this draws the actual little rectangles of the grips
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.ShapeTracker.Grip(System.Drawing.Point)">
            <summary>
            Given a point p this returns a grip or adornment on which the user
            can pull to enlarge the shape
            </summary>
            <param name="p">=integer point</param>
            <returns>A floating-point rectangle</returns>
        </member>
        <member name="T:Netron.GraphLib.EntityBundle">
            <summary>
            Collects shapes and connections into a logical unit,
            this is a subset of the GraphAbstract. The EntityBundle can be saved into the favorites
            or duplicated or serialized to file for later use.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.EntityBundle.#ctor(Netron.GraphLib.UI.GraphControl)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.EntityBundle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.EntityBundle.Detach">
            <summary>
            Detaches the bundle from the site
            </summary>
        </member>
        <member name="M:Netron.GraphLib.EntityBundle.Copy">
            <summary>
            Returns a copy of the bundle
            (generates new UID and so on).
            Note however that the connections are not connected to the connectors but contain a reference to the UID.
            The regeneration of UID's has to be performed after the unwrapping on the Site.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.EntityBundle.DeselectAll">
            <summary>
            Deselects all entities from this bundle
            </summary>
        </member>
        <member name="M:Netron.GraphLib.EntityBundle.SelectAll">
            <summary>
            Selects all entities from this bundle
            </summary>
        </member>
        <member name="M:Netron.GraphLib.EntityBundle.TakeScreenshot(System.Drawing.Graphics)">
            <summary>
            Takes a screenshot of the bundle and stores it in the BundleImage <see cref="P:Netron.GraphLib.EntityBundle.BundleImage"/> property
            </summary>
            <param name="g">The Graphics object to draw the entities on</param>
        </member>
        <member name="M:Netron.GraphLib.EntityBundle.TakeScreenshotWithBackground(System.Drawing.Graphics,System.Drawing.Color)">
            <summary>
            Takes a screenshot of the bundle and stores it in the BundleImage <see cref="P:Netron.GraphLib.EntityBundle.BundleImage"/> property.
            The background is filled with the given color.
            </summary>
            <param name="g">The Graphics object to draw the entities on</param>
            <param name="backgroundColor">the color to fill the background with</param>
        </member>
        <member name="M:Netron.GraphLib.EntityBundle.Offset(System.Int32,System.Int32)">
            <summary>
            Offsets the bundle
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Netron.GraphLib.EntityBundle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable implementation
            </summary>
            <param name="info">the serialization info</param>
            <param name="context">the streaming context</param>		
        </member>
        <member name="P:Netron.GraphLib.EntityBundle.Rectangle">
            <summary>
            Gets the embracing rectangle of the bundle
            </summary>
        </member>
        <member name="P:Netron.GraphLib.EntityBundle.Name">
            <summary>
            Gets or sets the name of the bundle
            </summary>
        </member>
        <member name="P:Netron.GraphLib.EntityBundle.Description">
            <summary>
            Gets or sets the description of the bundle
            </summary>
        </member>
        <member name="P:Netron.GraphLib.EntityBundle.Site">
            <summary>
            Gets or sets the site of the bundle
            </summary>
        </member>
        <member name="P:Netron.GraphLib.EntityBundle.BundleImage">
            <summary>
            Gets or sets the screenshot of the bundle
            </summary>
        </member>
        <member name="P:Netron.GraphLib.EntityBundle.Connections">
            <summary>
            Gets the connections contained in this bundle
            </summary>
        </member>
        <member name="P:Netron.GraphLib.EntityBundle.Shapes">
            <summary>
            Gets the shapes contained in this bundle
            </summary>
        </member>
        <member name="T:Netron.GraphLib.UI.CategoryMenuItem">
            <mSummary>
            Represent a menu item collecting shape types belonging to the same category
            </mSummary>
        </member>
        <member name="M:Netron.GraphLib.UI.CategoryMenuItem.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.CategoryMenuItem.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.CategoryMenuItem.#ctor(System.String,System.EventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="text"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.CategoryMenuItem.CloneMenu">
            <summary>
            Overrides the default base implementation since the cloning
            does not return the correct GraphMenuItem type but simply
            a MenuItem, which gives a 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.UI.FilenameUIEditor">
            <summary>
            UITypeEditor to edit file names
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.FilenameUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the edit style
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.FilenameUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits tyhe value
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.UI.GraphControl">
            <summary>
            The graph control is the container of shape objects and is an owner-drawn control
            </summary>
            <remarks>
            <br>the control is listening for hits, on hitting an object the HitEntity returns the entity hit and passes it to the Hover object in the HitHover handler.</br>
            <br>the biggest part of the code is taken by the handlers for the mouse events</br>
            </remarks>
            	
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.ctrlKey">
            <summary>
             This constant is used when checking for the CTRL key during drop operations.
             This makes the code more readable for future maintenance.
             </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mLocked">
            <summary>
            whether the diagram is locked
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mToolTip">
            <summary>
            the tooltip control
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.selectionBrush">
            <summary>
            the brush used by the selector
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mGradientMode">
            <summary>
            the linear gradient mode
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mAllowDeleteShape">
            <summary>
            allow delete boolean
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mAllowMoveShape">
            <summary>
            allow move shape boolean
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mAllowAddShape">
            <summary>
            allow add shape boolean
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mAllowAddConnection">
            <summary>
            allow add connection boolean
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.freeArrows">
            <summary>
            free, non graph dependen arrow, useful for debugging purposes
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.insertionPoint">
            <summary>
            insertion point of the context-menu
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.format">
            <summary>
            custom format (see bug problem in the copy/paste code
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.bag">
            <summary>
            the property bag of the canvas
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mContextMenu">
            <summary>
            the mContextMenu of the canvas
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.CtrlShift">
            <summary>
            shortcut
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.AltKey">
            <summary>
            shortcut
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.connectionPath">
            <summary>
            the default path style of the new connections
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.connectionEnd">
            <summary>
            the default connection end
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mGridSize">
            <summary>
            the grid size
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mShowGrid">
            <summary>
            show grid?
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mSnap">
            <summary>
            whether to mSnap to the grid
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.lastAddedShapeKey">
            <summary>
            keeps the last shape key for easy addition via ALT+click
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mEnableContextMenu">
            <summary>
            whether to enable the context menu
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mRestrictToCanvas">
            <summary>
            whether to restrict the shapes to the canvas size
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mLibraries">
            <summary>
            the shape mLibraries
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.layoutFactory">
            <summary>
            a reference to the layout factory which organizes the layout algo's
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mEnableLayout">
            <summary>
            is the layout active?
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.ts">
            <summary>
            The thread pointer which will run on the layout thread.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.thLayout">
            <summary>
            The thread for laying out the graph.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mAutomataPulse">
            <summary>
            The timer interval in milliseconds that updates the state of the automata in the plex.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mBackgroundType">
            <summary>
            the kinda background the canvas has
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mGradientBottom">
            <summary>
            the color of the lower gradient part
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mGradientTop">
            <summary>
            the color of the upper gradient part
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mBackgroundImagePath">
            <summary>
            the image path for the background
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mBackgroundColor">
            <summary>
            the background color
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.currentZoomFactor">
            <summary>
            the currentZoomFactor factor
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mFileName">
            <summary>
            The current filename of the diagram, if any
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.extract">
            <summary>
            the extract contains the data of the plex and its structure
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.shapeObject">
            <summary>
            volatile object not connected to extract structure, used for the current added or selected shape
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.connection">
            <summary>
            volatile connection, used to manipulate the current connection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.Hover">
            <summary>
            Entity with current mouse focus. Is automatically set by the HitHover and HitEntity handlers
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.selector">
            <summary>
            for tracking selection state, represents the dashed selection rectangle.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mDoTrack">
            <summary>
            indicates track mode, i.e. moving a shape around
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.transmissionTimer">
            <summary>
            the timer controlling the refresh rate of the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.automataController">
            <summary>
            the automata controller widget
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mIsAutomataRunning">
            <summary>
            whether the data-flow is running
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphControl.mShowAutomataController">
            <summary>
            whether the controller is visible
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.RemoveEdge(System.Guid)">
            <summary>
            Removes the edge from the diagram with the given UID
            </summary>
            <param name="uid"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.#ctor">
            <summary>
            Class constructor
            </summary>
            <remarks>
            Notice the double buffering directives at the end
            </remarks>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.ZoomPoint(System.Drawing.Point)">
            <summary>
            Zooms given point.
            </summary>
            <param name="originalPt">Point to currentZoomFactor</param>
            <returns>zoomed point.</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.UnzoomPoint(System.Drawing.Point)">
            <summary>
            Unzooms given point.
            </summary>
            <param name="originalPt">Point to unzoom</param>
            <returns>Unzoomed point.</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.ZoomPoint(System.Drawing.PointF)">
            <summary>
            Zooms a given point.
            </summary>
            <param name="originalPt">Point to currentZoomFactor</param>
            <returns>Zoomed point.</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.UnzoomPoint(System.Drawing.PointF)">
            <summary>
            Unzooms a given point.
            </summary>
            <param name="originalPt">Point to unzoom.</param>
            <returns>Unzoomed point.</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.ZoomRectangle(System.Drawing.RectangleF)">
            <summary>
            Zooms a given rectangle.
            </summary>
            <param name="originalRect">Rectangle to currentZoomFactor.</param>
            <returns>Zoomed rectangle.</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.UnzoomRectangle(System.Drawing.RectangleF)">
            <summary>
            Unzooms given rectangle.
            </summary>
            <param name="originalRect">Rectangle to unzoom.</param>
            <returns>Unzoomed rectangle.</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.ZoomRectangle(System.Drawing.Rectangle)">
            <summary>
            Zooms given rectangle.
            </summary>
            <param name="originalRect">Rectangle to currentZoomFactor</param>
            <returns>Zoomed rectangle</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.UnzoomRectangle(System.Drawing.Rectangle)">
            <summary>
            Unzooms given rectangle. 
            </summary>
            <param name="originalRect">Rectangle to unzoom</param>
            <returns>Unzoomed rectangle.</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.InvalidateRectangle(System.Drawing.Rectangle)">
            <summary>
            Let the site invalidate the rectangle
            </summary>
            <param name="rect">invalid rectangle</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.HitEntity(System.Drawing.PointF)">
            <summary>
            This is the event handler for the mousemove and returns an entity when it hits anything from the plex.
            The Mouse coordinates are converted to a RectangleF of zero size and passed to all the entities in the plex.
            If one of the plex finds that the cursor is contained in itself then it recturns itself.
            This place can be used to give feedback through statusbar messages or any other info coming from the entities.
            
            </summary>
            <param name="p">Coordinates, normally this should be the mouse coordinates.</param>
            <returns>An entity; shape, connector, connection.</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.HitHover(System.Drawing.PointF)">
            <summary>
            Pretty much the same as the HitEntity handler, it simply checks if the HitEntity returns something different than the previous hit.
            If it is something different than the previous hit it sets the internal 'Hover' entity to the new one.
            </summary>
            <param name="p">In normal circumstances this should be the mouse coordinates.</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.Deselect">
            <summary>
            Collects all modules of the astract and sets the IsSelected to False
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.SetCursor(System.Drawing.PointF)">
            <summary>
            For the given point returns a cursor
            </summary>
            <param name="p">Floating-point point, usually linked to the cursor</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse down event
            </summary>
            <param name="e">Events arguments</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.AddConnectionPoint(System.Object,System.EventArgs)">
            <summary>
            Adds a connection point to a connection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.RemoveConnectionPoint(System.Object,System.EventArgs)">
            <summary>
            Removes a connection point
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse up event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            overrides the Mouse move event handler
            <br>if the mousemove is a dragging action on a tracker grip it will enlarge the tracker</br>
            
            </summary>
            <param name="e">
            Mouse event arguments
            </param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.SetToolTip(System.String)">
            <summary>
            Sets the tooltip of the control
            </summary>
            <param name="tip"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.PaintArrow(System.Drawing.Graphics,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Paints an arrow
            </summary>
            <param name="endPoint">the tip of the arrow</param>
            <param name="filled">whether to draw a filled arrow</param>
            <param name="g">the graphics objects</param>
            <param name="lineColor">the color</param>
            <param name="showLabel">whether to show the label</param>
            <param name="startPoint">the end-point of the arrow</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrides the paint method and calls the paint method of the extract structure which will loop 
            through all the shapes, connections and connectors.
            Two other objects need attention here. One is an eventual shape just created and hanging at the cursor.
            The other is a connection fixed on a shape on one end but hanging at the cursor on the other (not attached yet).
            These two are painted separately.
            </summary>
            <param name="e">Paint event arguments.</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the canvas, could have been done in the paint handler as well.
            This is not clear in the .Net doc.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.PaintBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the background of the canvas
            </summary>
            <param name="r">the rectangle to paint on</param>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.LoadSelfLibrary">
            <summary>
            Loads the assembly of the graphcontrol into the library collection since on deserialization connections are being
            deserialized and looked up in the library collection
            </summary>
            <remarks>
            Deserialization related
            </remarks>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Handles the dragdrop on the canvas
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Handles the drag-enter event of the control
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.GetShapeSummary(Netron.GraphLib.Shape)">
            <summary>
            Returns the Summary of the given shape object
            </summary>
            <param name="sh"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnNewGraph(System.Object,System.EventArgs)">
            <summary>
            Handles the NewGraph menu item
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnSelectAll(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectAll menu item
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnCut(System.Object,System.EventArgs)">
            <summary>
            Handles the Cut menu item
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnCopy(System.Object,System.EventArgs)">
            <summary>
            Handles the Copy menu item
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnPaste(System.Object,System.EventArgs)">
            <summary>
            Handles the Paste menu item
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnProperties(System.Object,System.EventArgs)">
            <summary>
            Handles the Properties menu item
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnDelete(System.Object,System.EventArgs)">
            <summary>
            Common gate for a delete action on the plex. Deletes the selected shapes and goes via the history (of course).
            </summary>		
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.AddToContextMenu(Netron.GraphLib.Configuration.ShapeSummary)">
            <summary>
            Adds the given shape summary to the context menu
            <seealso cref="T:Netron.GraphLib.UI.CategoryMenuItem"/>
            </summary>
            <param name="summary"></param>
            
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnContextMenuItem(System.Object,System.EventArgs)">
            <summary>
            Fires when a contextmenu item is selected
            </summary>
            <param name="sender">a MenuItem</param>
            <param name="e">an EventArgs</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.AddBaseMenu">
            <summary>
            Adds the base-menu to the context-menu
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.ResetToBaseMenu">
            <summary>
            Resets the menu to its base state.
            <see cref="M:Netron.GraphLib.UI.GraphControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/>
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.PrintCanvas(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Prints the canvas
            </summary>
            <param name="Sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.PrintCanvas(System.Object,System.Drawing.Printing.PrintPageEventArgs,System.Int32@,System.Int32@)">
            <summary>
            Multi-page print of the canvas
            Thanks to Fabio...
            </summary>
            <param name="Sender"></param>
            <param name="e"></param>
            <param name="n"></param>
            <param name="m"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.StartAutomata">
            <summary>
            This starts the heart beat of the automata data flow, it simply calls the start method of the timer.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.StopAutomata">
            <summary>
            This stops the heart beat of the automata data flow.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.ResetAutomata">
            <summary>
            Resets the automata
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnTransmissionTimer(System.Object,System.EventArgs)">
            <summary>
            This is the event handler when the transmission timer fires. Handles the transmissions of data over the connections.
            
            </summary>
            <param name="Sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.StartLayout">
            <summary>
            Starts the graph layout thread using a previously defined algorithm
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.StopLayout">
            <summary>
            Stops the graph layout thread 
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.SaveNMLAs(System.String)">
            <summary>
            Saves the graph to NML
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.GetNML">
            <summary>
            Fetches the NML of the current diagram
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OpenNML(System.String)">
            <summary>
            Opens a NML file
            </summary>
            <param name="fileName">the name of the file from which to open the NML</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OpenNMLFragment(System.String)">
            <summary>
            Loads the given NML-string in the control		
            </summary>
            <param name="nml"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            GDI32 imported function not available in the framework,
            used here to save a picture of the turtle world.
            Can also be used, in general, to take a snapshot of a (actually) any) control.
            </summary>
            <param name="hdcDest"></param>
            <param name="nXDest"></param>
            <param name="nYDest"></param>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <param name="hdcSrc"></param>
            <param name="nXSrc"></param>
            <param name="nYSrc"></param>
            <param name="dwRop"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.SaveImage2(System.String)">
            <summary>
            Saves an image of the canvas in JPG format.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.SaveImage(System.String,System.Boolean)">
             <summary>
              Saves an image of the canvas in JPG format.
             </summary>
             <param name="path"></param>
            <param name="drawBackground">wether the background should be painted as well</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.GetControlThumbnail1(System.Int32,System.Int32)">
            <summary>
            Returns a thumbnail of the diagram
            </summary>
            <param name="height">the height of the thumbnail</param>
            <param name="width">the width of the thumbnail</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.GetControlThumbnail(System.Int32,System.Int32)">
            <summary>
            Returns a thumbnail of the diagram
            </summary>
            <param name="height">the height of the thumbnail</param>
            <param name="width">the width of the thumbnail</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.GetDiagramImage">
            <summary>
            Returns a bitmap of the whole diagram.
            
            </summary>
            <remarks>The image returns also the non-visible portion of the canvas if the scrollbars are visible</remarks>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.ThumbnailCallback">
            <summary>
            Require callback method by the thumbnail method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.LoadLibraries">
            <summary>
            Loads the libraries from the application configuration
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.AddLibrary(System.String)">
            <summary>
            Adds a shape library to the collection
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.ImportEntities(System.String)">
            <summary>
            Imports/reflects the entities contained in the assembly, if any
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.SaveAs(System.String)">
            <summary>
            Saves the plex to the selected path using the wonderful .Net serialization.
            </summary>
            <remarks><br>Would it be possible to save all this to a database?</br>
            <br>You can also use the XML or SOAP serialization but note that only public methods and properties will be serialized, not sure the plex will be allright on deserialization.</br></remarks>
            <param name="mFileName">The path to which to save the data.</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.Open(System.String)">
            <summary>
            Opens the specified file and deserializes it. In essence the extract is being filled with the saved data and the next OnPaint event simply paints its contents.
            </summary>
            <param name="mFileName"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OutputInfo(System.Object)">
            <summary>
            Outputs info to the outside world where it can be displayed or
            logged. The info gets the 'None' information level.
            </summary>
            <param name="obj">Any data</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OutputInfo(System.Object,Netron.GraphLib.OutputInfoLevels)">
            <summary>
            Outputs info to the outside world where it can be displayed or 
            logged with the specified level.
            </summary>
            <param name="obj">Any data</param>
            <param name="level">The informative level</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OutputInfo(System.Object,System.String,Netron.GraphLib.OutputInfoLevels)">
            <summary>
            Outputs info to the outside world where it can be displayed or 
            logged with the specified level.
            </summary>
            <param name="obj">Any data</param>
            <param name="level">The informative level</param>
            <param name="category">the category of the information</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.RaiseShowProperties(Netron.GraphLib.PropertyBag)">
            <summary>
            Raises the ShowProps event
            </summary>
            <param name="props"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.RaiseShowProperties(Netron.GraphLib.PropertyBag[])">
            <summary>
            Raises the ShowProps event
            </summary>
            <param name="props">array of propertybags</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.RaiseShowProperties(System.Object[])">
            <summary>
            Raises the ShowProps event
            </summary>
            <param name="props">array of propertybags</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.RaiseOnShapeAdded(Netron.GraphLib.Shape)">
            <summary>
            Raises the OnShapeAdded event
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.RaiseOnShowPropertiesDialogRequest">
            <summary>
            Raises the OnShowPropertiesDialogRequest event
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.RaiseOnShowGraphLayers">
            <summary>
            Raises the OnShowGraphLayers event
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.RaiseOnConnectionAdded(Netron.GraphLib.Connection,System.Boolean)">
            <summary>
            Raises the OnConnectionAdded event
            </summary>
            <param name="con"></param>
            <param name="manual">true is the addition was done via the user interface,
            false if created programmatically</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.RaiseOnClear">
            <summary>
            Raises the OnClear event
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.RaiseOnSavingDiagram(System.String)">
            <summary>
            Raises the OnSavingDiagram event
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.RaiseOnDiagramSaved(System.String)">
            <summary>
            Raises the OnDiagramSaved event
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.RaiseOnOpeningDiagram(System.String)">
            <summary>
            Raises the OnOpeningDiagram event
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.RaiseOnDiagramOpened(System.String)">
            <summary>
            Raises the OnDiagramOpened event
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Handles the key press
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            This is the general event handler for key events
            </summary>
            <param name="e">A KeyEventArgs object</param>
            <param name="sender">the sender of the event</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Moves the scrollbar up-down.
            You can override this and let it zoom instead
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.AddShape(Netron.GraphLib.Shape,System.Drawing.PointF)">
            <summary>
            Adds a given shape to the canvas at the specified position
            </summary>
            <param name="sob">a shape object</param>
            <param name="position">the position at twhich the shape has to be placed</param>
            <returns>the added shape object or null if unsuccessful</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.AddShape(System.String,System.Drawing.PointF)">
            <summary>
            Adds a shape to the canvas
            </summary>
            <param name="key">the instantion identifier</param>
            <param name="position">the location where the shape will be created</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.RemoveShape(Netron.GraphLib.Shape)">
            <summary>
            Removes a shape from the graph
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.AddShape(Netron.GraphLib.Shape)">
            <summary>
            Adds a given shape to the canvas at the mouse position
            </summary>
            <param name="sob"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.AddBasicShape">
            <summary>
            Adds a 'basic' shape to the canvas
            <seealso cref="T:Netron.GraphLib.BasicShapeType"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.AddBasicShape(System.String)">
            <summary>
            Adds a 'basic' shape to the canvas
            <seealso cref="T:Netron.GraphLib.BasicShapeType"/>
            </summary>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.AddBasicShape(System.String,System.Drawing.PointF)">
            <summary>
            Adds a 'basic' shape to the canvas
            <seealso cref="T:Netron.GraphLib.BasicShapeType"/>
            </summary>
            <param name="label"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.AddBasicShape(System.Drawing.PointF)">
            <summary>
            Adds a 'basic' shape to the canvas
            <seealso cref="T:Netron.GraphLib.BasicShapeType"/>
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.AddBasicShape(Netron.GraphLib.BasicShapeType,System.String,System.Drawing.PointF)">
            <summary>
            Adds a 'basic' shape to the canvas
            <seealso cref="T:Netron.GraphLib.BasicShapeType"/>
            </summary>
            <param name="shapeType"></param>
            <param name="nodeLabel"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.ConnectionExists(Netron.GraphLib.Connector,Netron.GraphLib.Connector)">
            <summary>
            Returns whether for the given two connectors there is a connection
            </summary>
            <param name="b"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.GetEntity(System.String)">
            <summary>
            Returns the entity with the specified UID
            </summary>
            <param name="UID">The unique identitfier specifying the entity</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.Cut">
             <summary>
             Implements the copy function to the clipboard
             </summary>
             <remarks>
             This doesn't work, bug in Clipboard object, hopefully fixed in Net v2 
            </remarks>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.Copy">
            <summary>
            Copies whatever is selected on the canvas to the clipboard
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.CopyAsImage">
            <summary>
            Copies the selected elements of the diagram as an image to the clipboard
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.Paste">
            <summary>
            Pastes data on the canvas. Possible formats are an EntityBundle, an image,...
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.Delete">
            <summary>
            Deletes the selected elements from the canvas
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.AddConnection(Netron.GraphLib.Connector,Netron.GraphLib.Connector)">
            <summary>
            There is only one way to specify a connection: by specifying the two connectors
            Unless you have a single connector per shape which allows you to use the shape GUID
            Going via node label is possible as well if you filter out doubles on (automatic) creation.
            </summary>
            <param name="From"></param>
            <param name="To"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.SelectAll(System.Boolean)">
            <summary>
            Selects all shapes and things of the plex.
            </summary>
            <param name="includeAll">true if connectors and connection should be selected as well, otherwise only the shapes will be selected.</param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.GetShapeInstance(System.String)">
            <summary>
            Gets a shape instance with the given key
            </summary>
            <param name="shapeKey"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.GetSummary(Netron.GraphLib.Entity)">
            <summary>
            Returns a Summary object of the given entity
            </summary>
            <param name="e">An Entity object</param>
            <returns>A Summary object which encapsulates the essentials of the instance as far as reflection is concerned</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.BundleSelection">
            <summary>
            Collects the selected entities into an EntityBundle. The returned bundle is a copy of the entities and can be used to serialize part of the diagram.
            <seealso cref="M:Netron.GraphLib.UI.GraphControl.GroupSelection"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.GroupSelection">
            <summary>
            Groups the selected entities into an EntityBundle. The returned bundle is detached from the diagram and hence not visible after this method.
            This method is useful to cut and use a part of the diagram somewhere else.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.AddBundle(Netron.GraphLib.EntityBundle)">
            <summary>
            Inserts an EntityBundle in the diagram
            </summary>
            <param name="bundle"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.GetShapeByLabel(System.String)">
            <summary>
            Returns the first shape with the given text
            </summary>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.NewDiagram(System.Boolean)">
            <summary>
            Creates a blank new canvas
            
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overrides the method to invalidate the control when the user scrolls the diagram
            
            </summary>
            <param name="m"></param>
            <remarks>Not possible with the available overridable methods of .Net as far as I know</remarks>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.GetLayerAttributes">
            <summary>
            Returns the list of layers as an Attribute-array.
            Used by the propertygrid to display a list of layers, the mechanism is rater involved.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.GetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Determines which properties are accessible via the property grid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.SetPropertyBagValue(System.Object,Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Sets the values passed by the property grid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphControl.AddProperties">
            <summary>
            Adds the propertygrid visible properties to the bag
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.GraphControl.OnShowProperties">
            <summary>
            raised when a properties request is issued
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.GraphControl.OnInfo">
            <summary>
            The OnInfo allows to output general purpose info from the canvas to the form. 
            Added in the context of the automata applications where scripting of nodes is available and where it is useful
            to give the user feedback about the pulsating automata.
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.GraphControl.OnConnectionAdded">
            <summary>
            raised when a new connection is added
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.GraphControl.OnShapeAdded">
            <summary>
            occurse when a new shape is added to the control
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.GraphControl.OnShapeRemoved">
            <summary>
            Occurs when a shape is removed
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.GraphControl.OnClear">
            <summary>
            Occurs when the canvas is cleared
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.GraphControl.OnContextMenu">
            <summary>
            Occurs when the context-menu is shown
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.GraphControl.OnStartAutomata">
            <summary>
            Occurs when the automata is started
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.GraphControl.OnStopAutomata">
            <summary>
            Occurs when the automata is stopped
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.GraphControl.OnDataTransmission">
            <summary>
            Occurs on trasnmitting data (related to the dataflow/automaton)
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.GraphControl.OnShowPropertiesDialogRequest">
            <summary>
            Occurs on requesting to show the graph properties
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.GraphControl.OnShowGraphLayers">
            <summary>
            Occurs on requesting to show the graph layers
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.GraphControl.OnSavingDiagram">
            <summary>
            Occurs before saving a diagram
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.GraphControl.OnDiagramSaved">
            <summary>
            Occurs after saving a diagram
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.GraphControl.OnOpeningDiagram">
            <summary>
            Occurs on opening a file
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.GraphControl.OnDiagramOpened">
            <summary>
            Occurs when a file was opened
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.ShowAutomataController">
            <summary>
            Gets or sets whether the internal dataflow is runnning
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.IsAutomataRunning">
            <summary>
            Gets or sets whether the internal dataflow is runnning
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.EnableToolTip">
            <summary>
            Gets or sets whether the tooltip is active.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.Locked">
            <summary>
            Gets or sets whether the whole diagram is locked
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.ToolTip">
            <summary>
            Gets or sets the tooltip
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.AllowMoveShape">
            <summary>
            Gets or sets whether shapes can be moved in the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.AllowDeleteShape">
            <summary>
            Gets or sets whether shapes can be deleted from the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.AllowAddShape">
            <summary>
            Gets or sets whether shapes can be added to the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.AllowAddConnection">
            <summary>
            Gets or sets whether connections can be added to the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.DefaultConnectionEnd">
            <summary>
            Gets or sets the default path style or shape of the newly created connections
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.DefaultConnectionPath">
            <summary>
            Gets or sets the default path style or shape of the newly created connections
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.ShowGrid">
            <summary>
            Gets or sets whether the grid is visible.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.GridSize">
            <summary>
            Gets or sets the grid size.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.Snap">
            <summary>
            Gets or sets whether the graph elements mSnap to the grid
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.EnableContextMenu">
            <summary>
            Gets or sets whether the context menu is visible
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.BackgroundColor">
            <summary>
            Gets or sets the background color of the canvas.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.GradientTop">
            <summary>
            Gets or sets the upper color of the gradient.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.GradientBottom">
            <summary>
            Gets or sets the lower color of the gradient.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.AutomataPulse">
            <summary>
            Gets or sets time interval of the automata update pulse.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.RestrictToCanvas">
            <summary>
            Gets or sets wether the graph shapes should be kept inside the canvas frame or allowed to move/resize outside it.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.BackgroundType">
            <summary>
            Gets or sets the kind of background the canvas has.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.EnableLayout">
            <summary>
            Gets or sets whether layout algorithms can be applied
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.GraphLayoutAlgorithm">
            <summary>
            Gets or sets the graph layout algorithm to be used.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.BackgroundImagePath">
            <summary>
            Gets or sets the background image path
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.GradientMode">
            <summary>
            Gets or sets the gradient mode
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.Layers">
            <summary>
            Gets the shape layers
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.DoTrack">
            <summary>
            Gets or sets whether tracking is on
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.Libraries">
            <summary>
            Gets the collection of loaded libraries
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.SelectedShapes">
            <summary>
            Gets the collection of selected shapes
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.Abstract">
            <summary>
            Gets the abstract
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.Properties">
            <summary>
            Gets the propertybag of the control.
            </summary>
            <remarks>This is part of the mechanism related to the propertygrid</remarks>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.Graphics">
            <summary>
            Gets the graphics object of this control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.Center">
            <summary>
            Gets the center position of the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.BackgroundImage">
            <summary>
            Gets or sets the background image of the canvas
            </summary>
            <remarks>You need to set the background-type to make the image visible <seealso cref="P:Netron.GraphLib.UI.GraphControl.BackgroundType"/></remarks>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.ShapeColor">
            <summary>
            Sets the color of the shape
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.LabelFontSize">
            <summary>
            Sets the font to be used when drawing shape-text
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.TextColor">
            <summary>
            Sets the color of the shape-text
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.ShowLabel">
            <summary>
            Sets whether the label is visible
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.LineStyle">
            <summary>
            Sets the default dash-style of new connections
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.LineWeight">
            <summary>
            Sets the default line weight of new connections
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.LineEnd">
            <summary>
            Sets the default line-end of new connections
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.LineColor">
            <summary>
            Sets the default line-color
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.Zoom">
            <summary>
            Gets or sets the currentZoomFactor factor
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.BackColor">
            <summary>
            Gets or sets the backcolor (redirected to the background color)
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.FileName">
            <summary>
            Gets or sets the file name of the current graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.EdgeCount">
            <summary>
            Gets the number of edges or connections in the graph.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.NodesCount">
            <summary>
            Gets the number of nodes on the canvas
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.Shapes">
            <summary>
            Gets the arraylist of nodes in the graph.
            </summary>
            
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControl.Connections">
            <summary>
            Gets the arraylist of edges in the graph. A more elegant way to implement this would be to keep the collection up to date
            while adding or deleting connections but it would mean a doubling since the connections are already in seperate arraylists all the time, hence this method.
            </summary>
            
        </member>
        <member name="T:Netron.GraphLib.UI.GraphControlDesigner">
            <summary>
            Control designer of the graph-control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphControlDesigner.Verbs">
            <summary>
            Gets the verbs of the control
            </summary>
        </member>
        <member name="T:Netron.GraphLib.UI.GraphMenuItem">
            <mSummary>
            
            </mSummary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphMenuItem.mHandler">
            <summary>
            pointer the the Click handler
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphMenuItem.mSummary">
            <summary>
            the summary
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphMenuItem.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphMenuItem.#ctor(Netron.GraphLib.Configuration.ShapeSummary)">
            <summary>
            Constructor
            </summary>
            <param name="summary"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphMenuItem.#ctor(Netron.GraphLib.Configuration.ShapeSummary,System.EventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="mSummary"></param>
            <param name="handler"></param>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphMenuItem.Summary">
            <summary>
            Gets or sets the shape summary
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphMenuItem.ClickHandler">
            <summary>
            Gets the Click event handler
            <seealso cref="M:Netron.GraphLib.UI.CategoryMenuItem.CloneMenu"/>
            </summary>
        </member>
        <member name="T:Netron.GraphLib.UI.GraphProps">
            <summary>
            Summary description for GraphProps.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphProps.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphProps.description">
            <summary>
            the description textbox
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphProps.DescriptionLabel">
            <summary>
            the description label
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphProps.creationdate">
            <summary>
            the creation date label
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphProps.CreationDateLabel">
            <summary>
            the creation date value
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphProps.subject">
            <summary>
            the subject textbox
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphProps.SubjectLabel">
            <summary>
            the subject label
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphProps.title">
            <summary>
            the title textbox
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphProps.TitleLabel">
            <summary>
            the title lable
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphProps.author">
            <summary>
            the author textbox
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphProps.AuthorLabel">
            <summary>
            the author label
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphProps.info">
            <summary>
            the GraphInformation this control interfaces
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphProps.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphProps.#ctor(Netron.GraphLib.GraphInformation)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphProps.LoadData(Netron.GraphLib.GraphInformation)">
            <summary>
            Loads the data of the graph information into the textboxes
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphProps.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphProps.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphProps.Commit">
            <summary>
            Commits the changes to the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphProps.GraphInformation">
            <summary>
            Gets or sets the graph information displayed by this control
            </summary>
        </member>
        <member name="T:Netron.GraphLib.UI.GraphShapesView">
            <summary>
            UserControl listing in two ways the available/loaded shapes.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphShapesView.libraries">
            <summary>
            the shape libraries
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphShapesView.DescriptionLabel">
            <summary>
            the description label
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphShapesView.ShowListView">
            <summary>
            show-listview button
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphShapesView.ShowTree">
            <summary>
            show-tree button
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphShapesView.MainPanel">
            <summary>
            the main panel
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphShapesView.treeView">
            <summary>
            the treeview
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphShapesView.tabControl">
            <summary>
            the tabcontrol
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphShapesView.imageList">
            <summary>
            the images
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphShapesView.panelDescription">
            <summary>
            the description panel
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphShapesView.lowerSplitter">
            <summary>
            the lower splitter
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphShapesView.panelButtons">
            <summary>
            the buttons panel
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphShapesView.mView">
            <summary>
            current mView of the list
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.AddLibrary(System.String)">
            <summary>
            Adds a shape library to the collection
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.ImportEntities(System.String)">
            <summary>
            Loads the shapes from the assembly at the given path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.GetDefaultThumbnail">
            <summary>
            Returns the default thumbnail
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.GetTab(System.String)">
            <summary>
            Gets a the tabpage with the given name or a new one if it does not yet exist
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.GetTreeNode(System.String)">
            <summary>
            Gets the (first) node with the given text
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.AddDummyShapes(Netron.GraphLib.UI.ShapesTab)">
            <summary>
            Adds a dummy (for testing purposes)
            </summary>
            <param name="tab"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.BeginInit">
            <summary>
            ISupportInitialize.BeginInit method
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.EndInit">
            <summary>
            ISupportInitialize.EndInit method
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.OnLoad(System.EventArgs)">
            <summary>
            OnLoad actions
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.LoadLibraries">
            <summary>
            Loads the shapes from the libraries specified in the application configuration file.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.ShowDescription(System.Object,Netron.GraphLib.InfoEventArgs)">
            <summary>
            Show the shape description in the lower part of the control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.ShowListView_Click(System.Object,System.EventArgs)">
            <summary>
            Shows the listview
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.ShowTree_Click(System.Object,System.EventArgs)">
            <summary>
            Changes the view to the tree-mode
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.ShowAs(Netron.GraphLib.ShapesView)">
            <summary>
            Switches the view between tree and icons
            </summary>
            <param name="mView"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.TreeMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphShapesView.TreeMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseMove handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphShapesView.View">
            <summary>
            Gets or sets the representation of the listview
            </summary>
        </member>
        <member name="T:Netron.GraphLib.UI.GraphTreeNode">
            <mSummary>
            Custom TreeNode implementation for the shapes-viewer
            </mSummary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphTreeNode.mSummary">
            <summary>
            the summary
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphTreeNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphTreeNode.#ctor(Netron.GraphLib.Configuration.ShapeSummary)">
            <summary>
            Constructor
            </summary>
            <param name="mSummary"></param>
        </member>
        <member name="P:Netron.GraphLib.UI.GraphTreeNode.Summary">
            <summary>
            Gets or sets the shape summary
            </summary>
        </member>
        <member name="T:Netron.GraphLib.GraphLayer">
            <summary>
            Allows to have shapes in different layers. 
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayer.mOpacity">
            <summary>
            opacity in percent
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayer.mLayerColor">
            <summary>
            the layer's color
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayer.mUseColor">
            <summary>
            whether the shapes on this layer should use the layer's color
            instead of their own
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayer.mName">
            <summary>
            the name of the layer
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayer.mLocked">
            <summary>
            whether the layer is locked
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayer.mNumber">
            <summary>
            the layer's number in the collection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.GraphLayer.mVisible">
            <summary>
            whether the layer is visible
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphLayer.#ctor">
            <summary>
            Default, empty constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphLayer.#ctor(System.String)">
            <summary>
            Constructor specifying the name of the layer
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphLayer.#ctor(System.String,System.Drawing.Color)">
            <summary>
            Constructor specifying the name and the color of the layer
            </summary>
            <param name="name"></param>
            <param name="color"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphLayer.#ctor(System.Drawing.Color)">
            <summary>
            Constructor specifying the color of the layer
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphLayer.#ctor(System.Int32)">
            <summary>
            Constructor specifying the opacity of the layer
            </summary>
            <param name="opacity"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphLayer.#ctor(System.Drawing.Color,System.Int32)">
            <summary>
            Constructor specifying the color and the opacity of the layer
            </summary>
            <param name="color"></param>
            <param name="opacity"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphLayer.#ctor(System.String,System.Drawing.Color,System.Int32)">
            <summary>
            Constructor specifying the name, the color and the opacity of the layer
            </summary>
            <param name="name"></param>
            <param name="color"></param>
            <param name="opacity"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphLayer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphLayer.SetNumber(System.Int32)">
            <summary>
            This method is not supposed to be used, the collection will set this number
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphLayer.ToString">
            <summary>
            Overrides the default behavior to return the name of the layer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.GraphLayer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Netron.GraphLib.GraphLayer.Visible">
            <summary>
            Gets or sets whether the layer is visible
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphLayer.Number">
            <summary>
            Gets the number of the layer in the collection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphLayer.Name">
            <summary>
            Gets or sets the name of the layer
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphLayer.UseColor">
            <summary>
            Gets or sets whether the shapes on this layer should use the layer's color
            instead of their own
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphLayer.Opacity">
            <summary>
            Gets or sets the opacity of the layer
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphLayer.LayerColor">
            <summary>
            Gets or sets the color of the alyer
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphLayer.Locked">
            <summary>
            Gets or sets whether the layer is locked
            </summary>
        </member>
        <member name="T:Netron.GraphLib.GraphLayerCollection">
            <summary>
            STC of graphlayers
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphLayerCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphLayerCollection.OnClearComplete">
            <summary>
            Overrides the base method to set all shapes in the default layer
            </summary>
        </member>
        <member name="M:Netron.GraphLib.GraphLayerCollection.Add(Netron.GraphLib.GraphLayer)">
            <summary>
            Adds a layer to the collection
            </summary>
            <param name="layer"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.GraphLayerCollection.Remove(Netron.GraphLib.GraphLayer)">
            <summary>
            Removes a graph-layer from the collection
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Netron.GraphLib.GraphLayerCollection.AddRange(Netron.GraphLib.GraphLayerCollection)">
            <summary>
            Adds a collection range to this collection
            </summary>
            <param name="col"></param>
        </member>
        <member name="E:Netron.GraphLib.GraphLayerCollection.ClearComplete">
            <summary>
            Occurs when the collection has been emptied
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphLayerCollection.Item(System.Int32)">
            <summary>
            Return a layer on the basis of its index in the collection.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.GraphLayerCollection.Item(System.String)">
            <summary>
            Returns a layer item on the basis of a layer name
            </summary>
        </member>
        <member name="T:Netron.GraphLib.UI.GraphLayerManager">
            <summary>
            This UserControl allows you to manage the graph-layers
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GraphLayerManager.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphLayerManager.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphLayerManager.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphLayerManager.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphLayerManager.LoadLayers(Netron.GraphLib.UI.GraphControl)">
            <summary>
            Loads the layers in the listview 
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphLayerManager.AddCheckbox(System.Int32,System.Int32,Netron.GraphLib.UI.LayerListItem,System.String,System.Boolean)">
            <summary>
            Adds a checkbox in the listview
            </summary>
            <param name="col"></param>
            <param name="row"></param>
            <param name="item"></param>
            <param name="name"></param>
            <param name="isChecked"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphLayerManager.GetLayers">
            <summary>
            Returns the collection of layers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphLayerManager.UpdateLayerData">
            <summary>
            Commits the layer-changes to the graphcontrol
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GraphLayerManager.RemoveButton_Click(System.Object,System.EventArgs)">
            <summary>
            Removes a layer from the list.
            Note that this is only committed when the UpdateLayerData  method is called.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Netron.GraphLib.UI.CheckBoxTag">
            <summary>
            Utility class to put in the Tag-member of the listview checkboxes,
            it references the listitem and the property being edit of the layer.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.CheckBoxTag.mItem">
            <summary>
            a list item
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.CheckBoxTag.mName">
            <summary>
            the name
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.CheckBoxTag.#ctor(Netron.GraphLib.UI.LayerListItem,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="item"></param>
            <param name="name"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.CheckBoxTag.Equals(System.Object)">
            <summary>
            Overrides the base method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.CheckBoxTag.GetHashCode">
            <summary>
            Overrides the base method 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.UI.CheckBoxTag.Name">
            <summary>
            Gets or sets the name
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.CheckBoxTag.Item">
            <summary>
            Gets or sets the item
            </summary>
        </member>
        <member name="T:Netron.GraphLib.UI.LayerEdit">
             <summary>
            Part of the layers editor, allows you (re)name a layer
             </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.LayerEdit.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.LayerEdit.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.LayerEdit.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.LayerEdit.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.LayerEdit.LayerName">
            <summary>
            Gets or sets the name of layer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.UI.LayerListItem">
            <summary>
            Mirrors the GraphLayer class and encapsulates it in a ListViewItem
            to be displayed in a ListView. When the Commit() method is called the
            values are transmitted to the referenced layer.
            The constructor gets a layer as a ref-parameter.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.LayerListItem.mLayer">
            <summary>
            the referenced layer
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.LayerListItem.mOpacity">
            <summary>
            opacity in percent
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.LayerListItem.mLayerColor">
            <summary>
            the layer's color
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.LayerListItem.mUseColor">
            <summary>
            whether the shapes on this layer should use the layer's color
            instead of their own
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.LayerListItem.mName">
            <summary>
            the name of the layer
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.LayerListItem.mLocked">
            <summary>
            whether the layer is locked
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.LayerListItem.mNumber">
            <summary>
            the layer's number in the collection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.LayerListItem.mVisible">
            <summary>
            whether the layer is visible
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.LayerListItem.#ctor(Netron.GraphLib.GraphLayer@)">
            <summary>
            Default ctor
            </summary>
            <param name="layer">ref-ed GraphLayer from the graphcontrol</param>
        </member>
        <member name="M:Netron.GraphLib.UI.LayerListItem.Commit">
            <summary>
            Commits the changes to the referenced layer of the graphcontrol
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.LayerListItem.Layer">
            <summary>
            Gets the layer corresponding to this listview item
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.LayerListItem.Floating">
            <summary>
            Gets or sets whether the item is already part of the graph-control
            If true, the item has to be added to the layers collection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.LayerListItem.Visible">
            <summary>
            Gets or sets whether the layer is visible
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.LayerListItem.Number">
            <summary>
            Gets the number of the layer in the collection
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.LayerListItem.Name">
            <summary>
            Gets or sets the name of the layer
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.LayerListItem.UseColor">
            <summary>
            Gets or sets whether the shapes on this layer should use the layer's color
            instead of their own
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.LayerListItem.Opacity">
            <summary>
            Gets or sets the opacity of the layer
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.LayerListItem.LayerColor">
            <summary>
            Gets or sets the color of the alyer
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.LayerListItem.Locked">
            <summary>
            Gets or sets whether the layer is locked
            </summary>
        </member>
        <member name="T:Netron.GraphLib.LayerUITypeEditor">
            <summary>
            Allows to select a layer from the propertygrid, the collection depends on the layers added to the control
            </summary>
        </member>
        <member name="M:Netron.GraphLib.LayerUITypeEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.LayerUITypeEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Overrides the methods to set that iconic reps are supported
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.LayerUITypeEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Paints the selected value; iconic representation
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Netron.GraphLib.LayerUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns the basic UITypeEditorEditStyle.DropDown style
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.LayerUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Implements the dropdown style for selecting layers
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.UI.ListViewEx">
            <summary>
            Taken from Codeproject
            http://www.codeproject.com/cs/miscctrl/ListViewEmbeddedControls.asp
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.ListViewEx.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.ListViewEx.GetColumnOrder">
            <summary>
            Retrieve the order in which columns appear
            </summary>
            <returns>Current display order of column indices</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.ListViewEx.GetSubItemBounds(System.Windows.Forms.ListViewItem,System.Int32)">
            <summary>
            Retrieve the bounds of a ListViewSubItem
            </summary>
            <param name="Item">The Item containing the SubItem</param>
            <param name="SubItem">Index of the SubItem</param>
            <returns>Subitem's bounds</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.ListViewEx.AddEmbeddedControl(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Add a control to the ListView
            </summary>
            <param name="c">Control to be added</param>
            <param name="col">Index of column</param>
            <param name="row">Index of row</param>
        </member>
        <member name="M:Netron.GraphLib.UI.ListViewEx.AddEmbeddedControl(System.Windows.Forms.Control,System.Int32,System.Int32,System.Windows.Forms.DockStyle)">
            <summary>
            Add a control to the ListView
            </summary>
            <param name="c">Control to be added</param>
            <param name="col">Index of column</param>
            <param name="row">Index of row</param>
            <param name="dock">Location and resize behavior of embedded control</param>
        </member>
        <member name="M:Netron.GraphLib.UI.ListViewEx.RemoveEmbeddedControl(System.Windows.Forms.Control)">
            <summary>
            Remove a control from the ListView
            </summary>
            <param name="c">Control to be removed</param>
        </member>
        <member name="M:Netron.GraphLib.UI.ListViewEx.GetEmbeddedControl(System.Int32,System.Int32)">
            <summary>
            Retrieve the control embedded at a given location
            </summary>
            <param name="col">Index of Column</param>
            <param name="row">Index of Row</param>
            <returns>Control found at given location or null if none assigned.</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.ListViewEx.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Hooks on the message pump
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.ListViewEx._embeddedControl_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the click-event of the embedded control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Netron.GraphLib.UI.ListViewEx.View">
            <summary>
            Gets or sets the view or representation of the listview
            </summary>
        </member>
        <member name="T:Netron.GraphLib.UI.ListViewEx.EmbeddedControl">
            <summary>
            Structure to hold an embedded control's info
            </summary>
        </member>
        <member name="T:Netron.GraphLib.PointFTypeConverter">
            <summary>
            Custom type-converted for PointF objects
            </summary>
        </member>
        <member name="T:Netron.GraphLib.UI.ShapesTab">
            <summary>
            A tabpage implementation for the ShapeViewer
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.ShapesTab.listView">
            <summary>
            the inner listview
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.ShapesTab.summaries">
            <summary>
            the collection of shape summaries
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.ShapesTab.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.ShapesTab.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="tabText"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.ShapesTab.AddItem(System.String)">
            <summary>
            Adds an item to the list
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.ShapesTab.AddItem(Netron.GraphLib.Configuration.ShapeSummary)">
            <summary>
            Adds an item to the list
            </summary>
            <param name="summary"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.ShapesTab.AddItem(Netron.GraphLib.Configuration.ShapeSummary,System.Int32)">
            <summary>
            Adds an item to the list
            </summary>
            <param name="summary"></param>
            <param name="imageIndex"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.ShapesTab.AddDummy">
            <summary>
            Only useful for debugging
            </summary>
        </member>
        <member name="E:Netron.GraphLib.UI.ShapesTab.ShowDescription">
            <summary>
            Occurs when te description is shown
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.ShapesTab.View">
            <summary>
            Gets or sets the view or the representation of the shapes
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.ShapesTab.LargeImageList">
            <summary>
            the image-list of large images
            </summary>
        </member>
        <member name="T:Netron.GraphLib.UI.ShapesTabItem">
            <mSummary>
            ListViewItem in the shapes-viewer
            </mSummary>
        </member>
        <member name="M:Netron.GraphLib.UI.ShapesTabItem.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.ShapesTabItem.#ctor(Netron.GraphLib.Configuration.ShapeSummary,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="mSummary"></param>
            <param name="imageIndex"></param>
        </member>
        <member name="F:Netron.GraphLib.UI.ShapesTabItem.mSummary">
            <summary>
            the summary
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.ShapesTabItem.Summary">
            <summary>
            Gets or sets the ShapeSummary
            </summary>
        </member>
        <member name="T:Netron.GraphLib.UI.Stamper">
            <summary>
            Summary description for NetronOverview.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Starts dragging of the drawing bounding rectangle
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Perform dragging on mouse move if enabled
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Ends dragging of drawings bounding rectangle.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Event handler called on a key is hold down.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Performs painting
            </summary>
            <param name="e">Paint-Event arguments</param>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.timer1_Tick(System.Object,System.EventArgs)">
            <summary>
            Timer invalidates the overview frequently to update its content
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.InvalidateRectangle(System.Drawing.Rectangle)">
            <summary>
            Let the site invalidate the rectangle
            </summary>
            <param name="rect">invalid rectangle</param>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.ZoomPoint(System.Drawing.Point)">
            <summary>
            Zooms given point.
            </summary>
            <param name="originalPt">Point to zoom</param>
            <returns>zoomed point.</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.UnzoomPoint(System.Drawing.Point)">
            <summary>
            Unzooms given point.
            </summary>
            <param name="originalPt">Point to unzoom</param>
            <returns>Unzoomed point.</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.ZoomRectangle(System.Drawing.Rectangle)">
            <summary>
            Zooms given rectangle.
            </summary>
            <param name="originalRect">Rectangle to zoom</param>
            <returns>Zoomed rectangle</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.UnzoomRectangle(System.Drawing.Rectangle)">
            <summary>
            Unzooms given rectangle. 
            </summary>
            <param name="originalRect">Rectangle to unzoom</param>
            <returns>Unzoomed rectangle.</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.ZoomPoint(System.Drawing.PointF)">
            <summary>
            Zooms a given point.
            </summary>
            <param name="originalPt">Point to zoom</param>
            <returns>Zoomed point.</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.UnzoomPoint(System.Drawing.PointF)">
            <summary>
            Unzooms a given point.
            </summary>
            <param name="originalPt">Point to unzoom.</param>
            <returns>Unzoomed point.</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.ZoomRectangle(System.Drawing.RectangleF)">
            <summary>
            Zooms a given rectangle.
            </summary>
            <param name="originalRect">Rectangle to zoom.</param>
            <returns>Zoomed rectangle.</returns>
        </member>
        <member name="M:Netron.GraphLib.UI.Stamper.UnzoomRectangle(System.Drawing.RectangleF)">
            <summary>
            Unzooms given rectangle.
            </summary>
            <param name="originalRect">Rectangle to unzoom.</param>
            <returns>Unzoomed rectangle.</returns>
        </member>
        <member name="P:Netron.GraphLib.UI.Stamper.GraphControl">
            <summary>
            Gets or sets the panel a Overview control belongs to.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.Stamper.Zoom">
            <summary>
            Gets or sets the zoom factor to be used for overview drawing. 
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.Stamper.ScrollPosition">
            <summary>
            Gets the current scroll position
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.Stamper.Graphics">
            <summary>
            Create a graphics context
            </summary>
        </member>
        <member name="T:Netron.GraphLib.UI.GenericTextEditor">
            <summary>
            Allows text editing, for shape labels in particular
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.GenericTextEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GenericTextEditor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GenericTextEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.GenericTextEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.UI.GenericTextEditor.TextToEdit">
            <summary>
            Gets or sets the text to edit
            </summary>
        </member>
        <member name="T:Netron.GraphLib.UI.TextUIEditor">
            <summary>
            UI type-editor for big (amounts of) text
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.TextUIEditor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.TextUIEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            returns UITypeEditorEditStyle.Modal
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.TextUIEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            The actual editing
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.TextUIEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns false
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.UI.AutomataController">
            <summary>
            Summary description for AutomataController.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.AutomataController.rectangle">
            <summary>
            base rectangle
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.AutomataController.site">
            <summary>
            the site to which the widget belongs
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.AutomataController.stopImage">
            <summary>
            the stop image
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.AutomataController.startImage">
            <summary>
            the start image
            </summary>
        </member>
        <member name="F:Netron.GraphLib.UI.AutomataController.refreshImage">
            <summary>
            the refresh image
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.AutomataController.#ctor(Netron.GraphLib.UI.GraphControl)">
            <summary>
            Default constructor
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:Netron.GraphLib.UI.AutomataController.GetCursor(System.Drawing.PointF)">
            <summary>
            Returns a cursor in function of the mouse location above this widget
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.AutomataController.Hit(System.Drawing.RectangleF)">
            <summary>
            Returns whether this widget is hit by the mouse on the given location
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.AutomataController.Invalidate">
            <summary>
            Invalidates the widget
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.AutomataController.OnMouseDown(System.Drawing.PointF)">
            <summary>
            Handles the mouse down event
            </summary>
            <param name="p"></param>
        </member>
        <member name="T:Netron.GraphLib.Utils.ADTConverter">
            <summary>
            Automata Data Type Converter
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Utils.ADTConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.AbstractContainer">
            <summary>
            Abstract base class for the other classes
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.ComparableObject">
            <summary>
            Abstract base class implementing the IComparable interface
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.CompareTo(System.Object)">
            <summary>
            Abstract IComparable.CompareTo method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.Compare(System.Object)">
            <summary>
            Comparison method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.Equals(System.Object)">
            <summary>
            Equals method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.GetHashCode">
            <summary>
            Returns the hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.op_Equality(Netron.GraphLib.Analysis.ComparableObject,System.Object)">
            <summary>
            == operator overloading
            </summary>
            <param name="c"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.op_Inequality(Netron.GraphLib.Analysis.ComparableObject,System.Object)">
            <summary>
            != operator overloading
            </summary>
            <param name="c"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.op_LessThan(Netron.GraphLib.Analysis.ComparableObject,System.Object)">
            <summary>
            smaller-than operator overloading
            </summary>
            <param name="c"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.op_GreaterThan(Netron.GraphLib.Analysis.ComparableObject,System.Object)">
            <summary>
            bigger-than operator overloading
            </summary>
            <param name="c"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.op_LessThanOrEqual(Netron.GraphLib.Analysis.ComparableObject,System.Object)">
            <summary>
            smaller-than-or-equal operator overloading
            </summary>
            <param name="c"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.op_GreaterThanOrEqual(Netron.GraphLib.Analysis.ComparableObject,System.Object)">
            <summary>
            bigger-than-or-equal operator overloading
            </summary>
            <param name="c"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.op_Implicit(System.Char)~Netron.GraphLib.Analysis.ComparableObject">
            <summary>
            ComparableObject with char operator overloading
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.op_Explicit(Netron.GraphLib.Analysis.ComparableObject)~System.Char">
            <summary>
            char operator overloading
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.op_Implicit(System.Int32)~Netron.GraphLib.Analysis.ComparableObject">
            <summary>
            ComparableObject with int operator overloading
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.op_Explicit(Netron.GraphLib.Analysis.ComparableObject)~System.Int32">
            <summary>
            int operator overloading
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.op_Implicit(System.Double)~Netron.GraphLib.Analysis.ComparableObject">
            <summary>
            ComparableObject with double operator overloading
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.op_Explicit(Netron.GraphLib.Analysis.ComparableObject)~System.Double">
            <summary>
            double operator overloading
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.op_Implicit(System.String)~Netron.GraphLib.Analysis.ComparableObject">
            <summary>
            ComparableObject with string operator overloading
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableObject.op_Explicit(Netron.GraphLib.Analysis.ComparableObject)~System.String">
            <summary>
            string operator overloading
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Analysis.IContainer">
            <summary>
            Container interface; the base interface for all data structures
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IContainer.Purge">
            <summary>
            Empties the container
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IContainer.Accept(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            Accepts an IVisitor
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IContainer.Count">
            <summary>
            Gets the amount of elements
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IContainer.IsEmpty">
            <summary>
            Gets whether the container is empty
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IContainer.IsFull">
            <summary>
            Gets whether the container is full
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractContainer.mCount">
            <summary>
            the numer of elements in this container
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractContainer.Accept(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            Accepts a visitor to the container
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractContainer.ToString">
            <summary>
            Overrides the ToString method to return more useful information
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractContainer.GetHashCode">
            <summary>
            Overrides the GetHashCode to return a better hascode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractContainer.Purge">
            <summary>
            Empties the container
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractContainer.GetEnumerator">
            <summary>
            Returns an enumerator to loop over the container elements
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractContainer.Count">
            <summary>
            Gets the number of elements in the container
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractContainer.IsEmpty">
            <summary>
            Gets whether the container is empty
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractContainer.IsFull">
            <summary>
            Gets whether the container is full
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.AbstractGraph">
            <summary>
            Abstract base class for the diverse graph implementations
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.IGraph">
            <summary>
            Interface of a graph object
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IGraph.AddVertex(System.Int32)">
            <summary>
            Adds a vertex to the vertices
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IGraph.AddVertex(System.Int32,System.Object)">
            <summary>
            Adds a weighted vertex to the vertices
            </summary>
            <param name="v"></param>
            <param name="weight"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IGraph.GetVertex(System.Int32)">
            <summary>
            Gets a vertex from this graph
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IGraph.AddConnection(System.Int32,System.Int32)">
            <summary>
            Adds an edge to this graph
            </summary>
            <param name="v"></param>
            <param name="w"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IGraph.AddConnection(System.Int32,System.Int32,System.Object)">
            <summary>
            Adds a weighted edge to this graph
            </summary>
            <param name="v"></param>
            <param name="w"></param>
            <param name="weight"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IGraph.GetEdge(System.Int32,System.Int32)">
            <summary>
            Gets an edge from the edges
            </summary>
            <param name="v"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IGraph.IsEdge(System.Int32,System.Int32)">
            <summary>
            Given two vertices, returns an edge (if any)
            </summary>
            <param name="v"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IGraph.DepthFirstTraversal(Netron.GraphLib.Analysis.IPrePostVisitor,System.Int32)">
            <summary>
            This methods accepts two arguments--a IPrePostVisitor and an integer. The integer specifies the starting vertex for a depth-first traversal of the graph. 
            </summary>
            <param name="visitor"></param>
            <param name="start"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IGraph.BreadthFirstTraversal(Netron.GraphLib.Analysis.IPrePostVisitor,System.Int32)">
            <summary>
            This methods accepts two arguments--a IVisitor and an integer. The integer specifies the starting vertex for a breadth-first traversal of the graph.
            </summary>
            <param name="visitor"></param>
            <param name="start"></param>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IGraph.NumberOfEdges">
            <summary>
            The number of edges this graph has
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IGraph.NumberOfVertices">
            <summary>
            The number of vertices of this graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IGraph.IsDirected">
            <summary>
            Whether this is a directed graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IGraph.IsConnected">
            <summary>
            Whether the graph is connected
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IGraph.IsCyclic">
            <summary>
            Whether the graph is cyclic
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IGraph.Vertices">
            <summary>
            Gets all vertices
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IGraph.Edges">
            <summary>
            Gets all edges
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractGraph.mNumberOfVertices">
            <summary>
            the number of vertices
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractGraph.mNumberOfEdges">
            <summary>
            the number of edges
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractGraph.vertex">
            <summary>
            the vertex collection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractGraph.mIsCyclic">
            <summary>
            whether the graph is cyclic (has cycles)
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.#ctor(System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="size">the size of the graph, i.e. the number of nodes</param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.GetIncidentEdges(System.Int32)">
            <summary>
            Gets an IEnumerable for the incident egdes of the given vertex. 
            These are the edges with their end-point in the given vertex.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.GetEmanatingEdges(System.Int32)">
            <summary>
            Gets the IEnumerable for the emanating edges of the given vertex.
            There are the edges with their starting-point in the given vertex.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.AddConnection(Netron.GraphLib.Analysis.IEdge)">
            <summary>
            Adds an edge to the graph
            </summary>
            <param name="edge">an IEdge object</param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.GetEdge(System.Int32,System.Int32)">
            <summary>
            Returns the edge, if any, with end-point and start-point given by the indeices.
            </summary>
            <param name="v"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.IsEdge(System.Int32,System.Int32)">
            <summary>
            Returns wether there is an edge between the two given vertex numbers.
            </summary>
            <param name="v">a vertex number</param>
            <param name="w">a vertex number</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.AddVertex(Netron.GraphLib.Analysis.IVertex)">
            <summary>
            Adds an  IVertex to the graph
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.AddVertex(System.Int32,System.Object)">
            <summary>
            Adds a weighted vertex to the graph
            </summary>
            <param name="v"></param>
            <param name="mWeight"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.AddVertex(System.Int32)">
            <summary>
            Adds a vertex to the graph
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.AddConnection(System.Int32,System.Int32,System.Object)">
            <summary>
            Adds an edge to the graph
            </summary>
            <param name="v"></param>
            <param name="w"></param>
            <param name="mWeight"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.AddConnection(System.Int32,System.Int32)">
            <summary>
            Adds an edge to the graph
            </summary>
            <param name="v"></param>
            <param name="w"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.DepthFirstTraversal(Netron.GraphLib.Analysis.IPrePostVisitor,System.Int32)">
            <summary>
            Performs a DFT of the graph with the given visitor starting at the given vertex number.
            </summary>
            <param name="visitor">an IVisitor object</param>
            <param name="start">the index of the vertex where the visiting starts</param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.DepthFirstTraversal(Netron.GraphLib.Analysis.IPrePostVisitor,Netron.GraphLib.Analysis.IVertex,System.Boolean[])">
            <summary>
            Implements the DFT algorithm
            </summary>
            <param name="visitor"></param>
            <param name="v"></param>
            <param name="visited"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.BreadthFirstTraversal(Netron.GraphLib.Analysis.IPrePostVisitor,System.Int32)">
            <summary>
            Performs a BFT of the graph with the given visitor and starting at the given vertex number.
            </summary>
            <param name="visitor"></param>
            <param name="start"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.TopologicalOrderTraversal(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            This traversal visits the nodes of a directed graph in the order specified by a topological sort. 
            Informally, a topological sort is a list of the vertices of a (directed) graph in which all the successors
             of any given vertex appear in the sequence after that vertex. 
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.GetVertex(System.Int32)">
            <summary>
            Return the vertex with the given number
            </summary>
            <param name="v">a number inside the range of available vertices</param>
            <returns>an IVertex object</returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.Purge">
            <summary>
            Empties this container
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.Accept(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            Accepts a visitor
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.ToString">
            <summary>
            Overrides the ToString method to print out an overview of the graph
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.GetEnumerator">
            <summary>
            Gets an IEnumerator for this graph
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.Vertices">
            <summary>
            Gets an enumerator for the vertices of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.Edges">
            <summary>
            Gets an enumerator for the edges of the graph
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.IsDirected">
            <summary>
            Gets whether the graph is directed
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.NumberOfVertices">
            <summary>
            Gets the number of vertices
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.NumberOfEdges">
            <summary>
            Gets the number of edges
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.IsConnected">
            <summary>
            Gets whether the graph is connected
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.IsStronglyConnected">
            <summary>
            Gets whether the graph is strongly connected
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.IsCyclic">
            <summary>
            Gets whether the graph is cyclic
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.AbstractGraph.VertexEnumerator">
            <summary>
            Implements the vertex enumeration
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractGraph.VertexEnumerator.graph">
            <summary>
            the underlying graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractGraph.VertexEnumerator.v">
            <summary>
            the current vertex number
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.VertexEnumerator.#ctor(Netron.GraphLib.Analysis.AbstractGraph)">
            <summary>
            Default constructor
            </summary>
            <param name="graph">the AbstractGraph on which the enumerator is based.</param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.VertexEnumerator.MoveNext">
            <summary>
            Moves the internal pointer to the next element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.VertexEnumerator.Reset">
            <summary>
            Resets the internal pointer to the beginning of the series.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.VertexEnumerator.Current">
            <summary>
            Gets the current vertex
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.AbstractGraph.GraphVertex">
            <summary>
            Implements a vertex
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.IVertex">
            <summary>
            Summary description for IVertex.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IVertex.Number">
            <summary>
            The unique number of this vertex
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IVertex.Weight">
            <summary>
            A weight factor this vertex has
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IVertex.IncidentEdges">
            <summary>
            The edges finishing into this vertex
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IVertex.EmanatingEdges">
            <summary>
            The set of edges leaving the vertex
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IVertex.Predecessors">
            <summary>
            The vertices with an arrow towards this vertex
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IVertex.Successors">
            <summary>
            The vertices connected to this one with an arrow leaving this vertex
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractGraph.GraphVertex.graph">
            <summary>
            the AbstractGraph the vertex belongs to
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractGraph.GraphVertex.mNumber">
            <summary>
            the number of the vertex
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractGraph.GraphVertex.mWeight">
            <summary>
            the weight of the vertex
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.GraphVertex.#ctor(Netron.GraphLib.Analysis.AbstractGraph,System.Int32,System.Object)">
            <summary>
            Default constructor
            </summary>
            <param name="graph">a graph object</param>
            <param name="mNumber">the number of the vertex</param>
            <param name="mWeight">the weight of the vertex</param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.GraphVertex.GetHashCode">
            <summary>
            Returns the hashcode for the vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.GraphVertex.ToString">
            <summary>
            Returns info about the vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.GraphVertex.CompareTo(System.Object)">
            <summary>
            Not implemented yet
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.GraphVertex.Number">
            <summary>
            Gets the number of the vertex
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.GraphVertex.Weight">
            <summary>
            Gets the weight of the vertex
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.GraphVertex.IncidentEdges">
            <summary>
            Gets an IEnumerable of the incident edges
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.GraphVertex.EmanatingEdges">
            <summary>
            Gets an IEnumerable of the emanating edges
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.GraphVertex.Predecessors">
            <summary>
            Gets an IEnumerable of the predecessors
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.GraphVertex.Successors">
            <summary>
            Gets an IEnumerable of the successors
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.AbstractGraph.GraphVertex.SuccessorEnumerator">
            <summary>
            Implements the successor enumertion
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.AbstractGraph.GraphEdge">
            <summary>
            Implements the edge/connection
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.IEdge">
            <summary>
            Edge interface
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IEdge.MateOf(Netron.GraphLib.Analysis.IVertex)">
            <summary>
            Returns the head or tail if the given vertex is part this edge
            </summary>
            <param name="vertex"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IEdge.V0">
            <summary>
            The head or from vertex
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IEdge.V1">
            <summary>
            The tail or to vertex
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IEdge.Weight">
            <summary>
            A weight
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IEdge.IsDirected">
            <summary>
            Whether this is a directed edge
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractGraph.GraphEdge.graph">
            <summary>
            the graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractGraph.GraphEdge.startIndex">
            <summary>
            the start index
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractGraph.GraphEdge.endIndex">
            <summary>
            the end index
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractGraph.GraphEdge.mWeight">
            <summary>
            the weight
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.GraphEdge.#ctor(Netron.GraphLib.Analysis.AbstractGraph,System.Int32,System.Int32,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="graph"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="mWeight"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.GraphEdge.MateOf(Netron.GraphLib.Analysis.IVertex)">
            <summary>
            Returns whether the given vertex is the complementary vertex of the edge
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.GraphEdge.GetHashCode">
            <summary>
            Returns the hashcode of the edge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.GraphEdge.ToString">
            <summary>
            Overrides the base method to return the collection of edges
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.GraphEdge.CompareTo(System.Object)">
            <summary>
            Not implemented yet
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.GraphEdge.V0">
            <summary>
            Gets the start-vertex
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.GraphEdge.V1">
            <summary>
            Gets the end-vertex
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.GraphEdge.Weight">
            <summary>
            Gets the weight of the edge
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.GraphEdge.IsDirected">
            <summary>
            Gets whether the edge is directed
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.AbstractVisitor">
            <summary>
            Abstract implementation of the IVisitor interface
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.IVisitor">
            <summary>
            Interface of a visitor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IVisitor.Visit(System.Object)">
            <summary>
            The actual action to perform on visited objects
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IVisitor.IsDone">
            <summary>
            Whether the visiting process is done
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractVisitor.Visit(System.Object)">
            <summary>
            Performs the actual visit to the object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractVisitor.IsDone">
            <summary>
            Gets whether the visiting is done
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.AbstractGraph.CountingVisitor">
            <summary>
            Counting visitor implementation
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractGraph.CountingVisitor.count">
            <summary>
            counter
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.CountingVisitor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractGraph.CountingVisitor.Visit(System.Object)">
            <summary>
            Implements the actual count
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractGraph.CountingVisitor.Count">
            <summary>
            Gets the value of the counter
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.AbstractHashTable">
            <summary>
            Implements an has-table data structure
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.AbstractSearchableContainer">
            <summary>
            Abstract base class of a searchable container
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.ISearchableContainer">
            <summary>
            Searchable container interface
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ISearchableContainer.IsMember(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Returns wether the given object is in the container
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ISearchableContainer.Insert(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Inserts the given object in the container
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ISearchableContainer.Withdraw(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Removes the given object from the container
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ISearchableContainer.Find(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Searches the given object in the container
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractSearchableContainer.IsMember(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Returns whether a given obkect is in the container
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractSearchableContainer.Insert(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Inserts an object in the container
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractSearchableContainer.Withdraw(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Removes an object from the container
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractSearchableContainer.Find(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Searches an object in the container
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Analysis.IHashTable">
            <summary>
            Hashtable interface
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IHashTable.LoadFactor">
            <summary>
            Gets the load-factor of the hashtable
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractHashTable.F(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractHashTable.G(System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractHashTable.H(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractHashTable.Octal(System.Int32)">
            <summary>
            Returns the octal
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractHashTable.Length">
            <summary>
            Gets the length of the hashtable
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractHashTable.LoadFactor">
            <summary>
            Gets the load-factor 
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.AbstractPrePostVisitor">
            <summary>
            Abstract implementation of the IPrePostVisitor interface
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.IPrePostVisitor">
            <summary>
            A visitor with methods PreVisit, PostVisit, and Visit.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IPrePostVisitor.PreVisit(System.Object)">
            <summary>
            The pre-visit method, before the actual Visit method
            </summary>
            <param name="obj">an object implementing the visiting pattern</param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IPrePostVisitor.PostVisit(System.Object)">
            <summary>
            The post-visit method, after the actual Visit method
            </summary>
            <param name="obj">an object implementing the visiting pattern</param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractPrePostVisitor.PreVisit(System.Object)">
            <summary>
            Performs the pre-visit
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractPrePostVisitor.Visit(System.Object)">
            <summary>
            The actual visiting action
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractPrePostVisitor.PostVisit(System.Object)">
            <summary>
            Performs a post-visit
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractPrePostVisitor.IsDone">
            <summary>
            Gets whether the visiting process is done
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.AbstractSet">
            <summary>
            Abstract base class for a set
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractSet.mUniverseSize">
            <summary>
            the size of the set
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractSet.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="mUniverseSize"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractSet.Insert(System.Int32)">
            <summary>
            Inserts an element in the set
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractSet.Withdraw(System.Int32)">
            <summary>
            Removes an element from the set
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractSet.IsMember(System.Int32)">
            <summary>
            Return whether the given int is in the set
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractSet.Insert(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Insert an object in the set
            </summary>
            <param name="obj"></param>
            <remarks>the insert object is cast internally to an int</remarks>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractSet.Withdraw(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Removes an object from the set
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractSet.IsMember(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Returns whether an object is in the set
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractSet.Find(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Searches for the given object in the set
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractSet.UniverseSize">
            <summary>
            Gets the size of the set
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.AbstractTree">
            <summary>
            Abstract base class for a tree implementation
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.ITree">
            <summary>
            Tree interface
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ITree.GetSubtree(System.Int32)">
            <summary>
            Gets the subtree of the i-th node
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ITree.DepthFirstTraversal(Netron.GraphLib.Analysis.IPrePostVisitor)">
            <summary>
            DFT of the tree
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ITree.BreadthFirstTraversal(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            BFT of the tree
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Netron.GraphLib.Analysis.ITree.Key">
            <summary>
            Gets the key of the (sub)tree
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.ITree.IsLeaf">
            <summary>
            Gets whether the tree is a leaf
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.ITree.Degree">
            <summary>
            Gets the degree of the tree
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.ITree.Height">
            <summary>
            Gets the height of the tree
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractTree.DepthFirstTraversal(Netron.GraphLib.Analysis.IPrePostVisitor)">
            <summary>
            Performs a DFT of the tree
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractTree.BreadthFirstTraversal(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            Performs a BFT of the tree
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractTree.Accept(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            Accepts a visiting process with the given visitor
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractTree.GetEnumerator">
            <summary>
            Return an IEnumerator for the tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractTree.GetSubtree(System.Int32)">
            <summary>
            Returns the sub-tree of the i-th node
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractTree.Height">
            <summary>
            Gets the height of the tree, i.e. the number of sub-levels.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractTree.Count">
            <summary>
            Gets the number of elements in the tree
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractTree.Key">
            <summary>
            Abstract property, the implementation needs to return a key object
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractTree.IsLeaf">
            <summary>
            Abstract property, the implementation needs to return if the element is a leaf
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractTree.Degree">
            <summary>
            The degree of a node is the number of subtrees associated with that node
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.AbstractTree.Enumerator">
            <summary>
            Enumerator for the tree
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractTree.Enumerator.tree">
            <summary>
            the underlying ITree
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AbstractTree.Enumerator.stack">
            <summary>
            a stack object to walk through the tree
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractTree.Enumerator.#ctor(Netron.GraphLib.Analysis.ITree)">
            <summary>
            Default constructor
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractTree.Enumerator.MoveNext">
            <summary>
            Moves the internal pointer to the next object in the tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AbstractTree.Enumerator.Reset">
            <summary>
            Resets the internal pointer of the enumerator
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AbstractTree.Enumerator.Current">
            <summary>
            Gets the current object in the enumerator
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.Algorithms">
            <summary>
            Collects diverse algorithms related to graphs and other data structures
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Algorithms.BreadthFirstTraversal(Netron.GraphLib.Analysis.ITree)">
            <summary>
            
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Algorithms.EquivalenceClasses(System.IO.TextReader,System.IO.TextWriter)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Algorithms.DijkstrasAlgorithm(Netron.GraphLib.Analysis.IDigraph,System.Int32)">
            <summary>
            Thanks to Morton Mertner for a fix here
            </summary>
            <param name="g"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Algorithms.FloydsAlgorithm(Netron.GraphLib.Analysis.IDigraph)">
            <summary>
            An algorithm for finding the shortest path between two graph vertices
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Algorithms.PrimsAlgorithm(Netron.GraphLib.Analysis.IGraph,System.Int32)">
            <summary>
            Computes a spanning tree
            </summary>
            <param name="g"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Algorithms.KruskalsAlgorithm(Netron.GraphLib.Analysis.IGraph)">
            <summary>
            Kruskal's algorithm is an algorithm that finds a minimum spanning tree for a connected weighted graph. 
            This means it finds a subset of the edges that forms a tree that includes every vertex, 
            where the total weight of all the edges in the tree is minimized. 
            If the graph is not connected, then it finds a minimum spanning forest (a minimum spanning tree for each connected component). 
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Algorithms.CriticalPathAnalysis(Netron.GraphLib.Analysis.IDigraph)">
            <summary>
            Critical path analysis algorithm
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Algorithms.Calculator(System.IO.TextReader,System.IO.TextWriter)">
            <summary>
            Calculator
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Algorithms.WordCounter(System.IO.TextReader,System.IO.TextWriter)">
            <summary>
            Word counter
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Algorithms.Translate(System.IO.TextReader,System.IO.TextReader,System.IO.TextWriter)">
            <summary>
            Translation
            </summary>
            <param name="dictionary"></param>
            <param name="inputText"></param>
            <param name="outputText"></param>
        </member>
        <member name="T:Netron.GraphLib.Analysis.ComparableInt32">
            <summary>
             IComparable version of the Int32 datatype
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.ComparableValue">
            <summary>
            Abstract base class implementaing the IComparable interface
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.ComparableValue.obj">
            <summary>
            an IComparable object
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableValue.#ctor(System.IComparable)">
            <summary>
            Constructor
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableValue.CompareTo(System.Object)">
            <summary>
            IComparable.CompareTo implementation
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableValue.GetHashCode">
            <summary>
            Gets the hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableValue.ToString">
            <summary>
            ToString overriden base method
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.ComparableValue.Object">
            <summary>
            Gets the actual object
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableInt32.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableInt32.op_Explicit(Netron.GraphLib.Analysis.ComparableInt32)~System.Int32">
            <summary>
            Operator overload
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableInt32.GetHashCode">
            <summary>
            Returns the hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Analysis.AVLTree">
            <summary>
            An AVL tree is a binary search tree with a "balance" condition that ensures that the depth of the tree is O(log n), with n nodes. (AVL, by the way, comes from the initials of the creators of the data type, Adelson-Velskii and Landis.)
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.BinarySearchTree">
            <summary>
            Implementation of a binary search tree
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.BinaryTree">
            <summary>
            Implementation of a binary tree
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.BinaryTree.mKey">
            <summary>
            the key
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.BinaryTree.mLeft">
            <summary>
            the left branch
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.BinaryTree.mRight">
            <summary>
            the right branch
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryTree.#ctor(System.Object,Netron.GraphLib.Analysis.BinaryTree,Netron.GraphLib.Analysis.BinaryTree)">
            <summary>
            Constructor
            </summary>
            <param name="mKey"></param>
            <param name="mLeft"></param>
            <param name="mRight"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryTree.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryTree.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="mKey"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryTree.Purge">
            <summary>
            Empties the tree
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryTree.GetSubtree(System.Int32)">
            <summary>
            Returns a subtree
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryTree.AttachKey(System.Object)">
            <summary>
            Attaches a key
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryTree.DetachKey">
            <summary>
            Detaches a key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryTree.AttachLeft(Netron.GraphLib.Analysis.BinaryTree)">
            <summary>
            Attaches a subtree at the left
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryTree.DetachLeft">
            <summary>
            Detaches the left branch
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryTree.AttachRight(Netron.GraphLib.Analysis.BinaryTree)">
            <summary>
            Attaches a subtree at the right
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryTree.DetachRight">
            <summary>
            Detaches the right branch
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryTree.DepthFirstTraversal(Netron.GraphLib.Analysis.IPrePostVisitor)">
            <summary>
            DFT of the subtree
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryTree.CompareTo(System.Object)">
            <summary>
            IComparable method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.BinaryTree.Left">
            <summary>
            Gets the left branch
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.BinaryTree.Right">
            <summary>
            Gets the right branch
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.BinaryTree.IsLeaf">
            <summary>
            Gets whether the branch is a leaf
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.BinaryTree.Degree">
            <summary>
            Gets the degree of the subtree
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.BinaryTree.IsEmpty">
            <summary>
            Gets whether the key is a null key
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.BinaryTree.Key">
            <summary>
            Gets the key of the subtree
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.ISearchTree">
            <summary>
            Search-tree interface
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.ISearchTree.Min">
            <summary>
            Gets the min
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.ISearchTree.Max">
            <summary>
            Gets the max
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinarySearchTree.IsMember(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Returns whether an object is in the tree
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinarySearchTree.Find(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Searches an object in the tree
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinarySearchTree.Insert(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Inserts an object in the tree
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinarySearchTree.AttachKey(System.Object)">
            <summary>
            Attaches a key
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinarySearchTree.Balance">
            <summary>
            Balances the tree
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinarySearchTree.Withdraw(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Removes an object from the tree
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Netron.GraphLib.Analysis.BinarySearchTree.Min">
            <summary>
            Gets the min-elements
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.BinarySearchTree.Max">
            <summary>
            Gets the max-element
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.BinarySearchTree.Key">
            <summary>
            Gets the key of the tree
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.BinarySearchTree.Left">
            <summary>
            Gets the left branch
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.BinarySearchTree.Right">
            <summary>
            Gets the right branch
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.AVLTree.mHeight">
            <summary>
            the height of the tree
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AVLTree.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AVLTree.AdjustHeight">
            <summary>
            Adjusts the height of the tree
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AVLTree.LLRotation">
            <summary>
            Performs a LL rotation
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AVLTree.RRRotation">
            <summary>
             Performs a RR rotation
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AVLTree.LRRotation">
            <summary>
             Performs a LR rotation
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AVLTree.RLRotation">
            <summary>
             Performs a RL rotation
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AVLTree.Balance">
            <summary>
            Balances the tree
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AVLTree.AttachKey(System.Object)">
            <summary>
            Attaches a new key
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.AVLTree.DetachKey">
            <summary>
            Detaches a key
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AVLTree.Left">
            <summary>
            Gets the left part of the tree
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AVLTree.Right">
            <summary>
            Gets the right part of the tree
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AVLTree.Height">
            <summary>
            Gets the height of the tree
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.AVLTree.BalanceFactor">
            <summary>
            Gets the balance factor of the tree
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.ContainerEmptyException">
            <summary>
            Throwable exception when the container is empty
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.BinaryHeap">
            <summary>
            Implements a binary heap
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.IPriorityQueue">
            <summary>
            Priority queue interface
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IPriorityQueue.Enqueue(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Enqueues an object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IPriorityQueue.DequeueMin">
            <summary>
            Dequeues an object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IPriorityQueue.Min">
            <summary>
            Gets the min
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.BinaryHeap.array">
            <summary>
            internal array of the heap
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryHeap.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryHeap.Purge">
            <summary>
            Empties the container/heap
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryHeap.Enqueue(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Enqueues a new objects on the heap
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryHeap.DequeueMin">
            <summary>
            Dequeue an object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryHeap.Accept(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            Accpets an IVisitor
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryHeap.GetEnumerator">
            <summary>
            Returns an enumerator for the heap
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.BinaryHeap.CompareTo(System.Object)">
            <summary>
            Not implemented yet
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.BinaryHeap.Min">
            <summary>
            
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.BinaryHeap.IsFull">
            <summary>
            Gets whether the container is full
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.ChainedHashTable">
            <summary>
            Implementation of a chained hastable data structure
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.ChainedHashTable.array">
            <summary>
            the inner array
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ChainedHashTable.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ChainedHashTable.Purge">
            <summary>
            Empties the container or hashtable
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ChainedHashTable.Insert(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Inserts an element in the hashtable
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ChainedHashTable.Withdraw(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Removes an elements from the hashtable
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ChainedHashTable.IsMember(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Returns whether the given object is contained in the hashtable
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ChainedHashTable.Find(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Searches the given object in the hashtable
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ChainedHashTable.Accept(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            Accepts an IVisitor
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ChainedHashTable.GetEnumerator">
            <summary>
            Returns an enumerator for the hashtable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ChainedHashTable.CompareTo(System.Object)">
            <summary>
            Not implemented yet
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.ChainedHashTable.Length">
            <summary>
            Gets the length of the chained hashtable
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.ChainedHashTable.Enumerator.hashtable">
            <summary>
            internal hashtable
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.ChainedHashTable.Enumerator.element">
            <summary>
            an element in the table
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.ChainedHashTable.Enumerator.position">
            <summary>
            the current position
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ChainedHashTable.Enumerator.#ctor(Netron.GraphLib.Analysis.ChainedHashTable)">
            <summary>
            Internal constructor
            </summary>
            <param name="hashtable"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ChainedHashTable.Enumerator.MoveNext">
            <summary>
            Moves the pointer to the next element in the enumeration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ChainedHashTable.Enumerator.Reset">
            <summary>
            Resets the enumeration pointer
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.ChainedHashTable.Enumerator.Current">
            <summary>
            Gets the current element in the enumeration
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.ComparableChar">
            <summary>
            IComparable version of the char datatype
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableChar.#ctor(System.Char)">
            <summary>
            Constructor
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableChar.op_Explicit(Netron.GraphLib.Analysis.ComparableChar)~System.Char">
            <summary>
            Operator overloading
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableChar.GetHashCode">
            <summary>
            Returns the hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Analysis.ComparableDouble">
            <summary>
             IComparable version of the double datatype
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableDouble.#ctor(System.Double)">
            <summary>
            constructor
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableDouble.op_Explicit(Netron.GraphLib.Analysis.ComparableDouble)~System.Double">
            <summary>
            Operator overloading
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableDouble.GetHashCode">
            <summary>
            Returns the hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Analysis.ComparableString">
            <summary>
             IComparable version of the string datatype
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.ComparableString.shift">
            <summary>
            shift constant
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.ComparableString.mask">
            <summary>
            mask constant
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableString.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableString.op_Explicit(Netron.GraphLib.Analysis.ComparableString)~System.String">
            <summary>
            Operator overloading
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ComparableString.GetHashCode">
            <summary>
            Returns the hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Analysis.GraphAnalyzer">
            <summary>
            Decorates the abstract of a diagram with the necessary stuff to analyze it with the analysis tools
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.GraphAsMatrix">
            <summary>
            Implementation of a graph data structure as a matrix
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.GraphAsMatrix.matrix">
            <summary>
            the 2x2 matrix of IEdge elements (adjacency matrix)
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.#ctor(System.Int32)">
            <summary>
            Default ctor
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.Purge">
            <summary>
            Empties the graph
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.AddConnection(Netron.GraphLib.Analysis.IEdge)">
            <summary>
            Adds an edge to the graph
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.GetEdge(System.Int32,System.Int32)">
            <summary>
            Gets the IEdge with the given end-points
            </summary>
            <param name="v"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.IsEdge(System.Int32,System.Int32)">
            <summary>
            Returns whether the edge with the given end-points is in the graph
            </summary>
            <param name="v"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.GetEmanatingEdges(System.Int32)">
            <summary>
            Returns an enumerable collection of emanating edges for the given vertex
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.GetIncidentEdges(System.Int32)">
            <summary>
            Returns an enumerable collection of incident edges for the given vertex
            </summary>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.CompareTo(System.Object)">
            <summary>
            Not implemented yet
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.MatrixForm">
            <summary>
            Prints the graph in the traditional matrix form
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.GraphAsMatrix.Edges">
            <summary>
            Gets the enumerable edge collection
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.GraphAsMatrix.EdgeEnumerator">
            <summary>
            Edge enumerator
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.GraphAsMatrix.EdgeEnumerator.graph">
            <summary>
            the inner graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.GraphAsMatrix.EdgeEnumerator.v">
            <summary>
            the start-vertex
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.GraphAsMatrix.EdgeEnumerator.w">
            <summary>
            the end-vertex
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.EdgeEnumerator.#ctor(Netron.GraphLib.Analysis.GraphAsMatrix)">
            <summary>
            Constructor
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.EdgeEnumerator.MoveNext">
            <summary>
            Moves over the edges via the upper half of entries above the diagonal since the graph is symmetric
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.EdgeEnumerator.Reset">
            <summary>
            Resets the enumeration pointer
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.GraphAsMatrix.EdgeEnumerator.Current">
            <summary>
            Gets the current element in the enumeration
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.GraphAsMatrix.EmanatingEdgeEnumerator">
            <summary>
            Emanating edge enumerator
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.GraphAsMatrix.EmanatingEdgeEnumerator.graph">
            <summary>
            the inner graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.GraphAsMatrix.EmanatingEdgeEnumerator.v">
            <summary>
            the start-vertex
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.GraphAsMatrix.EmanatingEdgeEnumerator.w">
            <summary>
            the end-vertex
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.EmanatingEdgeEnumerator.#ctor(Netron.GraphLib.Analysis.GraphAsMatrix,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="graph"></param>
            <param name="v"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.EmanatingEdgeEnumerator.MoveNext">
            <summary>
            Moves the enumeration pointer to the next element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.EmanatingEdgeEnumerator.Reset">
            <summary>
            Resets the enumeration pointer
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.GraphAsMatrix.EmanatingEdgeEnumerator.Current">
            <summary>
             Gets the current element in the enumeration
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.GraphAsMatrix.IncidentEdgeEnumerator">
            <summary>
            Incident edge enumeration
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.GraphAsMatrix.IncidentEdgeEnumerator.graph">
            <summary>
            inner graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.GraphAsMatrix.IncidentEdgeEnumerator.v">
            <summary>
            the start-vertex
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.GraphAsMatrix.IncidentEdgeEnumerator.w">
            <summary>
            the end-vertex
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.IncidentEdgeEnumerator.#ctor(Netron.GraphLib.Analysis.GraphAsMatrix,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="graph"></param>
            <param name="w"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.IncidentEdgeEnumerator.MoveNext">
            <summary>
            Moves the enumeration pointer to the next element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsMatrix.IncidentEdgeEnumerator.Reset">
            <summary>
            Resets the enumeration pointer
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.GraphAsMatrix.IncidentEdgeEnumerator.Current">
            <summary>
             Gets the current element in the enumeration
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.GraphAnalyzer.shapeGluon">
            <summary>
            glues the vertex-index to a shape
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.GraphAnalyzer.connectionGluon">
            <summary>
            glues a edge-index to a connection
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAnalyzer.#ctor(Netron.GraphLib.GraphAbstract,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="extract"></param>
            <param name="discardFixed">whether to discard the ixed shapes in the analysis</param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAnalyzer.GetShape(System.Int32)">
            <summary>
            Returns the Shape object corresponding to the index in the IGraph
            </summary>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAnalyzer.GetConnection(System.Int32,System.Int32)">
            <summary>
            Returns the Connection corresponding to the vw-index in the IGraph
            </summary>
            <param name="v"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Analysis.DigraphAsLists">
            <summary>
            Digraph structure based on a list
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.GraphAsLists">
            <summary>
            Implementation of a graph based on a list structure
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.GraphAsLists.adjacencyList">
            <summary>
            the linked list upon which the structure is based
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsLists.#ctor(System.Int32)">
            <summary>
            The constructor
            </summary>
            <param name="size">the number of vertices</param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsLists.Purge">
            <summary>
            Purges the graph
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsLists.AddConnection(Netron.GraphLib.Analysis.IEdge)">
            <summary>
            Adds an edge to the graph
            </summary>
            <param name="edge"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsLists.GetEdge(System.Int32,System.Int32)">
            <summary>
            Gets the edge between the given vertices
            </summary>
            <param name="v"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsLists.IsEdge(System.Int32,System.Int32)">
            <summary>
            Returns true if there is an edge between the given vertices
            </summary>
            <param name="v"></param>
            <param name="w"></param>
            <returns></returns>
            <remarks>Thanks to Morton Mertner again here</remarks>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsLists.GetIncidentEdges(System.Int32)">
            <summary>
            Gets the incident edges of the given vertex
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsLists.GetEmanatingEdges(System.Int32)">
            <summary>
            Gets the emanating edges of the given vertex
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsLists.CompareTo(System.Object)">
            <summary>
            Implements the IComparable interface
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsLists.ToString">
            <summary>
            Returns the adjacency matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.GraphAsLists.MatrixForm">
            <summary>
            Prints the graph or adjacency matrix to matrix form
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.GraphAsLists.Edges">
            <summary>
            Gets the edges of the graph
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.GraphAsLists.EdgeEnumerator">
            <summary>
            Encapsulates the edge enumerator
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.GraphAsLists.EmanatingEdgeEnumerator">
            <summary>
            Encapsulates the enumerator of emanating edges
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.GraphAsLists.IncidentEdgeEnumerator">
            <summary>
            Encapsulates the enumerator of incident edges
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.IDigraph">
            <summary>
            Interface of a directed graph
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IDigraph.TopologicalOrderTraversal(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            A topological sort is an ordering of the nodes of a directed graph. This traversal visits the nodes of a directed graph in the order specified by a topological sort. 
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IDigraph.IsStronglyConnected">
            <summary>
            Whether the graph is strongly connected
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.DigraphAsLists.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="size">The number of vertices</param>
        </member>
        <member name="T:Netron.GraphLib.Analysis.DigraphAsMatrix">
            <summary>
            Implementation of a digraph as a matrix
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.DigraphAsMatrix.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.DigraphAsMatrix.AddConnection(Netron.GraphLib.Analysis.IEdge)">
            <summary>
            Adds an edge to the graph
            </summary>
            <param name="edge"></param>
        </member>
        <member name="P:Netron.GraphLib.Analysis.DigraphAsMatrix.IsTree">
            <summary>
            Gets whether the graph is a tree
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.DigraphAsMatrix.Edges">
            <summary>
            Gets the enumerable collection of edges
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.DigraphAsMatrix.EdgeEnumerator">
            <summary>
            Edge enumerator
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.DigraphAsMatrix.EdgeEnumerator.graph">
            <summary>
            the inner graph
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.DigraphAsMatrix.EdgeEnumerator.v">
            <summary>
            the start-vertex
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.DigraphAsMatrix.EdgeEnumerator.w">
            <summary>
            the end-vertex
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.DigraphAsMatrix.EdgeEnumerator.#ctor(Netron.GraphLib.Analysis.DigraphAsMatrix)">
            <summary>
            Constructor
            </summary>
            <param name="graph"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.DigraphAsMatrix.EdgeEnumerator.MoveNext">
            <summary>
            Moves over all edges
            <seealso cref="T:Netron.GraphLib.Analysis.GraphAsMatrix"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.DigraphAsMatrix.EdgeEnumerator.Reset">
            <summary>
            Resets the enumeration pointer
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.DigraphAsMatrix.EdgeEnumerator.Current">
            <summary>
            Gets the current element in the enumeration
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.Association">
            <summary>
            An association is an ordered pair of objects. 
            The first element of the pair is called the key ; the second element is the value  associated with the given key. 
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.Association.mKey">
            <summary>
            the key of the association
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.Association.mValue">
            <summary>
            the value of the association
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Association.#ctor(System.IComparable,System.Object)">
            <summary>
            Constructor; creates an association on the basis of a key and a value.
            </summary>
            <param name="mKey">the key of the association</param>
            <param name="mValue">the value of the association</param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Association.#ctor(System.IComparable)">
            <summary>
            Constructor; creates an association with the given key and null value
            </summary>
            <param name="mKey"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Association.CompareTo(System.Object)">
            <summary>
            Compares this association to another one.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Association.ToString">
            <summary>
            Overrides the default ToString to return more
            useful information of this association
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Association.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.Association.Key">
            <summary>
            Gets the key of the association
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.Association.Value">
            <summary>
            Gets the value of the association
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.Bounds">
            <summary>
            Utility class related to interval checks
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Bounds.Check(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if the given integer is in the (closed) interval given.
            Returns null if alright, otherwise throws an IndexOutOfRangeException exception.
            </summary>
            <param name="i">an integer</param>
            <param name="rangeBase">the lower interval value</param>
            <param name="length">the length of the interval, i.e. the uppder interval value is (rangeBase+length-1)</param>
            
        </member>
        <member name="T:Netron.GraphLib.Analysis.Enumerable">
            <summary>
            Decorates an IEnumerator implementation to an IEnumerable implementation
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.Enumerable.enumerator">
            <summary>
            the enumerator of the Enumerable
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Enumerable.#ctor(System.Collections.IEnumerator)">
            <summary>
            Default constructor
            </summary>
            <param name="enumerator"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.Enumerable.GetEnumerator">
            <summary>
            Returns the IEnumerator enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Analysis.IPartition">
            <summary>
            Partition interface
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.ISet">
            <summary>
            Set interface
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ISet.Union(Netron.GraphLib.Analysis.ISet)">
            <summary>
            Return the union of the set with the given one
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ISet.Intersection(Netron.GraphLib.Analysis.ISet)">
            <summary>
            Intersection of the set with the given one
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ISet.Difference(Netron.GraphLib.Analysis.ISet)">
            <summary>
            Difference of the set with the given one
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ISet.Equals(Netron.GraphLib.Analysis.ISet)">
            <summary>
            Whether the set if equal to the given one
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ISet.IsSubset(Netron.GraphLib.Analysis.ISet)">
            <summary>
            Returns whether the given set is a subset of this set
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IPartition.Find(System.Int32)">
            <summary>
            Searches an item in the partition
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IPartition.Join(Netron.GraphLib.Analysis.ISet,Netron.GraphLib.Analysis.ISet)">
            <summary>
            Joins two sets
            </summary>
            <param name="set1"></param>
            <param name="set2"></param>
        </member>
        <member name="T:Netron.GraphLib.Analysis.IQueue">
            <summary>
            Queue interface
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IQueue.Enqueue(System.Object)">
            <summary>
            Enqueues the given object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IQueue.Dequeue">
            <summary>
            Dequeues the next object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IQueue.Head">
            <summary>
            Gets the head of the queue
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.IStack">
            <summary>
            Stack interface
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IStack.Push(System.Object)">
            <summary>
            Pushes the given object on the stack
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.IStack.Pop">
            <summary>
            Pops  the next object from the stack
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.IStack.Top">
            <summary>
            Gets the top object of the stack
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.LinkedList">
            <summary>
            A list implemented by each item having a link to the next item. 
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.LinkedList.mHead">
            <summary>
            the mHead of the list
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.LinkedList.mTail">
            <summary>
            the mTail or last element of the list
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.LinkedList.Purge">
            <summary>
            Purges or empties the list
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.LinkedList.Prepend(System.Object)">
            <summary>
            Adds an item before the mHead of the list
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.LinkedList.Append(System.Object)">
            <summary>
            Appends an item to the end of the list
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.LinkedList.Copy(Netron.GraphLib.Analysis.LinkedList)">
            <summary>
            Copies the elements of the given list to this list
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.LinkedList.Extract(System.Object)">
            <summary>
            Removes the given item from the list
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.LinkedList.ToString">
            <summary>
            Returns a string representation of the list
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.LinkedList.Head">
            <summary>
            Gets the mHead or first element of the list
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.LinkedList.Tail">
            <summary>
            Gets the mTail or last element of the list
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.LinkedList.IsEmpty">
            <summary>
            Gets whether the list is empty
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.LinkedList.First">
            <summary>
            Gets the first element of the list
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.LinkedList.Last">
            <summary>
            Gets the last element of the list
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.LinkedList.Element">
            <summary>
            Enbodies an element of a linked list
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.LinkedList.Element.list">
            <summary>
            the list to which this element belongs
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.LinkedList.Element.datum">
            <summary>
            the data bucket of this element
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.LinkedList.Element.next">
            <summary>
            the element coming after this one
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.LinkedList.Element.#ctor(Netron.GraphLib.Analysis.LinkedList,System.Object,Netron.GraphLib.Analysis.LinkedList.Element)">
            <summary>
            Constructor
            </summary>
            <param name="list"></param>
            <param name="datum"></param>
            <param name="next"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.LinkedList.Element.InsertAfter(System.Object)">
            <summary>
            Inserts the element after the given item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.LinkedList.Element.InsertBefore(System.Object)">
            <summary>
            Inserts the element before the given element
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.LinkedList.Element.Extract">
            <summary>
            Extract the element from the list
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.LinkedList.Element.Datum">
            <summary>
            Gets the data attached to this element
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.LinkedList.Element.Next">
            <summary>
            Gets the next element from the list
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.PartitionAsForest">
            <summary>
            Implementation of the partition data structure
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.PartitionAsForest.forrest">
            <summary>
            the internal forrest
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.#ctor(System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="n">the size of the partition</param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.Purge">
            <summary>
            Empties the partition
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.Find(System.Int32)">
            <summary>
            Returns a subset of the partition
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.Find(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            'Find' of a given ComparableObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.CheckArguments(Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree,Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree)">
            <summary>
            Check for two sets if they are valid arguments for a set-join
            </summary>
            <param name="s"></param>
            <param name="t"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.Join(Netron.GraphLib.Analysis.ISet,Netron.GraphLib.Analysis.ISet)">
            <summary>
            Union of two sets
            </summary>
            <param name="s"></param>
            <param name="t"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.IsMember(Netron.GraphLib.Analysis.ComparableObject)">
            <summary>
            Returns whether a given object is in the partition
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.Accept(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            Accepts an IVisitor
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.Insert(System.Int32)">
            <summary>
            Inserts a subset
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.Withdraw(System.Int32)">
            <summary>
            Removes a subset
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.IsMember(System.Int32)">
            <summary>
            Returns whether the given integer is a subset
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.GetEnumerator">
            <summary>
            Returns an enumerator for the partition
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.Union(Netron.GraphLib.Analysis.ISet)">
            <summary>
            Union of the partition with the given set
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.Intersection(Netron.GraphLib.Analysis.ISet)">
            <summary>
            Intersection of the partition with the given set
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.Difference(Netron.GraphLib.Analysis.ISet)">
            <summary>
            Takes the difference of the partition with the given set
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.Equals(Netron.GraphLib.Analysis.ISet)">
            <summary>
            Tests the equality of the partition with the given set
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.IsSubset(Netron.GraphLib.Analysis.ISet)">
            <summary>
            Returns whether the given set is a subset of the partition
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.CompareTo(System.Object)">
            <summary>
            Overrides the base method. 
            Returns 1 if the argument is the partition, otherwise 0.
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree">
            <summary>
            Partition implementation as a tree
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.partition">
            <summary>
            the inner partition
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.item">
            <summary>
            an item
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.parent">
            <summary>
            the parent tree
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.rank">
            <summary>
            the rank
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.#ctor(Netron.GraphLib.Analysis.PartitionAsForest,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="partition"></param>
            <param name="item"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.Purge">
            <summary>
            Emtpies the tree
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.IsMemberOf(Netron.GraphLib.Analysis.PartitionAsForest)">
            <summary>
            Return whether the given partition is in the tree
            </summary>
            <param name="partition"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.CompareTo(System.Object)">
            <summary>
            Comparison
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.GetHashCode">
            <summary>
            Returns the hashcode for this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.ToString">
            <summary>
            ToString override
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.Insert(System.Int32)">
            <summary>
            Inserts an element in the collection
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.Withdraw(System.Int32)">
            <summary>
            Removes an element
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.IsMember(System.Int32)">
            <summary>
            Returns whether the given int is a member
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.GetSubtree(System.Int32)">
            <summary>
            Returns a subtree
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.DepthFirstTraversal(Netron.GraphLib.Analysis.IPrePostVisitor)">
            <summary>
            DFT of the tree
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.BreadthFirstTraversal(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            BFT of the tree
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.Union(Netron.GraphLib.Analysis.ISet)">
            <summary>
            Return the union of the tree with the given set
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.Intersection(Netron.GraphLib.Analysis.ISet)">
            <summary>
            Returns the intersection of the tree with the given set
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.Difference(Netron.GraphLib.Analysis.ISet)">
            <summary>
            Returns the difference of the tree with the given set
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.Equals(Netron.GraphLib.Analysis.ISet)">
            <summary>
            Tests equality of the tree witht the given set
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.IsSubset(Netron.GraphLib.Analysis.ISet)">
            <summary>
            Returns whether the given set is a subset of the tree
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.GetEnumerator">
            <summary>
            Returns an enumerator for the tree
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.Count">
            <summary>
            Gets the number of elements in the tree
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.Height">
            <summary>
            Gets the height of the tree
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.Key">
            <summary>
            Gets the key of the tree
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.IsLeaf">
            <summary>
            Gets whether the tree is a leaf
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.IsEmpty">
            <summary>
            Gets whether the tree is empty
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.PartitionAsForest.PartitionTree.Degree">
            <summary>
            Gets the degree of the tree
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.QueueAsLinkedList">
            <summary>
            Queue implemented on the basis of a LinkedList <see cref="T:Netron.GraphLib.Analysis.LinkedList"/>
            </summary>
            
        </member>
        <member name="F:Netron.GraphLib.Analysis.QueueAsLinkedList.list">
            <summary>
            the internal linked list on which the queue is built
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.QueueAsLinkedList.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.QueueAsLinkedList.Purge">
            <summary>
            Empties the queue
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.QueueAsLinkedList.Enqueue(System.Object)">
            <summary>
            Adds an item to the queue
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.QueueAsLinkedList.Dequeue">
            <summary>
            Returns the next element from the queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.QueueAsLinkedList.Accept(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            Accepts an IVisitor according to the Visitor pattern
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.QueueAsLinkedList.GetEnumerator">
            <summary>
            Returns the enumerator for this queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.QueueAsLinkedList.CompareTo(System.Object)">
            <summary>
            Implements the ICompare interface
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Analysis.QueueAsLinkedList.Head">
            <summary>
            Gets the head of the list
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.QueueAsLinkedList.Enumerator">
            <summary>
            The enumerator returned for this queue object
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.StackAsLinkedList">
            <summary>
            Implementation of a stack as a linked list;
            a list in which the next item to be removed is the item most recently stored (LIFO)
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.StackAsLinkedList.list">
            <summary>
            the internal linked list on which the stack is based
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.StackAsLinkedList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.StackAsLinkedList.Purge">
            <summary>
            Empties the container
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.StackAsLinkedList.Push(System.Object)">
            <summary>
            Pushes a new element on the stack
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.StackAsLinkedList.Pop">
            <summary>
            Picks up the element on the top of the stack
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.StackAsLinkedList.Accept(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            Accepts a visitor
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.StackAsLinkedList.GetEnumerator">
            <summary>
            Returns an enumerator for the stack
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.StackAsLinkedList.CompareTo(System.Object)">
            <summary>
            Compares this stack to another object
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>Not implemented yet</remarks>
        </member>
        <member name="P:Netron.GraphLib.Analysis.StackAsLinkedList.Top">
            <summary>
            Gets the first element of the stack
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.StackAsLinkedList.Enumerator">
            <summary>
            The internal class enumerating the elements
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.StackAsLinkedList.Enumerator.stack">
            <summary>
            a pointer to the stack/list of this enumarator
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.StackAsLinkedList.Enumerator.position">
            <summary>
            the position or current element
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.StackAsLinkedList.Enumerator.#ctor(Netron.GraphLib.Analysis.StackAsLinkedList)">
            <summary>
            Constructor, internal
            </summary>
            <param name="stack"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.StackAsLinkedList.Enumerator.MoveNext">
            <summary>
            Moves the pointer to the next element, if any
            </summary>
            <returns>true if there is a next element</returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.StackAsLinkedList.Enumerator.Reset">
            <summary>
            Resets the pointer to the beginning of the list
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Analysis.StackAsLinkedList.Enumerator.Current">
            <summary>
            Gets the current object
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.HashCodeVisitor">
            <summary>
            Hashcode visitor
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.HashCodeVisitor.result">
            <summary>
            the hashcode
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.HashCodeVisitor.Visit(System.Object)">
            <summary>
            Visits the given object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.HashCodeVisitor.GetHashCode">
            <summary>
            Returns the hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.HashCodeVisitor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.InOrder">
            <summary>
            Base class for a PrePostVisitor
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.InOrder.visitor">
            <summary>
            the visitor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.InOrder.#ctor(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            Constructor
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.InOrder.Visit(System.Object)">
            <summary>
            Visits the given object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Netron.GraphLib.Analysis.InOrder.IsDone">
            <summary>
            Gets whether the visiting is done
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.PostOrder">
            <summary>
            Adapts a given IVisitor to a post-visitor
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.PostOrder.visitor">
            <summary>
            the inner visitor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PostOrder.#ctor(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            Constructor
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PostOrder.PostVisit(System.Object)">
            <summary>
            The post-visit method
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Netron.GraphLib.Analysis.PostOrder.IsDone">
            <summary>
            Gets whether the visiting is done
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.PreOrderVisitor">
            <summary>
            Turns a visitor in a pre-visitor which will be perofmed before the actual visit
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.PreOrderVisitor.visitor">
            <summary>
            the IVisitor 
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PreOrderVisitor.#ctor(Netron.GraphLib.Analysis.IVisitor)">
            <summary>
            Constructor
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PreOrderVisitor.PreVisit(System.Object)">
            <summary>
            Uses the IVisitor.Visit as a pre-visit
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Netron.GraphLib.Analysis.PreOrderVisitor.IsDone">
            <summary>
            Gets whether the visit is done
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.PrintingVisitor">
            <summary>
            Printing visitor; prints to the Console and the Trace
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.PrintingVisitor.comma">
            <summary>
            the comma bit
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PrintingVisitor.Visit(System.Object)">
            <summary>
            The actual visiting action
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PrintingVisitor.Finish">
            <summary>
            Finishing text
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.PrintingVisitor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Analysis.ToStringVisitor">
            <summary>
            Visitor taking the ToString method on the visited objects
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.ToStringVisitor.builder">
            <summary>
            the builder
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Analysis.ToStringVisitor.comma">
            <summary>
            comma bit
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ToStringVisitor.Visit(System.Object)">
            <summary>
            Visits the given object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ToStringVisitor.ToString">
            <summary>
            Returns the content of the string-builder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Analysis.ToStringVisitor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ConnectionStyleEditor">
            <summary>
            Allows to select a connection path from the propertygrid, the collection is expandable 
            by means of the app.config
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionStyleEditor.edSvc">
            <summary>
            the editor service
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ConnectionStyleEditor.listbox">
            <summary>
            the inner listbox
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ConnectionStyleEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns false, no icon support
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectionStyleEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            The actual editing
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Netron.GraphLib.ConnectionStyleEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns UITypeEditorEditStyle.DropDown
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectionStyleEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            The actual editing
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ConnectionStyleEditor.OnListBoxChanged(System.Object,System.EventArgs)">
            <summary>
            Closes the dropdown when something got selected
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Netron.GraphLib.UI.ConnectionTypeEditor">
            <summary>
            The UI-editor for the ConnectionType of the Connection object in the propertygrid
            </summary>
        </member>
        <member name="M:Netron.GraphLib.UI.ConnectionTypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns UITypeEditorEditStyle.DropDown
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.ConnectionTypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the values
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.UI.ConnectionTypeEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns false, we don't use icons here
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.GraphLib.Utils.FreeArrow">
            <summary>
            Allows to paint arrows on the canvas which are not necessarily connected to
            the diagram.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Utils.FreeArrow.mStartPoint">
            <summary>
            the starting point
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Utils.FreeArrow.mEndPoint">
            <summary>
            the end point
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Utils.FreeArrow.mArrowColor">
            <summary>
            the color of the arrow
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Utils.FreeArrow.mFilled">
            <summary>
            whether the arrowhead is filled
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Utils.FreeArrow.mShowLabel">
            <summary>
            whether to show the label
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Utils.FreeArrow.mText">
            <summary>
            the text
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Utils.FreeArrow.mName">
            <summary>
            the name of the arrow
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Utils.FreeArrow.#ctor">
            <summary>
            Default constrcutor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Utils.FreeArrow.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
            <param name="color"></param>
            <param name="filled"></param>
            <param name="showLabel"></param>
            <param name="text"></param>
        </member>
        <member name="M:Netron.GraphLib.Utils.FreeArrow.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Constructor
            </summary>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
        </member>
        <member name="M:Netron.GraphLib.Utils.FreeArrow.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
            <param name="text"></param>
        </member>
        <member name="M:Netron.GraphLib.Utils.FreeArrow.PaintArrow(System.Drawing.Graphics)">
            <summary>
            Paints the arrow on the canvas
            </summary>
            <param name="g"></param>
        </member>
        <member name="P:Netron.GraphLib.Utils.FreeArrow.StartPoint">
            <summary>
            Gets or sets the starting point of the arrow
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Utils.FreeArrow.EndPoint">
            <summary>
            Gets or sets the endpoint of the arrow
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Utils.FreeArrow.ArrowColor">
            <summary>
            Gets or sets the arrow's color
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Utils.FreeArrow.Filled">
            <summary>
            Gets or sets whether the arrowhead is filled
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Utils.FreeArrow.ShowLabel">
            <summary>
            Gets or sets whether the label is shown
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Utils.FreeArrow.Text">
            <summary>
            Gets or sets the text of the arrow
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Utils.FreeArrow.Name">
            <summary>
            Gets or sets the name of the arrow
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Utils.FreeArrowCollection">
            <summary>
            Collects free arrows.
            <seealso cref="T:Netron.GraphLib.Utils.FreeArrow"/>
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Utils.FreeArrowCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Utils.FreeArrowCollection.Add(Netron.GraphLib.Utils.FreeArrow)">
            <summary>
            Adds a FreeArrow to the collection
            </summary>
            <param name="arrow"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Utils.FreeArrowCollection.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the collection of arrows on the given graphics
            </summary>
            <param name="g"></param>
        </member>
        <member name="P:Netron.GraphLib.Utils.FreeArrowCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Utils.FreeArrowCollection.Item(System.String)">
            <summary>
            String indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Maths.Angle">
            <summary>
            Utilities related to angles
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Maths.Angle.RadianToDegree(System.Single)">
            <summary>
            Converts radians to degrees
            </summary>
            <param name="radian">an angle in radians</param>
            <returns>the angle expressed as degrees</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.Angle.DegreeToRadian(System.Single)">
            <summary>
            Converts degrees to radians
            </summary>
            <param name="degree">an angle in degrees</param>
            <returns>an angles expresses as radians</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.Angle.#ctor">
            <summary>
            See the 'StaticHolderTypesShouldNotHaveConstructors' error of FxCop
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Maths.Complex">
            <summary>
            Complex number struct
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Maths.Complex.mX">
            <summary>
            the real part of the complex number
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Maths.Complex.mY">
            <summary>
            the imaginary part of the complex number
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Maths.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Default constructor
            </summary>
            <param name="x">the real part of the complex number</param>
            <param name="y">the imaginary part of the complex number</param>
        </member>
        <member name="M:Netron.GraphLib.Maths.Complex.op_Equality(Netron.GraphLib.Maths.Complex,Netron.GraphLib.Maths.Complex)">
            <summary>
            == operator for Complex objects
            </summary>
            <param name="z1">a complex number</param>
            <param name="z2">a complex number</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.Complex.op_Inequality(Netron.GraphLib.Maths.Complex,Netron.GraphLib.Maths.Complex)">
            <summary>
            != operator for Complex objects
            </summary>
            <param name="z1">a complex number</param>
            <param name="z2">a complex number</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.Complex.op_Multiply(Netron.GraphLib.Maths.Complex,Netron.GraphLib.Maths.Complex)">
            <summary>
            * operator for Complex objects
            </summary>
            <param name="z1">a complex number</param>
            <param name="z2">a complex number</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.Complex.Equals(Netron.GraphLib.Maths.Complex,Netron.GraphLib.Maths.Complex)">
            <summary>
            Named alternative to the '==' operator overloading
            for non-C# coders
            </summary>
            <param name="z1">a complex number</param>
            <param name="z2">a complex number</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.Complex.NotEquals(Netron.GraphLib.Maths.Complex,Netron.GraphLib.Maths.Complex)">
            <summary>
            Named alternative to the '!=' operator overloading
            for non-C# coders
            </summary>
            <param name="z1">a complex number</param>
            <param name="z2">a complex number</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.Complex.Multiply(Netron.GraphLib.Maths.Complex,Netron.GraphLib.Maths.Complex)">
            <summary>
            Named alternative to the '*' operator overloading
            for non-C# coders
            </summary>
            <param name="z1">a complex number</param>
            <param name="z2">a complex number</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.Complex.GetHashCode">
            <summary>
            Overrides the base method as is requested when overriden the operators.
            </summary>
            <returns>an integer hash</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.Complex.Equals(System.Object)">
            <summary>
            Equal override
            </summary>
            <param name="obj">an object</param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Maths.Complex.X">
            <summary>
            Gets or sets the real part of the complex number
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Maths.Complex.Y">
            <summary>
            Gets or sets the imaginary part of the complex number
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Maths.Complex.Real">
            <summary>
            Gets or sets the real part of the complex number
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Maths.Complex.Imaginary">
            <summary>
            Gets or sets the imaginary part of the complex number
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Maths.ComplexNumbers">
            <summary>
            Static utilities to manipulate complex numbers
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Maths.ComplexNumbers.Times(Netron.GraphLib.Maths.Complex,Netron.GraphLib.Maths.Complex)">
            <summary>
            Multiplication of two complex numbers
            </summary>
            <param name="z1">a complex number</param>
            <param name="z2">a complex number</param>
            <returns></returns>		
        </member>
        <member name="M:Netron.GraphLib.Maths.ComplexNumbers.Sum(Netron.GraphLib.Maths.Complex,Netron.GraphLib.Maths.Complex)">
            <summary>
            Sum of two complex numbers
            </summary>
            <param name="z1">a complex number</param>
            <param name="z2">a complex number</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.ComplexNumbers.Real(Netron.GraphLib.Maths.Complex)">
            <summary>
            Real part of a complex number
            </summary>
            <param name="z">a complex number</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.ComplexNumbers.Imaginary(Netron.GraphLib.Maths.Complex)">
            <summary>
            Imaginary part of a complex number
            </summary>
            <param name="z">a complex number</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.ComplexNumbers.Norm(Netron.GraphLib.Maths.Complex)">
            <summary>
            Norm of a complex number
            </summary>
            <param name="z">a complex number</param>
            <returns>the norm</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.ComplexNumbers.Sin(Netron.GraphLib.Maths.Complex)">
            <summary>
            Sine of a complex number
            </summary>
            <param name="z">a complex number</param>
            <returns>the sine value</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.ComplexNumbers.Square(Netron.GraphLib.Maths.Complex)">
            <summary>
            Square of a complex number
            </summary>
            <param name="z">a complex number</param>
            <returns>the square of the number</returns>
        </member>
        <member name="T:Netron.GraphLib.Maths.MersenneTwister">
            <summary>
            Class MersenneTwister generates random numbers from a uniform distribution using
            the Mersenne Twister algorithm.
            </summary>
            <remarks>Caution: MT is for MonteCarlo, and is NOT SECURE for CRYPTOGRAPHY 
            as it is.</remarks>
        </member>
        <member name="M:Netron.GraphLib.Maths.MersenneTwister.#ctor">
            <summary>
            Creates a random number generator using the time of day in milliseconds as
            the seed.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Maths.MersenneTwister.#ctor(System.Int32)">
            <summary>
            Creates a random number generator initialized with the given seed. 
            </summary>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:Netron.GraphLib.Maths.MersenneTwister.#ctor(System.Int32[])">
            <summary>
            Creates a random number generator initialized with the given array.
            </summary>
            <param name="init">The array for initializing keys.</param>
        </member>
        <member name="M:Netron.GraphLib.Maths.MersenneTwister.Next">
            <summary>
            Returns a random integer greater than or equal to zero and
            less than or equal to <c>MaxRandomInt</c>. 
            </summary>
            <returns>The next random integer.</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.MersenneTwister.Next(System.Int32)">
            <summary>
            Returns a positive random integer less than the specified maximum.
            </summary>
            <param name="maxValue">The maximum value. Must be greater than zero.</param>
            <returns>A positive random integer less than or equal to <c>maxValue</c>.</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.MersenneTwister.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer within the specified range.
            </summary>
            <param name="minValue">The lower bound.</param>
            <param name="maxValue">The upper bound.</param>
            <returns>A random integer greater than or equal to <c>minValue</c>, and less than
            or equal to <c>maxValue</c>.</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.MersenneTwister.NextFloat">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A single-precision floating point number greater than or equal to 0.0, 
            and less than 1.0.</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.MersenneTwister.NextFloat(System.Boolean)">
            <summary>
            Returns a random number greater than or equal to zero, and either strictly
            less than one, or less than or equal to one, depending on the value of the
            given boolean parameter.
            </summary>
            <param name="includeOne">
            If <c>true</c>, the random number returned will be 
            less than or equal to one; otherwise, the random number returned will
            be strictly less than one.
            </param>
            <returns>
            If <c>includeOne</c> is <c>true</c>, this method returns a
            single-precision random number greater than or equal to zero, and less
            than or equal to one. If <c>includeOne</c> is <c>false</c>, this method
            returns a single-precision random number greater than or equal to zero and
            strictly less than one.
            </returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.MersenneTwister.NextFloatPositive">
            <summary>
            Returns a random number greater than 0.0 and less than 1.0.
            </summary>
            <returns>A random number greater than 0.0 and less than 1.0.</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.MersenneTwister.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, 
            and less than 1.0.</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.MersenneTwister.NextDouble(System.Boolean)">
            <summary>
            Returns a random number greater than or equal to zero, and either strictly
            less than one, or less than or equal to one, depending on the value of the
            given boolean parameter.
            </summary>
            <param name="includeOne">
            If <c>true</c>, the random number returned will be 
            less than or equal to one; otherwise, the random number returned will
            be strictly less than one.
            </param>
            <returns>
            If <c>includeOne</c> is <c>true</c>, this method returns a
            single-precision random number greater than or equal to zero, and less
            than or equal to one. If <c>includeOne</c> is <c>false</c>, this method
            returns a single-precision random number greater than or equal to zero and
            strictly less than one.
            </returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.MersenneTwister.NextDoublePositive">
            <summary>
            Returns a random number greater than 0.0 and less than 1.0.
            </summary>
            <returns>A random number greater than 0.0 and less than 1.0.</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.MersenneTwister.Next53BitRes">
            <summary>
            Generates a random number on <c>[0,1)</c> with 53-bit resolution.
            </summary>
            <returns>A random number on <c>[0,1)</c> with 53-bit resolution</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.MersenneTwister.Initialize">
            <summary>
            Reinitializes the random number generator using the time of day in
            milliseconds as the seed.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Maths.MersenneTwister.Initialize(System.Int32)">
            <summary>
            Reinitializes the random number generator with the given seed.
            </summary>
            <param name="seed">The seed.</param>
        </member>
        <member name="M:Netron.GraphLib.Maths.MersenneTwister.Initialize(System.Int32[])">
            <summary>
            Reinitializes the random number generator with the given array.
            </summary>
            <param name="init">The array for initializing keys.</param>
        </member>
        <member name="P:Netron.GraphLib.Maths.MersenneTwister.MaxRandomInt">
            <summary>
            Gets the maximum random integer value. All random integers generated
            by instances of this class are less than or equal to this value. This
            value is <c>0x7fffffff</c> (<c>2,147,483,647</c>).
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Maths.NetronVector">
            <summary>
            Implementation of a 3D vector 
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Maths.NetronVector.mX">
            <summary>
            the x-coordinate
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Maths.NetronVector.mY">
            <summary>
            the y-coordinate
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Maths.NetronVector.mZ">
            <summary>
            the z-coordinate
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.#ctor">
            <summary>
            Constructor; the zero vector
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.#ctor(Netron.GraphLib.Maths.NetronVector)">
            <summary>
            Constructor; based on another NetronVector
            </summary>
            <param name="v">a vector</param>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Common constructor; based on the coordinates
            </summary>
            <param name="ax">the x-coordinate of the vector</param>
            <param name="ay">the y-coordinate of the vector</param>
            <param name="az">the z-coordinate of the vactor</param>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.Add(Netron.GraphLib.Maths.NetronVector)">
            <summary>
            Returns the addition of the vector with the given one
            </summary>
            <param name="v">a vector</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.AddEquals(Netron.GraphLib.Maths.NetronVector)">
            <summary>
            Adds a vector to the current one
            </summary>
            <param name="v">a vector</param>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.Substract(Netron.GraphLib.Maths.NetronVector)">
            <summary>
            Substract the vector with the given one
            </summary>
            <param name="v">a vector</param>
            <returns>the result of the vector operation</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.SubstractEquals(Netron.GraphLib.Maths.NetronVector)">
            <summary>
            Substract the vector with the given one
            </summary>
            <param name="v">a vector</param>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.Multiply(System.Double)">
            <summary>
            Returns the multiplied vector with the given quantity
            </summary>
            <param name="scalingFactor"></param>
            <returns>the resulting vector</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.MultiplyEquals(System.Double)">
            <summary>
            Multiplies the vector with the given quantity
            </summary>
            <param name="scalingFactor"></param>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.Div(System.Double)">
            <summary>
            Divides the vector with the given value, if not zero.
            If zero, returns the zero vector.
            </summary>
            <param name="s">the value</param>
            <returns>the resulting vector</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.DivEquals(System.Double)">
            <summary>
            Divides the vector by the given quantity, if not zero.
            If zero, does nothing
            </summary>
            <param name="s">the value to divide with</param>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.Negate">
            <summary>
            Returns the inverted vector
            </summary>
            <returns>the resulting vector</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.NegateEquals">
            <summary>
            Inverts the vector
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.SetTo(Netron.GraphLib.Maths.NetronVector)">
            <summary>
            Sets the coordinates of this vector to those of the given one
            </summary>
            <param name="v">a vector</param>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.DotProduct(Netron.GraphLib.Maths.NetronVector)">
            <summary>
            Scalar product of this vector with another
            </summary>
            <param name="v">the second vector to make the scalar product with</param>
            <returns>the result of the scalar product</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.Projection(Netron.GraphLib.Maths.NetronVector)">
            <summary>
            Returns the projection of this vector on the given one
            </summary>
            <param name="v">the vector onto which this vector is projected</param>
            <returns>the resulting vector</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.ProjectionEquals(Netron.GraphLib.Maths.NetronVector)">
            <summary>
            Sets this vector to the project of the original onto the given vector
            </summary>
            <param name="v">the vector onto which this vector is projected</param>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.CrossProduct(Netron.GraphLib.Maths.NetronVector)">
            <summary>
            The vector product with another vector
            </summary>
            <param name="v">the second vector of the product</param>
            <returns>the resulting vector</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.CrossProductEquals(Netron.GraphLib.Maths.NetronVector)">
            <summary>
            The vector product and sets the result equal to this vector
            </summary>
            <param name="v">a vector</param>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.IsEqual(Netron.GraphLib.Maths.NetronVector)">
            <summary>
            Return whether another vector is equal to this one
            </summary>
            <param name="v">a NetronVector vector</param>
            <returns>true if the two are component-wise equal, otherwise false</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.Length">
            <summary>
            Return the length of this vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.LengthSquared">
            <summary>
            Returns the square length of the vector,
            good for comparing disances. faster than length.
            </summary>
            <returns>the square</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.Unit">
            <summary>
            Returns a unit vector in the direction of this vector
            </summary>
            <returns>the resulting unit vector</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.SetUnit">
            <summary>
            Resizes the vector to a unit-vector
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.SetLength(System.Double)">
            <summary>
            Sets the length of the vector to the given value
            </summary>
            <param name="scalingFactor">the scaling factor</param>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.ToString">
            <summary>
            Overrides the default behavior and returns the coordinates of
            the vector
            </summary>
            <returns>the resulting string</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.Distance(Netron.GraphLib.Maths.NetronVector)">
            <summary>
            Returns the distance to the given vector
            </summary>
            <param name="v">a vector</param>
            <returns>the distance to the given vector</returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.Angle(Netron.GraphLib.Maths.NetronVector,Netron.GraphLib.Maths.NetronVector)">
            <summary>
            Returns the angle between two NetronVectors
            </summary>
            <param name="v1">a vector</param>
            <param name="v2">a vector</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.Rotate(System.Double,System.Double,System.Double)">
            <summary>
            Rotates a 3D point along the origin of its coordinate system
            </summary>
            <param name="phi">the angle around the x-axis</param>
            <param name="theta">the angle around the y-axis</param>
            <param name="psi">the angle around the z-axis</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.NetronVector.RotateEquals(System.Double,System.Double,System.Double)">
            <summary>
            Rotates the vector 
            </summary>
            <param name="phi">the angle around the x-axis</param>
            <param name="theta">the angle around the y-axis</param>
            <param name="psi">the angle around the z-axis</param>
        </member>
        <member name="P:Netron.GraphLib.Maths.NetronVector.X">
            <summary>
            Gets or sets the X-coordinate of the vector
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Maths.NetronVector.Y">
            <summary>
            Gets or sets the Y-coordinate of the vector
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Maths.NetronVector.Z">
            <summary>
            Gets or sets the Z-coordinate of the vector
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Maths.Noise">
            <summary>
            Implementation of 1D and 2D noise functions
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Maths.Noise.Noise1d(System.Int32)">
            <summary>
            Returns a random number based on a given value.
            </summary>
            <param name="x">an integer </param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.Noise.Noise2d(System.Int32,System.Int32)">
            <summary>
            Returns a random number based on two given numbers
            </summary>
            <param name="x">an integer</param>
            <param name="y">an integer</param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Maths.Noise.#ctor">
            <summary>
            Private constructor
            
            </summary>
        </member>
        <member name="T:Netron.GraphLib.MouseCursors">
            <summary>
            This class contains the five basic cursors necessary to visualize the various actions you can perform on the elements
            </summary>
            <remarks>Might be better to implement it as a structure...?</remarks>
        </member>
        <member name="F:Netron.GraphLib.MouseCursors.Add">
            <summary>
            Arrow with plus cursor
            </summary>
        </member>
        <member name="F:Netron.GraphLib.MouseCursors.Cross">
            <summary>
            Cross cursor
            </summary>
        </member>
        <member name="F:Netron.GraphLib.MouseCursors.Grip">
            <summary>
            Grip cursor for connection point
            </summary>
        </member>
        <member name="F:Netron.GraphLib.MouseCursors.Move">
            <summary>
            Traditional move cursor
            </summary>
        </member>
        <member name="F:Netron.GraphLib.MouseCursors.Select">
            <summary>
            Selection cursor
            </summary>
        </member>
        <member name="T:Netron.GraphLib.PropertyBag">
            <summary>
            Represents a collection of custom properties that can be selected into a
            PropertyGrid to provide functionality beyond that of the simple reflection
            normally used to query an object's properties.
            
            Thanks to Tony Allowatt for this code
            http://www.codeproject.com/cs/miscctrl/bending_property.asp
            http://codeproject.com/vb/net/Propertygrid_Editor.asp
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.#ctor">
            <summary>
            Initializes a new instance of the PropertyBag class.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.#ctor(Netron.GraphLib.Entity)">
            <summary>
            Constructor
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.OnGetValue(Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Raises the GetValue event.
            </summary>
            <param name="e">A PropertySpecEventArgs that contains the event data.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.OnSetValue(Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            Raises the SetValue event.
            </summary>
            <param name="e">A PropertySpecEventArgs that contains the event data.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.ToString">
            <summary>
            Overrides the default ToString and lists the proeprties with their value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.PropertyBag.Owner">
            <summary>
            Gets the Entity of the canvas which owns the bag
            </summary>
        </member>
        <member name="P:Netron.GraphLib.PropertyBag.DefaultProperty">
            <summary>
            Gets or sets the name of the default property in the collection.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.PropertyBag.Properties">
            <summary>
            Gets the collection of properties contained within this PropertyBag.
            </summary>
        </member>
        <member name="E:Netron.GraphLib.PropertyBag.GetValue">
            <summary>
            Occurs when a PropertyGrid requests the value of a property.
            </summary>
        </member>
        <member name="E:Netron.GraphLib.PropertyBag.SetValue">
            <summary>
            Occurs when the user changes the value of a property in a PropertyGrid.
            </summary>
        </member>
        <member name="T:Netron.GraphLib.PropertyBag.PropertySpecCollection">
            <summary>
            Encapsulates a collection of PropertySpec objects.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.#ctor">
            <summary>
            Initializes a new instance of the PropertySpecCollection class.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.Add(Netron.GraphLib.PropertySpec)">
            <summary>
            Adds a PropertySpec to the end of the PropertySpecCollection.
            </summary>
            <param name="value">The PropertySpec to be added to the end of the PropertySpecCollection.</param>
            <returns>The PropertySpecCollection index at which the value has been added.</returns>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.AddRange(Netron.GraphLib.PropertySpec[])">
            <summary>
            Adds the elements of an array of PropertySpec objects to the end of the PropertySpecCollection.
            </summary>
            <param name="array">The PropertySpec array whose elements should be added to the end of the
            PropertySpecCollection.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.Clear">
            <summary>
            Removes all elements from the PropertySpecCollection.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.Contains(Netron.GraphLib.PropertySpec)">
            <summary>
            Determines whether a PropertySpec is in the PropertySpecCollection.
            </summary>
            <param name="item">The PropertySpec to locate in the PropertySpecCollection. The element to locate
            can be a null reference (Nothing in Visual Basic).</param>
            <returns>true if item is found in the PropertySpecCollection; otherwise, false.</returns>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.Contains(System.String)">
            <summary>
            Determines whether a PropertySpec with the specified name is in the PropertySpecCollection.
            </summary>
            <param name="name">The name of the PropertySpec to locate in the PropertySpecCollection.</param>
            <returns>true if item is found in the PropertySpecCollection; otherwise, false.</returns>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.CopyTo(Netron.GraphLib.PropertySpec[])">
            <summary>
            Copies the entire PropertySpecCollection to a compatible one-dimensional Array, starting at the
            beginning of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied
            from PropertySpecCollection. The Array must have zero-based indexing.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.CopyTo(Netron.GraphLib.PropertySpec[],System.Int32)">
            <summary>
            Copies the PropertySpecCollection or a portion of it to a one-dimensional array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied
            from the collection.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the PropertySpecCollection.
            </summary>
            <returns>An IEnumerator for the entire PropertySpecCollection.</returns>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.IndexOf(Netron.GraphLib.PropertySpec)">
            <summary>
            Searches for the specified PropertySpec and returns the zero-based index of the first
            occurrence within the entire PropertySpecCollection.
            </summary>
            <param name="value">The PropertySpec to locate in the PropertySpecCollection.</param>
            <returns>The zero-based index of the first occurrence of value within the entire PropertySpecCollection,
            if found; otherwise, -1.</returns>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.IndexOf(System.String)">
            <summary>
            Searches for the PropertySpec with the specified name and returns the zero-based index of
            the first occurrence within the entire PropertySpecCollection.
            </summary>
            <param name="name">The name of the PropertySpec to locate in the PropertySpecCollection.</param>
            <returns>The zero-based index of the first occurrence of value within the entire PropertySpecCollection,
            if found; otherwise, -1.</returns>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.Insert(System.Int32,Netron.GraphLib.PropertySpec)">
            <summary>
            Inserts a PropertySpec object into the PropertySpecCollection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The PropertySpec to insert.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.Remove(Netron.GraphLib.PropertySpec)">
            <summary>
            Removes the first occurrence of a specific object from the PropertySpecCollection.
            </summary>
            <param name="obj">The PropertySpec to remove from the PropertySpecCollection.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.Remove(System.String)">
            <summary>
            Removes the property with the specified name from the PropertySpecCollection.
            </summary>
            <param name="name">The name of the PropertySpec to remove from the PropertySpecCollection.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the object at the specified index of the PropertySpecCollection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.ToArray">
            <summary>
            Copies the elements of the PropertySpecCollection to a new PropertySpec array.
            </summary>
            <returns>A PropertySpec array containing copies of the elements of the PropertySpecCollection.</returns>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PropertyBag.PropertySpecCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.PropertyBag.PropertySpecCollection.Count">
            <summary>
            Gets the number of elements in the PropertySpecCollection.
            </summary>
            <value>
            The number of elements contained in the PropertySpecCollection.
            </value>
        </member>
        <member name="P:Netron.GraphLib.PropertyBag.PropertySpecCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the PropertySpecCollection has a fixed size.
            </summary>
            <value>
            true if the PropertySpecCollection has a fixed size; otherwise, false.
            </value>
        </member>
        <member name="P:Netron.GraphLib.PropertyBag.PropertySpecCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the PropertySpecCollection is read-only.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.PropertyBag.PropertySpecCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <value>
            true if access to the PropertySpecCollection is synchronized (thread-safe); otherwise, false.
            </value>
        </member>
        <member name="P:Netron.GraphLib.PropertyBag.PropertySpecCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
            <value>
            An object that can be used to synchronize access to the collection.
            </value>
        </member>
        <member name="P:Netron.GraphLib.PropertyBag.PropertySpecCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            In C#, this property is the indexer for the PropertySpecCollection class.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>
            The element at the specified index.
            </value>
        </member>
        <member name="P:Netron.GraphLib.PropertyBag.PropertySpecCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Netron.GraphLib.PropertySpec">
            <summary>
            Represents a single property in a PropertySpec.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PropertySpec.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertySpec.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertySpec.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertySpec.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category"></param>
        </member>
        <member name="M:Netron.GraphLib.PropertySpec.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertySpec.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertySpec.#ctor(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertySpec.#ctor(System.String,System.Type,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertySpec.#ctor(System.String,System.String,System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The fully qualified name of the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The fully qualified name of the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertySpec.#ctor(System.String,System.Type,System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The fully qualified name of the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The fully qualified name of the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertySpec.#ctor(System.String,System.String,System.String,System.String,System.Object,System.Type,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The Type that represents the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The fully qualified name of the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertySpec.#ctor(System.String,System.Type,System.String,System.String,System.Object,System.Type,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The Type that represents the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The fully qualified name of the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertySpec.#ctor(System.String,System.String,System.String,System.String,System.Object,System.String,System.Type)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The fully qualified name of the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The Type that represents the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertySpec.#ctor(System.String,System.Type,System.String,System.String,System.Object,System.String,System.Type)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The fully qualified name of the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The Type that represents the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertySpec.#ctor(System.String,System.String,System.String,System.String,System.Object,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The Type that represents the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The Type that represents the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Netron.GraphLib.PropertySpec.#ctor(System.String,System.Type,System.String,System.String,System.Object,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The Type that represents the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The Type that represents the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="P:Netron.GraphLib.PropertySpec.Attributes">
            <summary>
            Gets or sets a collection of additional Attributes for this property.  This can
            be used to specify attributes beyond those supported intrinsically by the
            PropertySpec class, such as ReadOnly and Browsable.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.PropertySpec.Category">
            <summary>
            Gets or sets the category name of this property.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.PropertySpec.ConverterTypeName">
            <summary>
            Gets or sets the fully qualified name of the type converter
            type for this property.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.PropertySpec.DefaultValue">
            <summary>
            Gets or sets the default value of this property.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.PropertySpec.Description">
            <summary>
            Gets or sets the help text description of this property.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.PropertySpec.EditorTypeName">
            <summary>
            Gets or sets the fully qualified name of the editor type for
            this property.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.PropertySpec.Name">
            <summary>
            Gets or sets the name of this property.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.PropertySpec.TypeName">
            <summary>
            Gets or sets the fully qualfied name of the type of this
            property.
            </summary>
        </member>
        <member name="T:Netron.GraphLib.PropertySpecEventArgs">
            <summary>
            Provides data for the GetValue and SetValue events of the PropertyBag class.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PropertySpecEventArgs.#ctor(Netron.GraphLib.PropertySpec,System.Object)">
            <summary>
            Initializes a new instance of the PropertySpecEventArgs class.
            </summary>
            <param name="property">The PropertySpec that represents the property whose
            value is being requested or set.</param>
            <param name="val">The current value of the property.</param>
        </member>
        <member name="P:Netron.GraphLib.PropertySpecEventArgs.Value">
            <summary>
            Gets or sets the current value of the property.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.PropertySpecEventArgs.Property">
            <summary>
            Gets the PropertySpec that represents the property whose value is being
            requested or set.
            </summary> 
        </member>
        <member name="T:Netron.GraphLib.PropertyTable">
            <summary>
            An extension of PropertyBag that manages a table of property values, in
            addition to firing events when property values are requested or set.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PropertyTable.#ctor">
            <summary>
            Initializes a new instance of the PropertyTable class.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PropertyTable.OnGetValue(Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            This member overrides PropertyBag.OnGetValue.
            </summary>
        </member>
        <member name="M:Netron.GraphLib.PropertyTable.OnSetValue(Netron.GraphLib.PropertySpecEventArgs)">
            <summary>
            This member overrides PropertyBag.OnSetValue.
            </summary>
        </member>
        <member name="P:Netron.GraphLib.PropertyTable.Item(System.String)">
            <summary>
            Gets or sets the value of the property with the specified name.
            <p>In C#, this property is the indexer of the PropertyTable class.</p>
            </summary>
        </member>
        <member name="T:Netron.GraphLib.ReflectedEnumStyleEditor">
            <summary>
            Allows to select a connection path from the propertygrid, the collection is expandable 
            by means of the app.config
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ReflectedEnumStyleEditor.edSvc">
            <summary>
            the editor service
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ReflectedEnumStyleEditor.listbox">
            <summary>
            the listbox of the editor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ReflectedEnumStyleEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns false, we don't supply an icon
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ReflectedEnumStyleEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns the UITypeEditorEditStyle.DropDown type
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ReflectedEnumStyleEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            The actual code related to the editor
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ReflectedEnumStyleEditor.OnListBoxChanged(System.Object,System.EventArgs)">
            <summary>
            Closes the dropdown when something was selected
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Netron.GraphLib.NComboBox">
            <summary>
            Summary description for ComboBox.
            </summary>
        </member>
        <member name="T:Netron.GraphLib.NetronGraphControl">
            <summary>
            Base class for a (graph) shape embedded control 
            Not to be confused with the GraphControl control, <seealso cref="T:Netron.GraphLib.UI.GraphControl"/>
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NetronGraphControl.mFont">
            <summary>
            the font to be used
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NetronGraphControl.parent">
            <summary>
            the owner of the control
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NetronGraphControl.mLocation">
            <summary>
            the location of the control
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NetronGraphControl.mWidth">
            <summary>
            the width
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NetronGraphControl.mHeight">
            <summary>
            the height
            </summary>
        </member>
        <member name="M:Netron.GraphLib.NetronGraphControl.#ctor(Netron.GraphLib.Shape)">
            <summary>
            Default constructor
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Netron.GraphLib.NetronGraphControl.Init">
            <summary>
            Initializes the control
            </summary>
        </member>
        <member name="M:Netron.GraphLib.NetronGraphControl.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the control
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.NetronGraphControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Action(s) on mouse-down
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.NetronGraphControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Action(s) on mouse move
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.NetronGraphControl.Hit(System.Drawing.Point)">
            <summary>
            Action(s) on hitting the control
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.NetronGraphControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Action(s) on key-down
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.NetronGraphControl.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Action(s) on key-press
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Netron.GraphLib.NetronGraphControl.Rectangle">
            <summary>
            Gets the base rectangle of the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.NetronGraphControl.Location">
            <summary>
            Gets or sets the location of the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.NetronGraphControl.Height">
            <summary>
            Gets or sets the height of the control
            </summary>
        </member>
        <member name="P:Netron.GraphLib.NetronGraphControl.Width">
            <summary>
            Gets or sets the width of the control
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NComboBox.mSelectedIndex">
            <summary>
            selected index
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NComboBox.mText">
            <summary>
            the text
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NComboBox.resize">
            <summary>
            whether to resize
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NComboBox.mExpanded">
            <summary>
            whether expanded
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NComboBox.mListItems">
            <summary>
            the internal listitems
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NComboBox.expandedWidth">
            <summary>
            expanded width
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NComboBox.expandedHeight">
            <summary>
            expanded height
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NComboBox.maxHeight">
            <summary>
            the max height
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NComboBox.hoverPoint">
            <summary>
            hovering point
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NComboBox.windowed">
            <summary>
            whether windowed
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NComboBox.startIndex">
            <summary>
            the start index
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NComboBox.stopIndex">
            <summary>
            the stop index
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NComboBox.recalc">
            <summary>
            for the expanded combo size
            </summary>
        </member>
        <member name="M:Netron.GraphLib.NComboBox.#ctor(Netron.GraphLib.Shape)">
            <summary>
            Constructor
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Netron.GraphLib.NComboBox.#ctor(Netron.GraphLib.Shape,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="shape"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Netron.GraphLib.NComboBox.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the combo on the canvas
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.NComboBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides the base method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.NComboBox.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides the base method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.NComboBox.Hit(System.Drawing.Point)">
            <summary>
            Overrides the base method
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.NComboBox.HitComboButton(System.Drawing.Point)">
            <summary>
            Returns whether the combo was hit
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.NComboBox.HitListItem(System.Drawing.Point)">
            <summary>
            Returns what text was hit
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.NComboBox.HoverListItem(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.NComboBox.RecalcSize(System.Drawing.Graphics)">
            <summary>
            Recalculates the size of the expanded combo
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.NComboBox.mListItems_OnItemAdded(System.Object,Netron.GraphLib.Utils.NListEventArgs)">
            <summary>
            Recalcs the size when an item is added
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.NComboBox.mListItems_OnItemRemoved(System.Object,Netron.GraphLib.Utils.NListEventArgs)">
            <summary>
            Recalcs the size when an item is removed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Netron.GraphLib.NComboBox.OnResize">
            <summary>
            Occurs when the control is resized
            </summary>
        </member>
        <member name="P:Netron.GraphLib.NComboBox.Expanded">
            <summary>
            Gets or sets the expanded state
            </summary>
        </member>
        <member name="P:Netron.GraphLib.NComboBox.ListItems">
            <summary>
            Gets or sets the listitems
            </summary>
        </member>
        <member name="P:Netron.GraphLib.NComboBox.Text">
            <summary>
            Gets or sets the text
            </summary>
        </member>
        <member name="P:Netron.GraphLib.NComboBox.SelectedIndex">
            <summary>
            Gets or sets the selected index
            </summary>
        </member>
        <member name="T:Netron.GraphLib.NComboBox.ResizeInfo">
            <summary>
            Delegate to pass SizeF info
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Utils.NetronGraphControlCollection">
            <summary>
            STC of GraphControls
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Utils.NetronGraphControlCollection.Add(Netron.GraphLib.NetronGraphControl)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Utils.NetronGraphControlCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Utils.NListItem">
            <summary>
            Summary description for NListItem.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Utils.NListItem.mText">
            <summary>
            the text
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Utils.NListItem.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Netron.GraphLib.Utils.NListItem.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Utils.NListItem.ToString">
            <summary>
            Overrides the base method to return the text
            </summary>
            <returns></returns>
        </member>
        <member name="P:Netron.GraphLib.Utils.NListItem.Text">
            <summary>
            Gets or sets the text
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Utils.NListItemCollection">
            <summary>
            ListView implementation for shapes
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Utils.NListItemCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Utils.NListItemCollection.Add(Netron.GraphLib.Utils.NListItem)">
            <summary>
            Adds an item to the list
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.Utils.NListItemCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Raises the OnInsert event
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Netron.GraphLib.Utils.NListItemCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Raises the OnRemove event
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Netron.GraphLib.Utils.NListItemCollection.RaiseOnItemAdded(System.Object,Netron.GraphLib.Utils.NListEventArgs)">
            <summary>
            Raises the OnItemAdded event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.Utils.NListItemCollection.RaiseOnItemRemoved(System.Object,Netron.GraphLib.Utils.NListEventArgs)">
            <summary>
            Raises the OnItemRemoved event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Netron.GraphLib.Utils.NListItemCollection.OnItemAdded">
            <summary>
            Occurs when an item is added to the list
            </summary>
        </member>
        <member name="E:Netron.GraphLib.Utils.NListItemCollection.OnItemRemoved">
            <summary>
            Occurs when an item is removed from the list
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Utils.NListItemCollection.Item(System.Int32)">
            <summary>
            Integer indexer
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Utils.NListItemCollection.NListChange">
            <summary>
            ListItem info delegate
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Utils.NListEventArgs">
            <summary>
            NList event argument encapsulation
            </summary>
        </member>
        <member name="F:Netron.GraphLib.Utils.NListEventArgs.mIndex">
            <summary>
            the index
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Utils.NListEventArgs.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Netron.GraphLib.Utils.NListEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Netron.GraphLib.Utils.NListEventArgs.Index">
            <summary>
            Gets or sets the index of the listitem
            </summary>
        </member>
        <member name="T:Netron.GraphLib.NTextBox">
            <summary>
            Summary description for ComboBox.
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NTextBox.mSelectedIndex">
            <summary>
            the current selected index
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NTextBox.mText">
            <summary>
            the text value
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NTextBox.resize">
            <summary>
            the resize bit
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NTextBox.mExpanded">
            <summary>
            the expanded bit
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NTextBox.mListItems">
            <summary>
            the list item collection
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NTextBox.expandedSize">
            <summary>
            the size of the expanded box
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NTextBox.timer">
            <summary>
            a timer...
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NTextBox.yn">
            <summary>
            yesno field
            </summary>
        </member>
        <member name="F:Netron.GraphLib.NTextBox.mEditing">
            <summary>
            editing field
            </summary>
        </member>
        <member name="M:Netron.GraphLib.NTextBox.#ctor(Netron.GraphLib.Shape)">
            <summary>
            Constructor
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Netron.GraphLib.NTextBox.#ctor(Netron.GraphLib.Shape,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="shape"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Netron.GraphLib.NTextBox.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Required override of the base mehtod
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.NTextBox.Paint(System.Drawing.Graphics)">
            <summary>
            Paints the shape on the canvas
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.GraphLib.NTextBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides the base method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.NTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overrides the base method
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.NTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Overrides the base method, stops the editing process
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.GraphLib.NTextBox.Hit(System.Drawing.Point)">
            <summary>
            Overrides the base method
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.NTextBox.timer_Tick(System.Object,System.EventArgs)">
            <summary>
            Actions on the tick of the timer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Netron.GraphLib.NTextBox.OnResize">
            <summary>
            Occurs when the textbox is resized
            </summary>
        </member>
        <member name="P:Netron.GraphLib.NTextBox.Expanded">
            <summary>
            Gets or sets the expanded state
            </summary>
        </member>
        <member name="P:Netron.GraphLib.NTextBox.ListItems">
            <summary>
            Gets or sets the list-items
            </summary>
        </member>
        <member name="P:Netron.GraphLib.NTextBox.Text">
            <summary>
            Gets or sets the text
            </summary>
        </member>
        <member name="P:Netron.GraphLib.NTextBox.SelectedIndex">
            <summary>
            Gets or sets the selected index
            </summary>
        </member>
        <member name="P:Netron.GraphLib.NTextBox.Editing">
            <summary>
            Gets of sets the editing process
            </summary>
        </member>
        <member name="T:Netron.GraphLib.NTextBox.ResizeInfo">
            <summary>
            SizeF delegate info
            </summary>
        </member>
        <member name="T:Netron.GraphLib.Sorting">
            <summary>
            Sorting utilities
            </summary>
        </member>
        <member name="M:Netron.GraphLib.Sorting.#ctor">
             <summary>
            Default ctor 
             </summary>
        </member>
        <member name="M:Netron.GraphLib.Sorting.QuickSort(Netron.GraphLib.ShapeCollection@)">
            <summary>
            Quick Sort Algorithm
            http://www.publicjoe.f9.co.uk/csharp/sort05.html
            </summary>
            <param name="shapes">a shapes collection</param> 
        </member>
        <member name="M:Netron.GraphLib.Sorting.QuickSort(System.Int32,System.Int32,Netron.GraphLib.ShapeCollection@)">
            <summary>
            Quicksort implementation
            </summary>
            <param name="lowerIndex"></param>
            <param name="upperIndex"></param>
            <param name="shapes"></param>
        </member>
        <member name="T:Netron.GraphLib.ClassSorter">
            <summary>
            IComparer implementation to sort properties
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ClassSorter.sortBy">
            <summary>
            which property to use
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ClassSorter.sortByType">
            <summary>
            the sort type
            </summary>
        </member>
        <member name="F:Netron.GraphLib.ClassSorter.sortDirection">
            <summary>
            the sort direction
            </summary>
        </member>
        <member name="M:Netron.GraphLib.ClassSorter.#ctor(System.String,Netron.GraphLib.SortByType,Netron.GraphLib.SortDirection)">
            <summary>
            Constructor
            </summary>
            <param name="sortBy"></param>
            <param name="sortByType"></param>
            <param name="sortDirection"></param>
        </member>
        <member name="M:Netron.GraphLib.ClassSorter.Compare(System.Object,System.Object,System.String)">
            <summary>
            Compares two objects
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.GraphLib.ClassSorter.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
    </members>
</doc>
