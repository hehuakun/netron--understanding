<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon</name>
    </assembly>
    <members>
        <member name="T:Netron.Neon.InertButton">
            <summary>Image button with flat appearance, border visible only when activated by mouse.</summary>
        </member>
        <member name="M:Netron.Neon.InertButton.#ctor">
            <overloads>
				<summary>Initializes a new instance of the <see cref="T:Netron.Neon.InertButton" /> class.</summary>
			</overloads>
            <summary>Initializes a new instance of the <see cref="T:Netron.Neon.InertButton" /> class, with default settings.</summary>
        </member>
        <member name="M:Netron.Neon.InertButton.#ctor(System.Drawing.Image)">
            <summary>Initializes a new instance of the <see cref="T:Netron.Neon.InertButton" /> class, with specified image for enabled button.</summary><param name="imageEnabled">
			The <see cref="T:System.Drawing.Image" /> object to show when the button is enabled. The disabled image will be draw based on this image.
		</param>
        </member>
        <member name="M:Netron.Neon.InertButton.#ctor(System.Drawing.Image,System.Drawing.Image)">
            <summary>Initializes a new instance of the <see cref="T:Netron.Neon.InertButton" /> class, with specified images for enabled and disabled button.</summary><param name="imageEnabled">
			The <see cref="T:System.Drawing.Image" /> object to show when the button is enabled.
		</param><param name="imageDisabled">
			The <see cref="T:System.Drawing.Image" /> object to show when the button is disabled.
		</param>
        </member>
        <member name="M:Netron.Neon.InertButton.Dispose(System.Boolean)">
            <exclude/>
        </member>
        <member name="P:Netron.Neon.InertButton.BorderColor">
            <summary>Gets or sets the border color for the control.</summary><value>A <see cref="T:System.Drawing.Color" /> object that represents the border color of the control.</value>
        </member>
        <member name="P:Netron.Neon.InertButton.BorderWidth">
            <summary>Gets or sets the border width for the control.</summary><value>A integer that represents the border width for the control, in pixel. The default is <b>1</b>.</value>
        </member>
        <member name="P:Netron.Neon.InertButton.ImageEnabled">
            <summary>Gets or sets the image to display for the control when enabled.</summary><value>A <see cref="T:System.Drawing.Image" /> object to display for the control when enabled.</value>
        </member>
        <member name="P:Netron.Neon.InertButton.ImageDisabled">
            <summary>Gets or sets the image to display for the control when disabled.</summary><value>A <see cref="T:System.Drawing.Image" /> object to display for the control when disabled.</value>
        </member>
        <member name="P:Netron.Neon.InertButton.ImageList">
            <summary>Gets or sets the <see cref="T:System.Windows.Forms.ImageList" /> that contains the images to display.</summary><value>The <see cref="T:System.Windows.Forms.ImageList" /> that contains the images to display.</value>
        </member>
        <member name="P:Netron.Neon.InertButton.ImageIndexEnabled">
            <summary>Gets or sets the index of the image to display for the control when enabled.</summary><value>The zero-base index of the image in the <see cref="T:System.Windows.Forms.ImageList" /> to display for the control when enabled.</value>
        </member>
        <member name="P:Netron.Neon.InertButton.ImageIndexDisabled">
            <summary>Gets or sets the index of the image to display for the control when disabled.</summary><value>The zero-base index of the image in the <see cref="T:System.Windows.Forms.ImageList" /> to display for the control when disabled.</value>
        </member>
        <member name="P:Netron.Neon.InertButton.IsPopup">
            <summary>Determines if the buttons is displayed as popup when activated.</summary><value><b>True</b> if the button is displayed as popup when activated; otherwise <b>false</b>. The default value is <b>true</b>.</value>
        </member>
        <member name="P:Netron.Neon.InertButton.Monochrome">
            <summary>Determines if the button is displayed as black and white.</summary><value><b>True</b> if the button is displayed as as black and white; otherwise <b>false</b>. The default value is <b>false</b>.</value>
        </member>
        <member name="P:Netron.Neon.InertButton.TextAlign">
            <summary>Gets or sets the alignment of the text in the button.</summary><value>One of the <see cref="T:System.Drawing.ContentAlignment" /> values. The default is <b>MiddleCenter</b>.</value>
        </member>
        <member name="P:Netron.Neon.InertButton.ToolTipText">
            <summary>Gets or sets the ToolTip text for this button.</summary><value>The ToolTip text for this button.</value>
        </member>
        <member name="M:Netron.Neon.InertButton.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.InertButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.InertButton.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.InertButton.OnMouseEnter(System.EventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.InertButton.OnMouseLeave(System.EventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.InertButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.InertButton.OnEnabledChanged(System.EventArgs)">
            <exclude/>
        </member>
        <member name="T:Netron.Neon.AutoHidePane">
            <summary>Represent a <see cref="P:Netron.Neon.AutoHidePane.DockPane" /> displayed in the auto-hide tab strip area of <see cref="T:Netron.Neon.DockPanel" />.</summary><remarks>When customizing the auto-hide tab strip area of the <see cref="T:Netron.Neon.DockPanel" />, you can derive a class from <see cref="T:Netron.Neon.AutoHideStripBase" />
			class, and then plug it into the <see cref="T:Netron.Neon.DockPanel" /> through the <see cref="P:Netron.Neon.DockPanelExtender.AutoHideStripFactory" /> property of <see cref="P:Netron.Neon.DockPanel.Extender" />. If you want to
			associate data with auto-hide <see cref="P:Netron.Neon.AutoHidePane.DockPane" />, you can derived a class from <see cref="T:Netron.Neon.AutoHidePane" /> class,
			then plug it into the <see cref="T:Netron.Neon.DockPanel" /> through <see cref="P:Netron.Neon.DockPanelExtender.AutoHidePaneFactory" /> property of <see cref="P:Netron.Neon.DockPanel.Extender" />. The docking framework
			will create the class instances and you can reference them through 
			<see cref="P:Netron.Neon.AutoHideStripBase.PanesTop" />, <see cref="P:Netron.Neon.AutoHideStripBase.PanesBottom" />,
			<see cref="P:Netron.Neon.AutoHideStripBase.PanesLeft" />, <see cref="P:Netron.Neon.AutoHideStripBase.PanesRight" /> properties
			of class <see cref="T:Netron.Neon.AutoHideStripBase" />.</remarks>
        </member>
        <member name="M:Netron.Neon.AutoHidePane.#ctor(Netron.Neon.DockPane)">
            <summary>Creates a instance of <see cref="T:Netron.Neon.AutoHidePane" /> class.</summary><param name="pane">The <see cref="P:Netron.Neon.AutoHidePane.DockPane" /> object to associate with.</param><remarks>Instance of <see cref="T:Netron.Neon.AutoHidePane" /> or derived class should only be created by the docking framework.
			The constructor should only be called within the implementation of <see cref="T:Netron.Neon.DockPanelExtender.IAutoHidePaneFactory" /> interface or derived class's constructor.</remarks>
        </member>
        <member name="M:Netron.Neon.AutoHidePane.Finalize">
            <exclude/>
        </member>
        <member name="P:Netron.Neon.AutoHidePane.DockPane">
            <summary>Gets the associated <see cref="P:Netron.Neon.AutoHidePane.DockPane" /> object.</summary><value>A <see cref="P:Netron.Neon.AutoHidePane.DockPane" /> object which associates with this <see cref="T:Netron.Neon.AutoHidePane" /> object.</value>
        </member>
        <member name="P:Netron.Neon.AutoHidePane.Tabs">
            <summary>Gets the collection of tabs contained within the auto-hide pane.</summary><value>A <see cref="T:Netron.Neon.AutoHideTabCollection" /> representing the collection of tabs contained within the auto-hide pane.</value>
        </member>
        <member name="M:Netron.Neon.AutoHidePane.Dispose">
            <overloads>
				<summary>Releases the resources used by the <see cref="T:Netron.Neon.AutoHidePane" /> object.</summary>
			</overloads>
            <summary>
				Releases all the resources used by the <see cref="T:Netron.Neon.AutoHidePane" /> object.
			</summary>
        </member>
        <member name="M:Netron.Neon.AutoHidePane.Dispose(System.Boolean)">
            <summary>
				Releases the unmanaged resources used by the <see cref="T:Netron.Neon.AutoHidePane" /> object and optionally releases the managed resources.
			</summary><param name="disposing">
				<B>true</B> to release both managed and unmanaged resources;
				<B>false</B> to release only unmanaged resources.
			</param>
        </member>
        <member name="T:Netron.Neon.AutoHidePaneCollection">
            <summary>Provides methods to manage a collection of <see cref="T:Netron.Neon.AutoHidePane" /> objects.</summary>&gt;
        </member>
        <member name="M:Netron.Neon.AutoHidePaneCollection.GetEnumerator">
            <exclude />
        </member>
        <member name="P:Netron.Neon.AutoHidePaneCollection.DockPanel">
            <summary>Gets the <see cref="P:Netron.Neon.AutoHidePaneCollection.DockPanel" /> contains the <see cref="T:Netron.Neon.AutoHidePaneCollection" />.</summary><value>The <see cref="P:Netron.Neon.AutoHidePaneCollection.DockPanel" /> contains the <see cref="T:Netron.Neon.AutoHidePaneCollection" />.</value>&gt;
        </member>
        <member name="P:Netron.Neon.AutoHidePaneCollection.Count">
            <summary>Gets the number of elements contained in the <see cref="T:Netron.Neon.AutoHidePaneCollection" /> instance.</summary><value>The number of elements contained in the <see cref="T:Netron.Neon.AutoHidePaneCollection" /> instance.</value>&gt;
        </member>
        <member name="P:Netron.Neon.AutoHidePaneCollection.Item(System.Int32)">
            <summary>
			<para>Gets a <see cref="T:Netron.Neon.AutoHidePane" /> at the specified index.</para>
			<para>In C#, this property is the indexer for the <see cref="T:Netron.Neon.AutoHidePaneCollection" /> class.</para>
			</summary>&gt;
        </member>
        <member name="M:Netron.Neon.AutoHidePaneCollection.Contains(Netron.Neon.AutoHidePane)">
            <overloads><summary>Determines whether an element is in the <see cref="T:Netron.Neon.AutoHidePaneCollection" />.</summary></overloads>&gt;
            <summary>Determines whether a <see cref="T:Netron.Neon.AutoHidePane" /> is in the <see cref="T:Netron.Neon.AutoHidePaneCollection" />.</summary><param name="autoHidePane">The <see cref="T:Netron.Neon.AutoHidePane" /> to locate in <see cref="T:Netron.Neon.AutoHidePaneCollection" />.</param><returns><b>true</b> if <paramref name="autoHidePane" /> is found in the <see cref="T:Netron.Neon.AutoHidePaneCollection" />; otherwise, <b>false</b>.</returns>&gt;
        </member>
        <member name="M:Netron.Neon.AutoHidePaneCollection.Contains(Netron.Neon.DockPane)">
            <summary>Determines whether a <see cref="T:Netron.Neon.DockPane" /> is in the <see cref="T:Netron.Neon.AutoHidePaneCollection" />.</summary><param name="pane">The <see cref="T:Netron.Neon.DockPane" /> to locate in <see cref="T:Netron.Neon.AutoHidePaneCollection" />.</param><returns><b>true</b> if <paramref name="pane" /> is found in the <see cref="T:Netron.Neon.AutoHidePaneCollection" />; otherwise, <b>false</b>.</returns>&gt;
        </member>
        <member name="M:Netron.Neon.AutoHidePaneCollection.IndexOf(Netron.Neon.AutoHidePane)">
            <overloads><summary>Searches for the specified element and returns the zero based index within the entire <see cref="T:Netron.Neon.AutoHidePaneCollection" />.</summary></overloads>&gt;
            <summary>Searches for the specified <see cref="T:Netron.Neon.AutoHidePane" /> and returns the zero-based index within the entire <see cref="T:Netron.Neon.AutoHidePaneCollection" />.</summary><param name="autoHidePane">The <see cref="T:Netron.Neon.AutoHidePane" /> to locate in the <see cref="T:Netron.Neon.AutoHidePaneCollection" />.</param><returns>The zero-based index of <paramref name="autoHidePane" /> within the entire <see cref="T:Netron.Neon.AutoHidePaneCollection" />, if found; otherwise, -1.</returns>&gt;
        </member>
        <member name="M:Netron.Neon.AutoHidePaneCollection.IndexOf(Netron.Neon.DockPane)">
            <summary>Searches for the specified <see cref="T:Netron.Neon.DockPane" /> and returns the zero-based index within the entire <see cref="T:Netron.Neon.AutoHidePaneCollection" />.</summary><param name="pane">The <see cref="T:Netron.Neon.DockPane" /> to locate in the <see cref="T:Netron.Neon.AutoHidePaneCollection" />.</param><returns>The zero-based index of <paramref name="pane" /> within the entire <see cref="T:Netron.Neon.AutoHidePaneCollection" />, if found; otherwise, -1.</returns>&gt;
        </member>
        <member name="T:Netron.Neon.AutoHideStripBase">
            <summary>Implements the basic functionality common to auto-hide tab strip of <see cref="P:Netron.Neon.AutoHideStripBase.DockPanel" />.</summary>
        </member>
        <member name="M:Netron.Neon.AutoHideStripBase.#ctor(Netron.Neon.DockPanel)">
            <summary>Creates a instance of <see cref="T:Netron.Neon.AutoHideStripBase" />.</summary><param name="panel">The <see cref="P:Netron.Neon.AutoHideStripBase.DockPanel" /> to associate with.</param>
        </member>
        <member name="P:Netron.Neon.AutoHideStripBase.DockPanel">
            <summary>Gets the associated <see cref="P:Netron.Neon.AutoHideStripBase.DockPanel" />.</summary><value>The associated <see cref="P:Netron.Neon.AutoHideStripBase.DockPanel" />.</value>
        </member>
        <member name="P:Netron.Neon.AutoHideStripBase.PanesTop">
            <summary>Gets a collection of <see cref="T:Netron.Neon.AutoHidePane" /> objects on the top side.</summary><value>A <see cref="T:Netron.Neon.AutoHidePaneCollection" /> contains a collection of <see cref="T:Netron.Neon.AutoHidePane" /> objects on the top side.</value>
        </member>
        <member name="P:Netron.Neon.AutoHideStripBase.PanesBottom">
            <summary>Gets a collection of <see cref="T:Netron.Neon.AutoHidePane" /> objects on the bottom side.</summary><value>A <see cref="T:Netron.Neon.AutoHidePaneCollection" /> contains a collection of <see cref="T:Netron.Neon.AutoHidePane" /> objects on the bottom side.</value>
        </member>
        <member name="P:Netron.Neon.AutoHideStripBase.PanesLeft">
            <summary>Gets a collection of <see cref="T:Netron.Neon.AutoHidePane" /> objects on the left side.</summary><value>A <see cref="T:Netron.Neon.AutoHidePaneCollection" /> contains a collection of <see cref="T:Netron.Neon.AutoHidePane" /> objects on the left side.</value>
        </member>
        <member name="P:Netron.Neon.AutoHideStripBase.PanesRight">
            <summary>Gets a collection of <see cref="T:Netron.Neon.AutoHidePane" /> objects on the right side.</summary><value>A <see cref="T:Netron.Neon.AutoHidePaneCollection" /> contains a collection of <see cref="T:Netron.Neon.AutoHidePane" /> objects on the right side.</value>
        </member>
        <member name="M:Netron.Neon.AutoHideStripBase.GetPanes(Netron.Neon.DockState)">
            <summary>Gets a collection of <see cref="T:Netron.Neon.AutoHidePane" /> objects for the specified docking state.</summary><param name="dockState">Specifies the docking state.</param><return>A <see cref="T:Netron.Neon.AutoHidePaneCollection" /> contains a collection of <see cref="T:Netron.Neon.AutoHidePane" /> ojbects based on the specified docking state.</return>
        </member>
        <member name="P:Netron.Neon.AutoHideStripBase.RectangleTopLeft">
            <summary>Gets the rectangle that represents the top left blank area.</summary><value>A <see cref="T:System.Drawing.Rectangle" /> that represents the top left blank area.</value>
        </member>
        <member name="P:Netron.Neon.AutoHideStripBase.RectangleTopRight">
            <summary>Gets the rectangle that represents the top right blank area.</summary><value>A <see cref="T:System.Drawing.Rectangle" /> that represents the top right blank area.</value>
        </member>
        <member name="P:Netron.Neon.AutoHideStripBase.RectangleBottomLeft">
            <summary>Gets the rectangle that represents the bottom left blank area.</summary><value>A <see cref="T:System.Drawing.Rectangle" /> that represents the bottom left blank area.</value>
        </member>
        <member name="P:Netron.Neon.AutoHideStripBase.RectangleBottomRight">
            <summary>Gets the rectangle that represents the bottom right blank area.</summary><value>A <see cref="T:System.Drawing.Rectangle" /> that represents the bottom right blank area.</value>
        </member>
        <member name="M:Netron.Neon.AutoHideStripBase.GetTabStripRectangle(Netron.Neon.DockState)">
            <summary>Gets the rectangle that represents the tab strip drawing area for the specified docking state.</summary><param name="dockState">Specifies the docking state of the tab strip.</param><returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the tab strip drawing area for the specified docking state.</returns>
        </member>
        <member name="P:Netron.Neon.AutoHideStripBase.DefaultSize">
            <exclude />
        </member>
        <member name="M:Netron.Neon.AutoHideStripBase.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.AutoHideStripBase.OnMouseHover(System.EventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.AutoHideStripBase.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <exclude />
        </member>
        <member name="M:Netron.Neon.AutoHideStripBase.OnRefreshChanges">
            <summary>Invoked when the underlying data has been changed and needs update of the control.</summary><remarks>Derived class should override to update the changes.</remarks>
        </member>
        <member name="M:Netron.Neon.AutoHideStripBase.MeasureHeight">
            <summary>Measures the height of the tab strip.</summary>
        </member>
        <member name="M:Netron.Neon.AutoHideStripBase.GetHitTest(System.Drawing.Point)">
            <!-- No matching elements were found for the following include tag --><include file="CodeDoc/AutoHideStripBase.xml" path="//CodeDoc/Class[@name=&quot;AutoHideStripBase&quot;]/Method[@name=&quot;GetHitTest(Point)&quot;]/*" />
        </member>
        <member name="T:Netron.Neon.AutoHideStripVS2003">
            <summary>Visual Studio 2003 style auto-hide tab strip of <see cref="T:Netron.Neon.DockPanel" />.</summary>
        </member>
        <member name="P:Netron.Neon.AutoHideStripVS2003.StringFormatTabHorizontal">
            <summary>Gets the <see cref="T:System.Drawing.StringFormat" /> for drawing horizontal tab.</summary><value>The <see cref="T:System.Drawing.StringFormat" /> for drawing horizontal tab.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.AutoHideStripVS2003.StringFormatTabVertical">
            <summary>Gets the <see cref="T:System.Drawing.StringFormat" /> for drawing vertical tab.</summary><value>The <see cref="T:System.Drawing.StringFormat" /> for drawing vertical tab.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.AutoHideStripVS2003.ImageHeight">
            <summary>Gets the height of the image for drawing the tab.</summary><value>The height of the image, in pixel, for drawing the tab.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.AutoHideStripVS2003.ImageWidth">
            <summary>Gets the width of the image for drawing the tab.</summary><value>The width of the image, in pixel, for drawing the tab.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.AutoHideStripVS2003.ImageGapTop">
            <summary>Gets the extra space on the top side when drawing the image.</summary><value>The extra space, in pixel, on the top side when drawing the image.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.AutoHideStripVS2003.ImageGapLeft">
            <summary>Gets the extra space on the left side when drawing the image.</summary><value>The extra space, in pixel, on the left side when drawing the image.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.AutoHideStripVS2003.ImageGapRight">
            <summary>Gets the extra space on the right side when drawing the image.</summary><value>The extra space, in pixel, on the right side when drawing the image.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.AutoHideStripVS2003.ImageGapBottom">
            <summary>Gets the extra space on the bottom side when drawing the image.</summary><value>The extra space, in pixel, on the bottom side when drawing the image.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.AutoHideStripVS2003.TextGapLeft">
            <summary>Gets the extra space on the left side when drawing the text.</summary><value>The extra space, in pixel, on the left side when drawing the text.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.AutoHideStripVS2003.TextGapRight">
            <summary>Gets the extra space on the right side when drawing the text.</summary><value>The extra space, in pixel, on the right side when drawing the text.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.AutoHideStripVS2003.TabGapTop">
            <summary>Gets the space between the tab and top side of the strip.</summary><value>The space, in pixel, between the tab and top side of the strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.AutoHideStripVS2003.TabGapLeft">
            <summary>Gets the space between the tab and left side of the strip.</summary><value>The space, in pixel, between the tab and left side of the strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.AutoHideStripVS2003.TabGapBetween">
            <summary>Gets the space between two tabs.</summary><value>The space, in pixel, between two tabs.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.AutoHideStripVS2003.BrushTabBackground">
            <summary>Gets the <see cref="T:System.Drawing.Brush" /> to draw the background of the tab.</summary><value>The <see cref="T:System.Drawing.Brush" /> to draw the background of the tab.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.AutoHideStripVS2003.PenTabBorder">
            <summary>Gets the <see cref="T:System.Drawing.Pen" /> to draw the border of the tab.</summary><value>The <see cref="T:System.Drawing.Pen" /> to draw the border of the tab.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.AutoHideStripVS2003.BrushTabText">
            <summary>Gets the <see cref="T:System.Drawing.Brush" /> to draw the text of the tab.</summary><value>The <see cref="T:System.Drawing.Brush" /> to draw the text of the tab.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="M:Netron.Neon.AutoHideStripVS2003.#ctor(Netron.Neon.DockPanel)">
            <summary>Initializes a instance of <see cref="T:Netron.Neon.AutoHideStripVS2003" /> class.</summary><param name="panel">The associated <see cref="T:Netron.Neon.DockPanel" />.</param>
        </member>
        <member name="M:Netron.Neon.AutoHideStripVS2003.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.AutoHideStripVS2003.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.AutoHideStripVS2003.GetHitTest(System.Drawing.Point)">
            <exclude />
        </member>
        <member name="M:Netron.Neon.AutoHideStripVS2003.MeasureHeight">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.AutoHideStripVS2003.OnRefreshChanges">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.AutoHideStripVS2003.OnBeginDrawTab(Netron.Neon.AutoHideTab)">
            <summary>Invoked when begin to draw the tab.</summary><param name="tab">The tab begin to draw.</param>
        </member>
        <member name="M:Netron.Neon.AutoHideStripVS2003.OnEndDrawTab(Netron.Neon.AutoHideTab)">
            <summary>Invoked when end to draw the tab.</summary><param name="tab">The tab end to draw.</param>
        </member>
        <member name="T:Netron.Neon.AutoHideTab">
            <summary>Represent a <see cref="T:Netron.Neon.DockContent" /> displayed in the auto-hide tab strip area of <see cref="T:Netron.Neon.DockPanel" />.</summary><remarks>When customizing the auto-hide tab strip area of the <see cref="T:Netron.Neon.DockPanel" />, you can derive a class from <see cref="T:Netron.Neon.AutoHideStripBase" />
			class, and then plug it into the <see cref="T:Netron.Neon.DockPanel" /> through the <see cref="P:Netron.Neon.DockPanelExtender.AutoHideStripFactory" /> property of <see cref="P:Netron.Neon.DockPanel.Extender" />. If you want to
			associate data with auto-hide <see cref="T:Netron.Neon.DockContent" />, you can derived a class from <see cref="T:Netron.Neon.AutoHideTab" /> class,
			then plug it into the <see cref="T:Netron.Neon.DockPanel" /> through <see cref="P:Netron.Neon.DockPanelExtender.AutoHideTabFactory" /> property of <see cref="P:Netron.Neon.DockPanel.Extender" />. The docking framework
			will create the class instances and you can reference them through <see cref="P:Netron.Neon.AutoHidePane.Tabs" /> property.</remarks>
        </member>
        <member name="M:Netron.Neon.AutoHideTab.#ctor(Netron.Neon.DockContent)">
            <summary>Creates a instance of <see cref="T:Netron.Neon.AutoHideTab" /> class.</summary><param name="content">The <see cref="T:Netron.Neon.DockContent" /> object to associate with.</param><remarks>Instance of <see cref="T:Netron.Neon.AutoHideTab" /> or derived class should only be created by the docking framework.
			The constructor should only be called within the implementation of <see cref="T:Netron.Neon.DockPanelExtender.IAutoHideTabFactory" /> interface or derived class's constructor.</remarks>
        </member>
        <member name="M:Netron.Neon.AutoHideTab.Finalize">
            <exclude/>
        </member>
        <member name="P:Netron.Neon.AutoHideTab.Content">
            <summary>Gets the associated <see cref="T:Netron.Neon.DockContent" /> object.</summary><value>A <see cref="T:Netron.Neon.DockContent" /> object which associates with this <see cref="T:Netron.Neon.AutoHideTab" /> object.</value>
        </member>
        <member name="M:Netron.Neon.AutoHideTab.Dispose">
            <overloads>
				<summary>Releases the resources used by the <see cref="T:Netron.Neon.AutoHideTab" /> object.</summary>
			</overloads>
            <summary>
				Releases all the resources used by the <see cref="T:Netron.Neon.AutoHideTab" /> object.
			</summary>
        </member>
        <member name="M:Netron.Neon.AutoHideTab.Dispose(System.Boolean)">
            <summary>
				Releases the unmanaged resources used by the <see cref="T:Netron.Neon.AutoHideTab" /> object and optionally releases the managed resources.
			</summary><param name="disposing">
				<B>true</B> to release both managed and unmanaged resources;
				<B>false</B> to release only unmanaged resources.
			</param>
        </member>
        <member name="T:Netron.Neon.AutoHideTabCollection">
            <summary>Provides methods to manage a collection of <see cref="T:Netron.Neon.AutoHideTab" /> objects.</summary>&gt;
        </member>
        <member name="M:Netron.Neon.AutoHideTabCollection.GetEnumerator">
            <exclude />
        </member>
        <member name="P:Netron.Neon.AutoHideTabCollection.AutoHidePane">
            <summary>Gets the <see cref="P:Netron.Neon.AutoHideTabCollection.AutoHidePane" /> contains the <see cref="T:Netron.Neon.AutoHideTabCollection" />.</summary><value>The <see cref="P:Netron.Neon.AutoHideTabCollection.AutoHidePane" /> contains the <see cref="T:Netron.Neon.AutoHideTabCollection" />.</value>&gt;
        </member>
        <member name="P:Netron.Neon.AutoHideTabCollection.DockPane">
            <summary>Gets the <see cref="P:Netron.Neon.AutoHideTabCollection.DockPane" /> associates with the <see cref="P:Netron.Neon.AutoHideTabCollection.AutoHidePane" /> instance.</summary><value>The <see cref="P:Netron.Neon.AutoHideTabCollection.DockPane" /> associates with the <see cref="P:Netron.Neon.AutoHideTabCollection.AutoHidePane" /> instance.</value>&gt;
        </member>
        <member name="P:Netron.Neon.AutoHideTabCollection.DockPanel">
            <summary>Gets the <see cref="P:Netron.Neon.AutoHideTabCollection.DockPanel" /> associates with the <see cref="P:Netron.Neon.AutoHideTabCollection.AutoHidePane" /> instance.</summary><value>The <see cref="P:Netron.Neon.AutoHideTabCollection.DockPanel" /> associates with the <see cref="P:Netron.Neon.AutoHideTabCollection.AutoHidePane" /> instance.</value>&gt;
        </member>
        <member name="P:Netron.Neon.AutoHideTabCollection.Count">
            <summary>Gets the number of elements contained in the <see cref="T:Netron.Neon.AutoHideTabCollection" /> instance.</summary><value>The number of elements contained in the <see cref="T:Netron.Neon.AutoHideTabCollection" /> instance.</value>&gt;
        </member>
        <member name="P:Netron.Neon.AutoHideTabCollection.Item(System.Int32)">
            <summary>
			<para>Gets a <see cref="T:Netron.Neon.AutoHideTab" /> at the specified index.</para>
			<para>In C#, this property is the indexer for the <see cref="T:Netron.Neon.AutoHideTabCollection" /> class.</para>
			</summary>&gt;
        </member>
        <member name="M:Netron.Neon.AutoHideTabCollection.Contains(Netron.Neon.AutoHideTab)">
            <overloads><summary>Determines whether an element is in the <see cref="T:Netron.Neon.AutoHideTabCollection" />.</summary></overloads>&gt;
            <summary>Determines whether a <see cref="T:Netron.Neon.AutoHideTab" /> is in the <see cref="T:Netron.Neon.AutoHideTabCollection" />.</summary><param name="tab">The <see cref="T:Netron.Neon.AutoHideTab" /> to locate in <see cref="T:Netron.Neon.AutoHideTabCollection" />.</param><returns><b>true</b> if <paramref name="tab" /> is found in the <see cref="T:Netron.Neon.AutoHideTabCollection" />; otherwise, <b>false</b>.</returns>&gt;
        </member>
        <member name="M:Netron.Neon.AutoHideTabCollection.Contains(Netron.Neon.DockContent)">
            <summary>Determines whether a <see cref="T:Netron.Neon.DockContent" /> is in the <see cref="T:Netron.Neon.AutoHideTabCollection" />.</summary><param name="content">The <see cref="T:Netron.Neon.DockContent" /> to locate in <see cref="T:Netron.Neon.AutoHideTabCollection" />.</param><returns><b>true</b> if <paramref name="content" /> is found in the <see cref="T:Netron.Neon.AutoHideTabCollection" />; otherwise, <b>false</b>.</returns>&gt;
        </member>
        <member name="M:Netron.Neon.AutoHideTabCollection.IndexOf(Netron.Neon.AutoHideTab)">
            <overloads><summary>Searches for the specified element and returns the zero based index within the entire <see cref="T:Netron.Neon.AutoHideTabCollection" />.</summary></overloads>&gt;
            <summary>Searches for the specified <see cref="T:Netron.Neon.AutoHideTab" /> and returns the zero-based index within the entire <see cref="T:Netron.Neon.AutoHideTabCollection" />.</summary><param name="tab">The <see cref="T:Netron.Neon.AutoHideTab" /> to locate in the <see cref="T:Netron.Neon.AutoHideTabCollection" />.</param><returns>The zero-based index of <paramref name="tab" /> within the entire <see cref="T:Netron.Neon.AutoHideTabCollection" />, if found; otherwise, -1.</returns>&gt;
        </member>
        <member name="M:Netron.Neon.AutoHideTabCollection.IndexOf(Netron.Neon.DockContent)">
            <summary>Searches for the specified <see cref="T:Netron.Neon.DockContent" /> and returns the zero-based index within the entire <see cref="T:Netron.Neon.AutoHideTabCollection" />.</summary><param name="content">The <see cref="T:Netron.Neon.DockContent" /> to locate in the <see cref="T:Netron.Neon.AutoHideTabCollection" />.</param><returns>The zero-based index of <paramref name="content" /> within the entire <see cref="T:Netron.Neon.AutoHideTabCollection" />, if found; otherwise, -1.</returns>&gt;
        </member>
        <member name="T:Netron.Neon.DisplayingDockList">
            <summary>Maintains a list of visible nested docking <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</summary><remarks>
				<para>
				<b>IDockListContainer</b> contains a list of <b>DockPane</b> objects
				for nested docking. It maintans two lists: <see cref="!:WeifenLuo.WinFormsUI.DockList" />
				and <see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" />. <b>DockList</b>
				contains all <b>DockPane</b> objects, no matter it's visible or not; <b>DisplayingDockList</b> contains only
				visible <b>DockPane</b> objects for this container.
			</para><para>
				Internally, <b>IDockListContainer</b> creates <b>DockList</b>, this <b>DockList</b> then creates <b>DisplayingDockList</b>,
				and these two lists are always synchronized.
			</para>
			</remarks><seealso cref="!:WeifenLuo.WinFormsUI.DockPane">DockPane Class</seealso>
        </member>
        <member name="P:Netron.Neon.DisplayingDockList.DockList">
            <summary>Gets the associated <b>DockList</b> object.</summary><value>A <see cref="!:WeifenLuo.WinFormsUI.DockList" /> object which associates with this <B>DisplayingDockList</B> object.</value>
        </member>
        <member name="P:Netron.Neon.DisplayingDockList.Container">
            <summary>Gets the container which owns the associated <see cref="!:WeifenLuo.WinFormsUI.DockList" /> object.</summary><value>A <see cref="!:WeifenLuo.WinFormsUI.IDockListContainer" /> which contains the associated
			<see cref="!:WeifenLuo.WinFormsUI.DockList" /> object.</value><seealso cref="!:WeifenLuo.WinFormsUI.DockList">DockList Class</seealso>
        </member>
        <member name="P:Netron.Neon.DisplayingDockList.DockState">
            <summary>Gets the docking state from the <see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList.Container" />.</summary><value>One of the <see cref="!:WeifenLuo.WinFormsUI.DockState" /> values.</value>
        </member>
        <member name="P:Netron.Neon.DisplayingDockList.IsFloat">
            <summary>Determines whether the the <see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList.Container" /> is floating.</summary><value><b>True</b> if is floating; otherwise, <b>false</b>.</value>
        </member>
        <member name="M:Netron.Neon.DisplayingDockList.Contains(Netron.Neon.DockPane)">
            <summary>
			Determines whether a <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> is in the
			<see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" />.
		</summary><param name="pane">
			The <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to locate in
			<see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" />.
		</param><returns>
			<b>true</b> if <paramref name="pane" /> is found in the
			<see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" />;
			otherwise, <b>false</b>.
		</returns>
        </member>
        <member name="M:Netron.Neon.DisplayingDockList.IndexOf(Netron.Neon.DockPane)">
            <summary>
			Searches for the specified <see cref="!:WeifenLuo.WinFormsUI.DockPane" />
			and returns the zero-based index within the entire
			<see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" />.
		</summary><param name="pane">
			The <see cref="!:WeifenLuo.WinFormsUI.DockPane" />
			to locate in the <see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" />
		</param><returns>
			The zero-based index of <paramref name="pane" /> within the entire
			<see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" />, if found;
			otherwise, -1.
		</returns>
        </member>
        <member name="P:Netron.Neon.DisplayingDockList.Item(System.Int32)">
            <summary>
				<para>Gets a <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> at the specified index.</para>
				<para>In C#, this property is the indexer for the <see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" /> class.</para>
			</summary><param name="index">
			The zero-based <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to get.
		</param><value>
			The <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> at the specified index.
		</value>
        </member>
        <member name="T:Netron.Neon.DockContent">
            <summary>The smallest dockable unit within the docking framework.</summary><remarks>
				<para>
					<see cref="T:Netron.Neon.DockContent" /> derives from <see cref="T:System.Windows.Forms.Form" /> class.
					To use the DockPanel library, derive your form from <see cref="T:Netron.Neon.DockContent" /> class,
					and implement your user interface in this class. There are several overloaded
					<see cref="M:Netron.Neon.DockContent.Show" /> methods to show <see cref="T:Netron.Neon.DockContent" /> as specified docking state.
					If <see cref="!:WeifenLuo.WinFormsUI.DockPanel.MdiIntegration" /> property is set to <b>true</b> and <see cref="P:Netron.Neon.DockContent.DockState" />
					is <see cref="!:WeifenLuo.WinFormsUI.DockState.Document" />, the menu of the form will be merged into to the main form automatically.
				</para>
			</remarks>
        </member>
        <member name="M:Netron.Neon.DockContent.#ctor">
            <summary>Initialize a new DockContent instance.</summary>
        </member>
        <member name="M:Netron.Neon.DockContent.Dispose(System.Boolean)">
            <exclude/>
        </member>
        <member name="P:Netron.Neon.DockContent.AllowRedocking">
            <summary>Gets or sets to specify whether drag and drop re-docking is allowed.</summary><value><b>True</b> if drag and drop re-docking is allowed, otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Netron.Neon.DockContent.DockableAreas">
            <summary>Gets or sets to specify the areas this DockContent can be displayed.</summary><value>
				Combination of <see cref="T:Netron.Neon.DockAreas" /> values.
				If <see cref="P:Netron.Neon.DockContent.DockState" /> conflicts with this value, a exception will be thrown.
			</value>
        </member>
        <member name="P:Netron.Neon.DockContent.AutoHidePortion">
            <summary>Gets or sets to specify the portion of the screen size when showing in auto-hide mode.</summary><value>A value between 0 and 1 to specify the portion of the DockPanel to determine the size of the window when
			displaying in auto-hide mode. The default value is 0.25 (25%).</value><exception cref="T:System.ArgumentOutOfRangeException">Thrown when value is not between 0 and 1.</exception>
        </member>
        <member name="P:Netron.Neon.DockContent.TabText">
            <summary>Gets or sets the text to display for the DockPane tab strip.</summary><value>The text to display for the DockPane tab strip.</value><remarks>If this value is not set, the value of <see cref="P:System.Windows.Forms.Control.Text" /> will be used.</remarks>
        </member>
        <member name="P:Netron.Neon.DockContent.CloseButton">
            <summary>Gets or sets to enalbe/disable the close button for this DockContent in the DockPane.</summary><value><b>True</b> to enable the close button; <b>false</b> to disable.</value>
        </member>
        <member name="P:Netron.Neon.DockContent.DockPanel">
            <summary>Gets or sets to attach/detach the DockContent to DockPanel.</summary><value><see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> object to attach. <b>Null</b> to detach this DockContent to any DockPanel.</value>
        </member>
        <member name="P:Netron.Neon.DockContent.DockState">
            <summary>Gets or sets the docking state of <see cref="!:WeifenLuo.WinFormsUI.DockContent" />.</summary><value>
				One of the <see cref="!:WeifenLuo.WinFormsUI.DockState" /> values:
				<list type="table">
					<listheader>
						<term>Value</term>
						<term>Description</term>
					</listheader>
					<item>
						<description>
							<see cref="!:WeifenLuo.WinFormsUI.DockState.Unknown" />
						</description>
						<description>Valid only when the <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> is newly
						initialized or detached from <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />. Can not
						be explicitly set.</description>
					</item>
					<item>
						<description>
							<see cref="!:WeifenLuo.WinFormsUI.DockState.Hidden" />
						</description>
						<description>Synchronized with the <see cref="!:WeifenLuo.WinFormsUI.DockContent.IsHidden" /> property.</description>
					</item>
					<item>
						<description>
							<b>Others</b>
						</description>
						<description>Synchronized with the docking state of
						<see cref="!:WeifenLuo.WinFormsUI.DockContent.Pane" />.</description>
					</item>
				</list>
			</value><remarks>
				A <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object can have two containing
				<see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects: <see cref="!:WeifenLuo.WinFormsUI.DockContent.PanelPane" /> and
				<see cref="!:WeifenLuo.WinFormsUI.DockContent.FloatPane" />. The <see cref="!:WeifenLuo.WinFormsUI.DockContent.Pane" />
				property returns currently displaying containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" />. The docking state of a
				<see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object is always synchronized with its displaying containing
				<see cref="!:WeifenLuo.WinFormsUI.DockPane" />.
			</remarks>
        </member>
        <member name="P:Netron.Neon.DockContent.Pane">
            <summary>Gets or sets the displayed containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> object.</summary><value>The currently displayed containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> object.</value><remarks>
				A <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object can have two containing
				<see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects: <see cref="!:WeifenLuo.WinFormsUI.DockContent.PanelPane" /> and
				<see cref="!:WeifenLuo.WinFormsUI.DockContent.FloatPane" />. The <see cref="!:WeifenLuo.WinFormsUI.DockContent.Pane" />
				property returns currently displaying containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" />. The docking state of a
				<see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object is always synchronized with its displaying containing
				<see cref="!:WeifenLuo.WinFormsUI.DockPane" />.
			</remarks>
        </member>
        <member name="P:Netron.Neon.DockContent.IsHidden">
            <summary>Gets or sets whether the DockContent object is hidden.</summary><value><b>True</b> if the DockContent object is hidden; otherwise, false.</value>
        </member>
        <member name="P:Netron.Neon.DockContent.VisibleState">
            <summary>Gets or sets the visible docking state for this form.</summary><value>One of the <see cref="!:WeifenLuo.WinFormsUI.DockState" /> values for visible docking state of this form.</value>
        </member>
        <member name="P:Netron.Neon.DockContent.IsFloat">
            <summary>Gets or sets whether the DockContent object is floating.</summary><value><b>True</b> if the DockContent object is floating; otherwise, false.</value>
        </member>
        <member name="P:Netron.Neon.DockContent.PanelPane">
            <summary>Gets or sets the containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> object when docked.</summary><value>The containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> object when docked.</value><remarks>
				A <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object can have two containing
				<see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects: <see cref="!:WeifenLuo.WinFormsUI.DockContent.PanelPane" /> and
				<see cref="!:WeifenLuo.WinFormsUI.DockContent.FloatPane" />. The <see cref="!:WeifenLuo.WinFormsUI.DockContent.Pane" />
				property returns currently displaying containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" />. The docking state of a
				<see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object is always synchronized with its displaying containing
				<see cref="!:WeifenLuo.WinFormsUI.DockPane" />.
			</remarks>
        </member>
        <member name="P:Netron.Neon.DockContent.FloatPane">
            <summary>Gets or sets the containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> object when floating.</summary><value>The containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> object when floating.</value><remarks>
				A <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object can have two containing
				<see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects: <see cref="!:WeifenLuo.WinFormsUI.DockContent.PanelPane" /> and
				<see cref="!:WeifenLuo.WinFormsUI.DockContent.FloatPane" />. The <see cref="!:WeifenLuo.WinFormsUI.DockContent.Pane" />
				property returns currently displaying containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" />. The docking state of a
				<see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object is always synchronized with its displaying containing
				<see cref="!:WeifenLuo.WinFormsUI.DockPane" />.
			</remarks>
        </member>
        <member name="M:Netron.Neon.DockContent.GetPersistString">
            <summary>Gets the string to persist this DockContent object.</summary><returns>The string to persist this DockContent object.</returns><remarks>
			<para>
				The layout of <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />
				can be saved to and loaded from XML data by calling
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.SaveAsXml" /> and
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.LoadFromXml" />.
				When saving, the system will persist the <see cref="!:WeifenLuo.WinFormsUI.DockContent" />
				object to a string by calling its 
				<see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" /> method;
				when loading, the system will call the <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				call back to get the instance of <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object.
			</para>
			<para>
				The default implementation of <see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" />
				returns the type name of the <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> class. You can overwrite
				this method for your own implementation.
			</para>
			<para>
				You always need to provide a <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				callback when loading the layout.
			</para>
		</remarks>
        </member>
        <member name="P:Netron.Neon.DockContent.HideOnClose">
            <summary>Gets or sets to determine when clicking the close button, the DockContent form should be closed or hidden.</summary><value><b>True</b> to hide the form when clicking the close button; otherwise, <b>false</b>. The default value is <b>false</b>.</value>
        </member>
        <member name="P:Netron.Neon.DockContent.Menu">
            <exclude/>
        </member>
        <member name="P:Netron.Neon.DockContent.ShowHint">
            <summary>Gets or sets the desired docking state for this DockContent object.</summary><value>One of the valid <see cref="!:WeifenLuo.WinFormsUI.DockState" /> values. This value should not
			conflicts with <see cref="!:WeifenLuo.WinFormsUI.DockContent.DockableAreas" /> property.</value>
        </member>
        <member name="P:Netron.Neon.DockContent.IsActivated">
            <summary>Gets to specified the DockContent object is currently activated.</summary><value><b>True</b> if the DockContent object is currently activated, otherwise, <b>false</b>.</value>
        </member>
        <member name="M:Netron.Neon.DockContent.IsDockStateValid(Netron.Neon.DockState)">
            <summary>Test with <see cref="!:WeifenLuo.WinFormsUI.DockContent.DockableAreas" /> to see whether the specified
			<see cref="!:WeifenLuo.WinFormsUI.DockState" /> is valid.</summary><param name="dockState">The specified <see cref="!:WeifenLuo.WinFormsUI.DockState" /> value to test.</param>
        </member>
        <member name="P:Netron.Neon.DockContent.TabPageContextMenu">
            <summary>Gets or sets the context menu for the DockPane tab page.</summary><value>The <see cref="T:System.Windows.Forms.ContextMenu" /> for the DockPane tab page.</value>
        </member>
        <member name="P:Netron.Neon.DockContent.ToolTipText">
            <summary>Gets or sets the tooltip text for this form.</summary><value>The tooltip text for this form.</value>
        </member>
        <member name="M:Netron.Neon.DockContent.Activate">
            <summary>Activates the DockContent form and gives it focus.</summary><remarks>Activating the DockContent form makes it the <see cref="!:WeifenLuo.WinFormsUI.DockPane.ActiveContent" /> of its
			containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" />. To determine the active DockContent in an application,
			use <see cref="!:WeifenLuo.WinFormsUI.DockPanel.ActiveContent" /> property. To determine the active document
			content, use <see cref="!:WeifenLuo.WinFormsUI.DockPanel.ActiveDocument" /> property.</remarks>
        </member>
        <member name="M:Netron.Neon.DockContent.Hide">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.DockContent.Show">
            <overloads>
				<summary>Displays the form. Overloaded.</summary>
			</overloads>
            <summary>Displays the form, with default settings.</summary><remarks>If <see cref="!:WeifenLuo.WinFormsUI.DockContent.DockPanel" /> property is set, the form
			will be displayed as <see cref="!:WeifenLuo.WinFormsUI.DockContent.ShowHint" /> docking state;
			otherwise it will be displayed as normal form.</remarks>
        </member>
        <member name="M:Netron.Neon.DockContent.Show(Netron.Neon.DockPanel)">
            <summary>Displays the form, attaching to specified DockPanel.</summary><param name="dockPanel">The <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> object to attach.</param>
        </member>
        <member name="M:Netron.Neon.DockContent.Show(Netron.Neon.DockPanel,Netron.Neon.DockState)">
            <summary>Displays the form, with specified docking state.</summary><param name="dockPanel">The <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> object to attach.</param><param name="dockState">The docking state to display.</param>
        </member>
        <member name="M:Netron.Neon.DockContent.Show(Netron.Neon.DockPanel,System.Drawing.Rectangle)">
            <summary>Displays the form, as floating window at the specified location and size.</summary><param name="dockPanel">The <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> object to attach.</param><param name="floatWindowBounds">The bounds of the floating window.</param>
        </member>
        <member name="M:Netron.Neon.DockContent.Show(Netron.Neon.DockPane,Netron.Neon.DockContent)">
            <summary>Displays the form, at the specified tab location of DockPane</summary><param name="pane">The target <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to contain this DockContent.</param><param name="beforeContent">The position to show in the tab strip of the <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.
			<b>Null</b> to show at the last position in the tab strip.
			</param>
        </member>
        <member name="M:Netron.Neon.DockContent.Show(Netron.Neon.DockPane,Netron.Neon.DockAlignment,System.Double)">
            <summary>Displays the form, as specified nested docking.</summary><param name="prevPane">The target <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to dock.</param><param name="alignment">The edge of the target <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to dock.</param><param name="proportion">The proportion size of the source <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to take
			inside the target <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</param>
        </member>
        <member name="M:Netron.Neon.DockContent.OnClosed(System.EventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.DockContent.OnTextChanged(System.EventArgs)">
            <exclude/>
        </member>
        <member name="E:Netron.Neon.DockContent.DockStateChanged">
            <summary>Occurs when the <see cref="!:WeifenLuo.WinFormsUI.DockContent.DockState" /> property changed.</summary>
        </member>
        <member name="M:Netron.Neon.DockContent.OnDockStateChanged(System.EventArgs)">
            <summary>Raises the <see cref="!:WeifenLuo.WinFormsUI.DockContent.DockStateChanged" /> event.</summary><param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="T:Netron.Neon.DockContentCollection">
            <summary>Provides methods to manage a collection of <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> objects.</summary>&gt;
        </member>
        <member name="P:Netron.Neon.DockContentCollection.Item(System.Int32)">
            <summary>
			<para>Gets a <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> at the specified index.</para>
			<para>In C#, this property is the indexer for the <see cref="!:WeifenLuo.WinFormsUI.DockContentCollection" /> class.</para>
			</summary>&gt;
        </member>
        <member name="M:Netron.Neon.DockContentCollection.Contains(Netron.Neon.DockContent)">
            <summary>
			Determines whether a <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> is in the
			<see cref="!:WeifenLuo.WinFormsUI.DockContentCollection" />.
		</summary><param name="content">
			The <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> to locate in
			<see cref="!:WeifenLuo.WinFormsUI.DockContentCollection" />.
		</param><returns>
			<b>true</b> if <paramref name="content" /> is found in the
			<see cref="!:WeifenLuo.WinFormsUI.DockContentCollection" />;
			otherwise, <b>false</b>.
		</returns>
        </member>
        <member name="P:Netron.Neon.DockContentCollection.Count">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.DockContentCollection.IndexOf(Netron.Neon.DockContent)">
            <summary>
			Searches for the specified <see cref="!:WeifenLuo.WinFormsUI.DockContent" />
			and returns the zero-based index within the entire
			<see cref="!:WeifenLuo.WinFormsUI.DockContentCollection" />.
		</summary><param name="content">
			The <see cref="!:WeifenLuo.WinFormsUI.DockContent" />
			to locate in the <see cref="!:WeifenLuo.WinFormsUI.DockContentCollection" />
		</param><returns>
			The zero-based index of <paramref name="content" /> within the entire
			<see cref="!:WeifenLuo.WinFormsUI.DockContentCollection" />, if found;
			otherwise, -1.
		</returns>
        </member>
        <member name="T:Netron.Neon.DockList">
            <summary>Maintains a list of nested docking <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</summary><remarks>
				<para>
				<b>IDockListContainer</b> contains a list of <b>DockPane</b> objects
				for nested docking. It maintans two lists: <see cref="!:WeifenLuo.WinFormsUI.DockList" />
				and <see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" />. <b>DockList</b>
				contains all <b>DockPane</b> objects, no matter it's visible or not; <b>DisplayingDockList</b> contains only
				visible <b>DockPane</b> objects for this container.
			</para><para>
				Internally, <b>IDockListContainer</b> creates <b>DockList</b>, this <b>DockList</b> then creates <b>DisplayingDockList</b>,
				and these two lists are always synchronized.
			</para>
			</remarks><seealso cref="!:WeifenLuo.WinFormsUI.DockPane">DockPane Class</seealso>
        </member>
        <member name="P:Netron.Neon.DockList.Container">
            <summary>Gets the container which owns this <see cref="!:WeifenLuo.WinFormsUI.DockList" /> object.</summary><value>A <see cref="!:WeifenLuo.WinFormsUI.IDockListContainer" /> which contains this <see cref="!:WeifenLuo.WinFormsUI.DockList" /> object.</value><seealso cref="!:WeifenLuo.WinFormsUI.DisplayingDockList">DisplayingDockList Class</seealso>
        </member>
        <member name="P:Netron.Neon.DockList.DisplayingList">
            <summary>Gets the associated <b>DisplayingDockList</b> object.</summary><value>A <see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" /> object which associates with this <B>DockList</B> object.</value>
        </member>
        <member name="P:Netron.Neon.DockList.DockState">
            <summary>Gets the docking state from the <see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList.Container" />.</summary><value>One of the <see cref="!:WeifenLuo.WinFormsUI.DockState" /> values.</value>
        </member>
        <member name="P:Netron.Neon.DockList.IsFloat">
            <summary>Determines whether the the <see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList.Container" /> is floating.</summary><value><b>True</b> if is floating; otherwise, <b>false</b>.</value>
        </member>
        <member name="M:Netron.Neon.DockList.Contains(Netron.Neon.DockPane)">
            <summary>
			Determines whether a <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> is in the
			<see cref="!:WeifenLuo.WinFormsUI.DockList" />.
		</summary><param name="pane">
			The <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to locate in
			<see cref="!:WeifenLuo.WinFormsUI.DockList" />.
		</param><returns>
			<b>true</b> if <paramref name="pane" /> is found in the
			<see cref="!:WeifenLuo.WinFormsUI.DockList" />;
			otherwise, <b>false</b>.
		</returns>
        </member>
        <member name="M:Netron.Neon.DockList.IndexOf(Netron.Neon.DockPane)">
            <summary>
			Searches for the specified <see cref="!:WeifenLuo.WinFormsUI.DockPane" />
			and returns the zero-based index within the entire
			<see cref="!:WeifenLuo.WinFormsUI.DockList" />.
		</summary><param name="pane">
			The <see cref="!:WeifenLuo.WinFormsUI.DockPane" />
			to locate in the <see cref="!:WeifenLuo.WinFormsUI.DockList" />
		</param><returns>
			The zero-based index of <paramref name="pane" /> within the entire
			<see cref="!:WeifenLuo.WinFormsUI.DockList" />, if found;
			otherwise, -1.
		</returns>
        </member>
        <member name="P:Netron.Neon.DockList.Item(System.Int32)">
            <summary>
				<para>Gets a <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> at the specified index.</para>
				<para>In C#, this property is the indexer for the <see cref="!:WeifenLuo.WinFormsUI.DockList" /> class.</para>
			</summary><param name="index">
			The zero-based <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to get.
		</param><value>
			The <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> at the specified index.
		</value>
        </member>
        <member name="M:Netron.Neon.DockList.GetDefaultPrevPane(Netron.Neon.DockPane)">
            <summary>
			Gets the default <see cref="!:WeifenLuo.WinFormsUI.DockPane" />
			in this	<see cref="!:WeifenLuo.WinFormsUI.DockList" /> to dock inside.
		</summary><param name="pane">
			The <see cref="!:WeifenLuo.WinFormsUI.DockPane" />
			to add to this <see cref="!:WeifenLuo.WinFormsUI.DockList" />.
		</param><returns>
			The default <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> for <paramref name="pane" /> to dock inside,
			<b>null</b> if this	<see cref="!:WeifenLuo.WinFormsUI.DockList" /> is empty.
		</returns>
        </member>
        <member name="T:Netron.Neon.DockPane">
            <summary>The containing window for a collection of <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms
			displayed in a tabbed manner.</summary><remarks>
				<para>
				A <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object can be added to the
				<see cref="!:WeifenLuo.WinFormsUI.DockPane" /> by various of ways:
				<list type="number">
						<item>
							<description>Calling one of <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> class's constructors,
					providing the <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object as parameter.
					</description>
						</item>
						<item>
							<description>Explicitly setting one of the
					<see cref="!:WeifenLuo.WinFormsUI.DockContent.Pane" />,
					<see cref="!:WeifenLuo.WinFormsUI.DockContent.PanelPane" /> or
					<see cref="!:WeifenLuo.WinFormsUI.DockContent.FloatPane" /> properties
					of <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> class.
					</description>
						</item>
						<item>
							<description>Implicitly setting the docking state of the <see cref="!:WeifenLuo.WinFormsUI.DockContent" />,
					for example, calling one of the <see cref="!:WeifenLuo.WinFormsUI.DockContent.Show" /> methods.
					</description>
						</item>
					</list>
					You can access the contained collection of
					<see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms through the
					<see cref="!:WeifenLuo.WinFormsUI.DockPane.Contents" /> property of class
					<see cref="!:WeifenLuo.WinFormsUI.DockPane" />, and you can access a
					<see cref="!:WeifenLuo.WinFormsUI.DockContent" />'s containing
					<see cref="!:WeifenLuo.WinFormsUI.DockPane" /> through its
					<see cref="!:WeifenLuo.WinFormsUI.DockContent.Pane" />,
					<see cref="!:WeifenLuo.WinFormsUI.DockContent.PanelPane" /> or
					<see cref="!:WeifenLuo.WinFormsUI.DockContent.FloatPane" /> properties.					
				</para><para>If there is no <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> in
				this <see cref="!:WeifenLuo.WinFormsUI.DockPane" />,
				this <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> will be disposed automatically.
				</para>
				<para>
				There are two types of <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> in appearance:
				<see cref="F:Netron.Neon.DockPane.AppearanceStyle.ToolWindow" /> and <see cref="F:Netron.Neon.DockPane.AppearanceStyle.Document" />, 
				determined by the docking state of the <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.
				</para>
				<para>
				You can derive your own class from <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to make
				your own customizations. If so, you need to override the <see cref="!:WeifenLuo.WinFormsUI.DockPanel.DockPaneFactory" />
				property to return the instance of your own class.
				</para>
			</remarks>
        </member>
        <member name="T:Netron.Neon.DockPane.AppearanceStyle">
            <summary>Specifies the appearance style of <see cref="T:Netron.Neon.DockPane" />.</summary>
        </member>
        <member name="F:Netron.Neon.DockPane.AppearanceStyle.ToolWindow">
            <summary>Tool window style <see cref="T:Netron.Neon.DockPane" />.</summary>
        </member>
        <member name="F:Netron.Neon.DockPane.AppearanceStyle.Document">
            <summary>Document style <see cref="T:Netron.Neon.DockPane" />.</summary>
        </member>
        <member name="M:Netron.Neon.DockPane.#ctor(Netron.Neon.DockContent,Netron.Neon.DockState,System.Boolean)">
            <overloads>
				<summary>Initializes a new instance of DockPane class.</summary>
			</overloads>
            <summary>Initializes a new instance of DockPane class, with specified visible docking state.</summary><param name="content">The first DockContent for this DockPane.</param><param name="visibleState">The visible docking state for this DockPane.</param><param name="show"><b>True</b> to show the <paramref name="content" />, otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Netron.Neon.DockPane.#ctor(Netron.Neon.DockContent,Netron.Neon.FloatWindow,System.Boolean)">
            <summary>Initializes a new instance of DockPane class, as nested docking to specified FloatWindow.</summary><param name="content">The first DockContent for this DockPane.</param><param name="floatWindow">The <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" /> for nested docking.</param><param name="show"><b>True</b> to show the <paramref name="content" />, otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Netron.Neon.DockPane.#ctor(Netron.Neon.DockContent,Netron.Neon.DockPane,Netron.Neon.DockAlignment,System.Double,System.Boolean)">
            <summary>Initializes a new instance of DockPane class, as specified nested docking.</summary><param name="content">The first DockContent for this DockPane.</param><param name="prevPane">The target <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to dock.</param><param name="alignment">The edge of the target <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to dock.</param><param name="proportion">The proportion size of the source <see cref="!:WeifenLuo.WinFormsUI.DockPane" />
			to take inside the target <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</param><param name="show"><b>True</b> to show the <paramref name="content" />, otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Netron.Neon.DockPane.#ctor(Netron.Neon.DockContent,System.Drawing.Rectangle,System.Boolean)">
            <summary>Initializes a new instance of DockPane class, as floating at the specified bounds.</summary><param name="content">The first DockContent for this DockPane.</param><param name="floatWindowBounds">The bounds of the floating window.</param><param name="show"><b>True</b> to show the <paramref name="content" />, otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Netron.Neon.DockPane.Dispose(System.Boolean)">
            <exclude/>
        </member>
        <member name="P:Netron.Neon.DockPane.ActiveContent">
            <summary>Gets or sets the currently active <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> form.</summary><value>The currently active <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> form.</value>
        </member>
        <member name="P:Netron.Neon.DockPane.AllowRedocking">
            <summary>Gets or sets to specify whether drag and drop re-docking is allowed.</summary><value><b>True</b> if drag and drop re-docking is allowed, otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Netron.Neon.DockPane.CaptionText">
            <summary>Gets the text displayed for the caption.</summary><value>The text displayed for the caption.</value><remarks>The default implementation returns the <see cref="P:System.Windows.Forms.Control.Text" /> property
			of current active <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> form. You can override this
			property to provide your own implementation.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPane.Contents">
            <summary>Gets the collection of contained <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.DockContentCollection" /> which contains all the
			<see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms for this <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</value><remarks>
				<para>
				A <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object can be added to the
				<see cref="!:WeifenLuo.WinFormsUI.DockPane" /> by various of ways:
				<list type="number">
						<item>
							<description>Calling one of <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> class's constructors,
					providing the <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object as parameter.
					</description>
						</item>
						<item>
							<description>Explicitly setting one of the
					<see cref="!:WeifenLuo.WinFormsUI.DockContent.Pane" />,
					<see cref="!:WeifenLuo.WinFormsUI.DockContent.PanelPane" /> or
					<see cref="!:WeifenLuo.WinFormsUI.DockContent.FloatPane" /> properties
					of <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> class.
					</description>
						</item>
						<item>
							<description>Implicitly setting the docking state of the <see cref="!:WeifenLuo.WinFormsUI.DockContent" />,
					for example, calling one of the <see cref="!:WeifenLuo.WinFormsUI.DockContent.Show" /> methods.
					</description>
						</item>
					</list>
					You can access the contained collection of
					<see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms through the
					<see cref="!:WeifenLuo.WinFormsUI.DockPane.Contents" /> property of class
					<see cref="!:WeifenLuo.WinFormsUI.DockPane" />, and you can access a
					<see cref="!:WeifenLuo.WinFormsUI.DockContent" />'s containing
					<see cref="!:WeifenLuo.WinFormsUI.DockPane" /> through its
					<see cref="!:WeifenLuo.WinFormsUI.DockContent.Pane" />,
					<see cref="!:WeifenLuo.WinFormsUI.DockContent.PanelPane" /> or
					<see cref="!:WeifenLuo.WinFormsUI.DockContent.FloatPane" /> properties.					
				</para>
				<para>If there is no <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> in
				this <see cref="!:WeifenLuo.WinFormsUI.DockPane" />,
				this <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> will be disposed automatically.
				</para>
			</remarks>
        </member>
        <member name="P:Netron.Neon.DockPane.DisplayingContents">
            <summary>Gets the collection of displaying <see cref="T:Netron.Neon.DockContent" /> forms.</summary><value>The <see cref="T:Netron.Neon.DockContentCollection" /> which contains all the displaying
			<see cref="T:Netron.Neon.DockContent" /> forms for this <see cref="T:Netron.Neon.DockPane" />.</value><seealso cref="P:Netron.Neon.DockPane.Contents" />
        </member>
        <member name="P:Netron.Neon.DockPane.DefaultSize">
            <exclude/>
        </member>
        <member name="P:Netron.Neon.DockPane.DockPanel">
            <summary>Gets the <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> associated with this
			<see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</summary><value>the <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> associated with this
			<see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</value>
        </member>
        <member name="P:Netron.Neon.DockPane.IsActivated">
            <summary>Gets whether this <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> is activated.</summary><value><b>True</b> if this <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> is activated,
			otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Netron.Neon.DockPane.IsActiveDocumentPane">
            <summary>Gets whether this <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> is active document pane.</summary><value><b>True</b> if this <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> is active document pan,
			otherwise, <b>false</b>.</value>
        </member>
        <member name="M:Netron.Neon.DockPane.IsDockStateValid(Netron.Neon.DockState)">
            <summary>Tests if the giving docking state conforms to the
			<see cref="!:WeifenLuo.WinFormsUI.DockContent.DockableAreas" /> property of all the
			contained <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms.</summary><param name="dockState" /><returns><b>True</b> if the giving docking state conforms to the
			<see cref="!:WeifenLuo.WinFormsUI.DockContent.DockableAreas" /> property of all the
			contained <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:Netron.Neon.DockPane.IsAutoHide">
            <summary>Gets whether this <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> is active document pane.</summary><value><b>True</b> if this <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> is active document pan,
			otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Netron.Neon.DockPane.Appearance">
            <summary>Gets the <see cref="T:Netron.Neon.DockPane.AppearanceStyle" /> of the <see cref="T:Netron.Neon.DockPane" />.</summary><value>The <see cref="T:Netron.Neon.DockPane.AppearanceStyle" /> of the <see cref="T:Netron.Neon.DockPane" />.</value>
        </member>
        <member name="M:Netron.Neon.DockPane.Activate">
            <summary>Activates the DockPane and gives it focus.</summary>
        </member>
        <member name="M:Netron.Neon.DockPane.CloseActiveContent">
            <summary>Closes the currently active <see cref="T:Netron.Neon.DockContent" />.</summary>
        </member>
        <member name="P:Netron.Neon.DockPane.IsHidden">
            <summary>Gets whether all the contained <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms
			are invisible in this <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</summary><value><b>True</b> if all the contained <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms
			are invisible in this <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</value>
        </member>
        <member name="M:Netron.Neon.DockPane.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.DockPane.SetContentIndex(Netron.Neon.DockContent,System.Int32)">
            <summary>Moves the specified <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> form to the
			specified position in the tab strip.</summary><param name="content">The specified <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> form.</param><param name="index">The zero-based index represents the new position in the tab strip.</param>
        </member>
        <member name="M:Netron.Neon.DockPane.Show">
            <exclude/>
        </member>
        <member name="E:Netron.Neon.DockPane.DockStateChanged">
            <summary>Occurs when the <see cref="!:WeifenLuo.WinFormsUI.DockPane.DockState" /> property changed.</summary>
        </member>
        <member name="M:Netron.Neon.DockPane.OnDockStateChanged(System.EventArgs)">
            <summary>Raises the <see cref="!:WeifenLuo.WinFormsUI.DockPane.DockStateChanged" /> event.</summary><param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="E:Netron.Neon.DockPane.IsActivatedChanged">
            <summary>Occurs when the <see cref="!:WeifenLuo.WinFormsUI.DockPane.IsActivated" /> property changed.</summary>
        </member>
        <member name="M:Netron.Neon.DockPane.OnIsActivatedChanged(System.EventArgs)">
            <summary>Raises the <see cref="!:WeifenLuo.WinFormsUI.DockPane.IsActivatedChanged" /> event.</summary><param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="E:Netron.Neon.DockPane.IsActiveDocumentPaneChanged">
            <summary>Occurs when the <see cref="!:WeifenLuo.WinFormsUI.DockPane.IsActiveDocumentPane" /> property changed.</summary>
        </member>
        <member name="M:Netron.Neon.DockPane.OnIsActiveDocumentPaneChanged(System.EventArgs)">
            <summary>Raises the <see cref="!:WeifenLuo.WinFormsUI.DockPane.IsActiveDocumentPaneChanged" /> event.</summary><param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Netron.Neon.DockPane.DockWindow">
            <summary>Gets or sets the <see cref="!:WeifenLuo.WinFormsUI.DockWindow" /> contains this
			<see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</summary><value>Gets or sets the <see cref="!:WeifenLuo.WinFormsUI.DockWindow" /> contains this
			<see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</value><remarks>
			The <see cref="!:WeifenLuo.WinFormsUI.DockPane.IsFloat" /> property is fixed during the construction
			<see cref="!:WeifenLuo.WinFormsUI.DockPane" /> class, based on the initial docking state. If this
			property returns <b>true</b>, it can only be contained by a <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />
			as its <see cref="!:WeifenLuo.WinFormsUI.DockPane.DockListContainer" />; otherwise it can only be contained
			by a <see cref="!:WeifenLuo.WinFormsUI.DockWindow" /> as its
			<see cref="!:WeifenLuo.WinFormsUI.DockPane.DockListContainer" />.
			</remarks>
        </member>
        <member name="P:Netron.Neon.DockPane.FloatWindow">
            <summary>Gets or sets the <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" /> contains this
			<see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</summary><value>Gets or sets the <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" /> contains this
			<see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</value><remarks>
			The <see cref="!:WeifenLuo.WinFormsUI.DockPane.IsFloat" /> property is fixed during the construction
			<see cref="!:WeifenLuo.WinFormsUI.DockPane" /> class, based on the initial docking state. If this
			property returns <b>true</b>, it can only be contained by a <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />
			as its <see cref="!:WeifenLuo.WinFormsUI.DockPane.DockListContainer" />; otherwise it can only be contained
			by a <see cref="!:WeifenLuo.WinFormsUI.DockWindow" /> as its
			<see cref="!:WeifenLuo.WinFormsUI.DockPane.DockListContainer" />.
			</remarks>
        </member>
        <member name="P:Netron.Neon.DockPane.NestedDockingStatus">
            <summary>Gets the nested docking status for this <see cref="!:WeifenLuo.WinFormsUI.NestedDockingStatus" />.</summary><value>A <see cref="!:WeifenLuo.WinFormsUI.NestedDockingStatus" /> object to represent
			the nested docking status for this <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</value>
        </member>
        <member name="P:Netron.Neon.DockPane.IsFloat">
            <summary>Gets whether this <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> is floating.</summary><value><b>True</b> if this <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> is floating,
			otherwise, <b>false</b>.</value><remarks>
			The <see cref="!:WeifenLuo.WinFormsUI.DockPane.IsFloat" /> property is fixed during the construction
			<see cref="!:WeifenLuo.WinFormsUI.DockPane" /> class, based on the initial docking state. If this
			property returns <b>true</b>, it can only be contained by a <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />
			as its <see cref="!:WeifenLuo.WinFormsUI.DockPane.DockListContainer" />; otherwise it can only be contained
			by a <see cref="!:WeifenLuo.WinFormsUI.DockWindow" /> as its
			<see cref="!:WeifenLuo.WinFormsUI.DockPane.DockListContainer" />.
			</remarks>
        </member>
        <member name="P:Netron.Neon.DockPane.DockListContainer">
            <summary>Gets the <see cref="!:WeifenLuo.WinFormsUI.IDockListContainer" /> which contains this
			<see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.IDockListContainer" /> which contains this
			<see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</value><remarks>
			The <see cref="!:WeifenLuo.WinFormsUI.DockPane.IsFloat" /> property is fixed during the construction
			<see cref="!:WeifenLuo.WinFormsUI.DockPane" /> class, based on the initial docking state. If this
			property returns <b>true</b>, it can only be contained by a <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />
			as its <see cref="!:WeifenLuo.WinFormsUI.DockPane.DockListContainer" />; otherwise it can only be contained
			by a <see cref="!:WeifenLuo.WinFormsUI.DockWindow" /> as its
			<see cref="!:WeifenLuo.WinFormsUI.DockPane.DockListContainer" />.
			</remarks>
        </member>
        <member name="P:Netron.Neon.DockPane.DockState">
            <summary>Gets the docking state of this <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</summary><value>The docking state of this <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</value>
        </member>
        <member name="M:Netron.Neon.DockPane.SetDockState(Netron.Neon.DockState)">
            <summary>Shows all contained <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms as specified docking state.</summary><param name="value">The specified docking state to display.</param><returns>The <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> for the new docking state.</returns>
        </member>
        <member name="M:Netron.Neon.DockPane.AddToDockList(Netron.Neon.IDockListContainer)">
            <overloads>
				<summary>Nested docks this <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to the specified
				<see cref="!:WeifenLuo.WinFormsUI.IDockListContainer" />.</summary>
			</overloads>
            <summary>Nested docks this <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to the specified
			<see cref="!:WeifenLuo.WinFormsUI.IDockListContainer" />, with default settings.</summary><param name="container">The <see cref="!:WeifenLuo.WinFormsUI.IDockListContainer" /> for the
			nested docking.</param><returns>If the <see cref="!:WeifenLuo.WinFormsUI.DockPane.IsFloat" /> property conforms to
			the container's docking state, the current <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> object
			will be returned; otherwise, a new instance of <see cref="!:WeifenLuo.WinFormsUI.DockPane" />
			object will be created and returned.</returns>
        </member>
        <member name="M:Netron.Neon.DockPane.AddToDockList(Netron.Neon.IDockListContainer,Netron.Neon.DockPane,Netron.Neon.DockAlignment,System.Double)">
            <summary>Nested docks this <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to the specified
			<see cref="!:WeifenLuo.WinFormsUI.IDockListContainer" />, with specified settings.</summary><param name="container">The <see cref="!:WeifenLuo.WinFormsUI.IDockListContainer" /> for the
			nested docking.</param><param name="prevPane" /><param name="alignment" /><param name="proportion" /><returns>If the <see cref="!:WeifenLuo.WinFormsUI.DockPane.IsFloat" /> property conforms to
			the container's docking state, the current <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> object
			will be returned; otherwise, a new instance of <see cref="!:WeifenLuo.WinFormsUI.DockPane" />
			object will be created and returned.</returns>
        </member>
        <member name="M:Netron.Neon.DockPane.SetNestedDockingProportion(System.Double)">
            <summary>Sets the proportion size of this DockPane for nested docking.</summary><param name="proportion">The proportion size to set. Value must between 0 and 1.</param>
        </member>
        <member name="M:Netron.Neon.DockPane.Float">
            <summary>Shows all contained <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms as floating.</summary><returns>The new floating <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> for the
			<see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms.</returns>
        </member>
        <member name="M:Netron.Neon.DockPane.RestoreToPanel">
            <summary>Shows all contained <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms as non-floating.</summary>
        </member>
        <member name="T:Netron.Neon.DockPaneCaptionBase">
            <summary>Implements the basic functionality common to the caption of <see cref="P:Netron.Neon.DockPaneCaptionBase.DockPane" />.</summary>
        </member>
        <member name="M:Netron.Neon.DockPaneCaptionBase.#ctor(Netron.Neon.DockPane)">
            <summary>Creates a instance of <see cref="T:Netron.Neon.DockPaneCaptionBase" />.</summary><param name="pane">The <see cref="P:Netron.Neon.DockPaneCaptionBase.DockPane" /> to associate with.</param>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionBase.DockPane">
            <summary>Gets the associated <see cref="P:Netron.Neon.DockPaneCaptionBase.DockPane" />.</summary><value>The associated <see cref="P:Netron.Neon.DockPaneCaptionBase.DockPane" />.</value>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionBase.Tabs">
            <summary>Gets a collection of <see cref="T:Netron.Neon.DockPaneTab" /> objects for the <see cref="P:Netron.Neon.DockPaneCaptionBase.DockPane" />.</summary><value>A <see cref="T:Netron.Neon.DockPaneTabCollection" /> that contains a collection of <see cref="T:Netron.Neon.DockPaneTab" /> objects for the <see cref="P:Netron.Neon.DockPaneCaptionBase.DockPane" />.</value>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionBase.Appearance">
            <summary>Gets the appearance style of the <see cref="P:Netron.Neon.DockPaneCaptionBase.DockPane" />.</summary><value>A <see cref="!:WeifenLuo.WinFormsUI.DockPane.AppearanceStyle" /> value that specifies the appearance style of the <see cref="T:Netron.Neon.DockPaneTab" /> objects for the <see cref="P:Netron.Neon.DockPaneCaptionBase.DockPane" />.</value>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionBase.DefaultSize">
            <exclude />
        </member>
        <member name="M:Netron.Neon.DockPaneCaptionBase.WndProc(System.Windows.Forms.Message@)">
            <exclude />
        </member>
        <member name="M:Netron.Neon.DockPaneCaptionBase.OnRefreshChanges">
            <summary>Invoked when the underlying data has been changed and needs update of the control.</summary><remarks>Derived class should override to update the changes.</remarks>
        </member>
        <member name="M:Netron.Neon.DockPaneCaptionBase.MeasureHeight">
            <summary>Measures the height of the caption.</summary>
        </member>
        <member name="T:Netron.Neon.DockPaneCaptionVS2003">
            <summary>Visual Studio 2003 style caption of <see cref="T:Netron.Neon.DockPane" />.</summary>
        </member>
        <member name="M:Netron.Neon.DockPaneCaptionVS2003.#ctor(Netron.Neon.DockPane)">
            <summary>Initializes a instance of <see cref="T:Netron.Neon.DockPaneCaptionVS2003" /> class.</summary><param name="pane">The associated <see cref="T:Netron.Neon.DockPane" />.</param>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.TextGapTop">
            <summary>Gets the extra space on the top side when drawing the caption text.</summary><value>The extra space, in pixel, on the top side when drawing the caption text.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.TextGapBottom">
            <summary>Gets the extra space on the bottom side when drawing the caption text.</summary><value>The extra space, in pixel, on the bottom side when drawing the caption text.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.TextGapLeft">
            <summary>Gets the extra space on the left side when drawing the caption text.</summary><value>The extra space, in pixel, on the left side when drawing the caption text.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.TextGapRight">
            <summary>Gets the extra space on the right side when drawing the caption text.</summary><value>The extra space, in pixel, on the right side when drawing the caption text.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.ButtonGapTop">
            <summary>Gets the space between the inert buttons and the top of the caption area.</summary><value>The the space, in pixel, between the inert buttons and the top of the caption area.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.ButtonGapBottom">
            <summary>Gets the space between the inert buttons and the bottom of the caption area.</summary><value>The the space, in pixel, between the inert buttons and the bottom of the caption area.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.ButtonGapLeft">
            <summary>Gets the space between the inert buttons and the left caption text.</summary><value>The the space, in pixel, between the inert buttons and the left caption text.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.ButtonGapRight">
            <summary>Gets the space between the inert buttons and the right of the caption area.</summary><value>The the space, in pixel, between the inert buttons and the right of the caption area.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.ButtonGapBetween">
            <summary>Gets the space between the inert buttons.</summary><value>The the space, in pixel, between the inert buttons.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.ImageCloseEnabled">
            <summary>Gets the <see cref="T:System.Drawing.Image" /> of the "close" inert button, when enabled.</summary><value>The <see cref="T:System.Drawing.Image" /> of the "close" inert button, when enabled.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.ImageCloseDisabled">
            <summary>Gets the <see cref="T:System.Drawing.Image" /> of the "close" inert button, when disabled.</summary><value>The <see cref="T:System.Drawing.Image" /> of the "close" inert button, when disabled.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.ImageAutoHideYes">
            <summary>Gets the <see cref="T:System.Drawing.Image" /> of the "auto hide" inert button, when displayed as unpinned.</summary><value>The <see cref="T:System.Drawing.Image" /> of the "auto hide" inert button, when displayed as unpinned.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.ImageAutoHideNo">
            <summary>Gets the <see cref="T:System.Drawing.Image" /> of the "auto hide" inert button, when displayed as pinned.</summary><value>The <see cref="T:System.Drawing.Image" /> of the "auto hide" inert button, when displayed as pinned.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.ToolTipClose">
            <summary>Gets the tool tip text of the "close" inert button.</summary><value>The tool tip text of the "close" inert button.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.ToolTipAutoHide">
            <summary>Gets the tool tip text of the "auto hide" inert button.</summary><value>The tool tip text of the "auto hide" inert button.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.ActiveBackColor">
            <summary>Gets the background color when the <see cref="T:Netron.Neon.DockPane" /> is active.</summary><value>A <see cref="T:System.Drawing.Color" /> represents the background color when the <see cref="T:Netron.Neon.DockPane" /> is active.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.InactiveBackColor">
            <summary>Gets the background color when the <see cref="T:Netron.Neon.DockPane" /> is inactive.</summary><value>A <see cref="T:System.Drawing.Color" /> represents the background color when the <see cref="T:Netron.Neon.DockPane" /> is inactive.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.ActiveTextColor">
            <summary>Gets the text color when the <see cref="T:Netron.Neon.DockPane" /> is active.</summary><value>A <see cref="T:System.Drawing.Color" /> represents the text color when the <see cref="T:Netron.Neon.DockPane" /> is active.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.InactiveTextColor">
            <summary>Gets the text color when the <see cref="T:Netron.Neon.DockPane" /> is inactive.</summary><value>A <see cref="T:System.Drawing.Color" /> represents the text color when the <see cref="T:Netron.Neon.DockPane" /> is inactive.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.InactiveBorderColor">
            <summary>Gets the border color when the <see cref="T:Netron.Neon.DockPane" /> is inactive.</summary><value>A <see cref="T:System.Drawing.Color" /> represents the border color when the <see cref="T:Netron.Neon.DockPane" /> is inactive.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.ActiveButtonBorderColor">
            <summary>Gets the inert buttons' border color when the <see cref="T:Netron.Neon.DockPane" /> is active.</summary><value>A <see cref="T:System.Drawing.Color" /> represents the inert buttons' border color when the <see cref="T:Netron.Neon.DockPane" /> is active.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.InactiveButtonBorderColor">
            <summary>Gets the inert buttons' border color when the <see cref="T:Netron.Neon.DockPane" /> is inactive.</summary><value>A <see cref="T:System.Drawing.Color" /> represents the inert buttons' border color when the <see cref="T:Netron.Neon.DockPane" /> is inactive.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneCaptionVS2003.TextStringFormat">
            <summary>Gets the <see cref="T:System.Drawing.StringFormat" /> to draw the caption text.</summary><value>The <see cref="T:System.Drawing.StringFormat" /> to draw the caption text.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="M:Netron.Neon.DockPaneCaptionVS2003.MeasureHeight">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.DockPaneCaptionVS2003.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.DockPaneCaptionVS2003.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.DockPaneCaptionVS2003.OnRefreshChanges">
            <exclude/>
        </member>
        <member name="T:Netron.Neon.DockPaneCollection">
            <summary>Provides methods to manage a collection of <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</summary>&gt;
        </member>
        <member name="P:Netron.Neon.DockPaneCollection.Item(System.Int32)">
            <summary>
			<para>Gets a <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> at the specified index.</para>
			<para>In C#, this property is the indexer for the <see cref="!:WeifenLuo.WinFormsUI.DockPaneCollection" /> class.</para>
			</summary>&gt;
        </member>
        <member name="M:Netron.Neon.DockPaneCollection.Contains(Netron.Neon.DockPane)">
            <summary>
			Determines whether a <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> is in the
			<see cref="!:WeifenLuo.WinFormsUI.DockPaneCollection" />.
		</summary><param name="pane">
			The <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to locate in
			<see cref="!:WeifenLuo.WinFormsUI.DockPaneCollection" />.
		</param><returns>
			<b>true</b> if <paramref name="pane" /> is found in the
			<see cref="!:WeifenLuo.WinFormsUI.DockPaneCollection" />;
			otherwise, <b>false</b>.
		</returns>&gt;
        </member>
        <member name="M:Netron.Neon.DockPaneCollection.IndexOf(Netron.Neon.DockPane)">
            <summary>
			Searches for the specified <see cref="!:WeifenLuo.WinFormsUI.DockPane" />
			and returns the zero-based index within the entire
			<see cref="!:WeifenLuo.WinFormsUI.DockPaneCollection" />.
		</summary><param name="pane">
			The <see cref="!:WeifenLuo.WinFormsUI.DockPane" />
			to locate in the <see cref="!:WeifenLuo.WinFormsUI.DockPaneCollection" />
		</param><returns>
			The zero-based index of <paramref name="pane" /> within the entire
			<see cref="!:WeifenLuo.WinFormsUI.DockPaneCollection" />, if found;
			otherwise, -1.
		</returns>&gt;
        </member>
        <member name="T:Netron.Neon.DeserializeDockContent">
            <summary>
			Callback used by <see cref="!:WeifenLuo.WinFormsUI.DockPanel.LoadFromXml" />
			to get a instance of <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> from a
			serialized string.
		</summary><param name="persistString">
			The serialized string of the <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object.
		</param><returns>
			The <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object.
		</returns><remarks>
			<para>
				The layout of <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />
				can be saved to and loaded from XML data by calling
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.SaveAsXml" /> and
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.LoadFromXml" />.
				When saving, the system will persist the <see cref="!:WeifenLuo.WinFormsUI.DockContent" />
				object to a string by calling its 
				<see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" /> method;
				when loading, the system will call the <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				call back to get the instance of <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object.
			</para>
			<para>
				The default implementation of <see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" />
				returns the type name of the <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> class. You can overwrite
				this method for your own implementation.
			</para>
			<para>
				You always need to provide a <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				callback when loading the layout.
			</para>
		</remarks>
        </member>
        <member name="T:Netron.Neon.DockPanel">
            <summary>Represents a control that acts as container for the docking windows.</summary><remarks>The <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> contains 5 <see cref="!:WeifenLuo.WinFormsUI.DockWindow" />: 
			top, bottom, left, right and document. It also displays tab strip for auto-hide window(s) if there is any.</remarks>
        </member>
        <member name="M:Netron.Neon.DockPanel.#ctor">
            <summary>Initializes a new instance of <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> class.</summary>
        </member>
        <member name="M:Netron.Neon.DockPanel.Dispose(System.Boolean)">
            <exclude/>
        </member>
        <member name="P:Netron.Neon.DockPanel.ActiveAutoHideContent">
            <summary>Gets or sets the active auto-hide <see cref="!:WeifenLuo.WinFormsUI.DockContent" />.</summary><value>The auto-hide <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> is currently active.</value>
        </member>
        <member name="P:Netron.Neon.DockPanel.ActiveContent">
            <summary>Gets the active <see cref="!:WeifenLuo.WinFormsUI.DockContent" />.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> is currently active.</value>
        </member>
        <member name="P:Netron.Neon.DockPanel.ActivePane">
            <summary>Gets the active <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> is currently active.</value>
        </member>
        <member name="P:Netron.Neon.DockPanel.ActiveDocument">
            <summary>Gets the active document <see cref="!:WeifenLuo.WinFormsUI.DockContent" />.</summary><value>The document <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> is currently active.</value>
        </member>
        <member name="P:Netron.Neon.DockPanel.ActiveDocumentPane">
            <summary>Gets the active document <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</summary><value>The document <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> is currently active.</value>
        </member>
        <member name="P:Netron.Neon.DockPanel.AllowRedocking">
            <summary>Sets or gets a value indicating whether drag and drop redocking is allowed.</summary><value><b>True</b>, if drag and drop redocking is allowed, otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Netron.Neon.DockPanel.Contents">
            <summary>Gets the collection of contained <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.DockContentCollection" /> which contains all the
			<see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms for this <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />.</value><remarks>A <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object is added to <see cref="!:WeifenLuo.WinFormsUI.DockPanel.Contents" />
			collection by setting the value of its <see cref="!:WeifenLuo.WinFormsUI.DockContent.DockPanel" /> property.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPanel.Extender">
            <summary>Gets the <see cref="T:Netron.Neon.DockPanelExtender" /> to customize the <see cref="T:Netron.Neon.DockPanel" />.</summary><value>A <see cref="T:Netron.Neon.DockPanelExtender" /> to customize the <see cref="T:Netron.Neon.DockPanel" />.</value>
        </member>
        <member name="P:Netron.Neon.DockPanel.Panes">
            <summary>Gets the collection of contained <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> windows.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.DockPaneCollection" /> which contains all the
			<see cref="!:WeifenLuo.WinFormsUI.DockPane" /> windows for this <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />.</value>
        </member>
        <member name="P:Netron.Neon.DockPanel.DockBottomPortion">
            <summary>Gets or sets the size of the bottom side <see cref="!:WeifenLuo.WinFormsUI.DockWindow" />.</summary><value>A value between 0 and 1 to determine the size of the bottom side <see cref="!:WeifenLuo.WinFormsUI.DockWindow" />.</value>
        </member>
        <member name="P:Netron.Neon.DockPanel.DockLeftPortion">
            <summary>Gets or sets the size of the left side <see cref="!:WeifenLuo.WinFormsUI.DockWindow" />.</summary><value>A value between 0 and 1 to determine the size of the left side <see cref="!:WeifenLuo.WinFormsUI.DockWindow" />.</value>
        </member>
        <member name="P:Netron.Neon.DockPanel.DockRightPortion">
            <summary>Gets or sets the size of the right side <see cref="!:WeifenLuo.WinFormsUI.DockWindow" />.</summary><value>A value between 0 and 1 to determine the size of the right side <see cref="!:WeifenLuo.WinFormsUI.DockWindow" />.</value>
        </member>
        <member name="P:Netron.Neon.DockPanel.DockTopPortion">
            <summary>Gets or sets the size of the top side <see cref="!:WeifenLuo.WinFormsUI.DockWindow" />.</summary><value>A value between 0 and 1 to determine the size of the top side <see cref="!:WeifenLuo.WinFormsUI.DockWindow" />.</value>
        </member>
        <member name="P:Netron.Neon.DockPanel.DockWindows">
            <summary>Gets the collection of contained <see cref="!:WeifenLuo.WinFormsUI.DockWindow" /> controls.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.DockWindowCollection" /> which contains all the
			<see cref="!:WeifenLuo.WinFormsUI.DockWindow" /> controls for this <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />.</value>
        </member>
        <member name="P:Netron.Neon.DockPanel.Documents">
            <summary>Gets the document <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms.</summary><value>An array of the document <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms.</value>
        </member>
        <member name="P:Netron.Neon.DockPanel.FloatWindows">
            <summary>Gets the collection of contained <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" /> forms.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.FloatWindowCollection" /> which contains all the
			<see cref="!:WeifenLuo.WinFormsUI.FloatWindow" /> forms for this <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />.</value>
        </member>
        <member name="P:Netron.Neon.DockPanel.MdiIntegration">
            <summary>Gets or sets a value indicating whether all the document <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms are treated as MDI forms.</summary><value><b>True</b>, if all the document <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> forms are treated as MDI forms, otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Netron.Neon.DockPanel.SdiDocument">
            <summary>Gets or sets a value indicating whether the tab strip of document <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> will be displayed when there is only one document <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> form.</summary><value><b>False</b>, if the tab strip of document <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> will be displayed when there is only one document <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> form, otherwise, <b>true</b>.</value>
        </member>
        <member name="M:Netron.Neon.DockPanel.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.DockPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.DockPanel.SetPaneIndex(Netron.Neon.DockPane,System.Int32)">
            <summary>Moves the specified <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> window to the
			specified position in the auto-hide tab strip.</summary><param name="pane">The specified <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> window.</param><param name="index">The zero-based index represents the new position in the auto-hide tab strip.</param>
        </member>
        <member name="M:Netron.Neon.DockPanel.WndProc(System.Windows.Forms.Message@)">
            <exclude/>
        </member>
        <member name="E:Netron.Neon.DockPanel.ActiveDocumentChanged">
            <summary>Occurs when the <see cref="!:WeifenLuo.WinFormsUI.DockPanel.ActiveDocument" /> property changed.</summary>
        </member>
        <member name="M:Netron.Neon.DockPanel.OnActiveDocumentChanged(System.EventArgs)">
            <summary>Raises the <see cref="!:WeifenLuo.WinFormsUI.DockPanel.ActiveDocumentChanged" /> event.</summary><param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="E:Netron.Neon.DockPanel.ActiveContentChanged">
            <summary>Occurs when the <see cref="!:WeifenLuo.WinFormsUI.DockPanel.ActiveContent" /> property changed.</summary>
        </member>
        <member name="M:Netron.Neon.DockPanel.OnActiveContentChanged(System.EventArgs)">
            <summary>Raises the <see cref="!:WeifenLuo.WinFormsUI.DockPanel.ActiveContentChanged" /> event.</summary><param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="E:Netron.Neon.DockPanel.ActivePaneChanged">
            <summary>Occurs when the <see cref="!:WeifenLuo.WinFormsUI.DockPanel.ActivePane" /> property changed.</summary>
        </member>
        <member name="M:Netron.Neon.DockPanel.OnActivePaneChanged(System.EventArgs)">
            <summary>Raises the <see cref="!:WeifenLuo.WinFormsUI.DockPanel.ActivePaneChanged" /> event.</summary><param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="T:Netron.Neon.DockPanel.DockContentEventHandler">
            <summary>Represents the method that will handle the <see cref="!:WeifenLuo.WinFormsUI.DockPanel.ContentAdded" /> or
		<see cref="!:WeifenLuo.WinFormsUI.DockPanel.ContentRemoved" /> event of <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="!:WeifenLuo.WinFormsUI.DockContentEventArgs" /> that contains the event data.</param>
        </member>
        <member name="E:Netron.Neon.DockPanel.ContentAdded">
            <summary>Occurs when a <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> form added to <see cref="!:WeifenLuo.WinFormsUI.DockPanel.Contents" /> collection.</summary>
        </member>
        <member name="M:Netron.Neon.DockPanel.OnContentAdded(Netron.Neon.DockContentEventArgs)">
            <summary>Raises the <see cref="!:WeifenLuo.WinFormsUI.DockPanel.ContentAdded" /> event.</summary><param name="e">An <see cref="!:WeifenLuo.WinFormsUI.DockContentEventArgs" /> that contains the event data.</param>
        </member>
        <member name="E:Netron.Neon.DockPanel.ContentRemoved">
            <summary>Occurs when a <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> form removed from <see cref="!:WeifenLuo.WinFormsUI.DockPanel.Contents" /> collection.</summary>
        </member>
        <member name="M:Netron.Neon.DockPanel.OnContentRemoved(Netron.Neon.DockContentEventArgs)">
            <summary>Raises the <see cref="!:WeifenLuo.WinFormsUI.DockPanel.ContentRemoved" /> event.</summary><param name="e">An <see cref="!:WeifenLuo.WinFormsUI.DockContentEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Netron.Neon.DockPanel.SaveAsXml(System.String)">
            <overloads>
				<summary>Save the layout to XML data. Overloaded.</summary>
				<remarks>
					<para>
				The layout of <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />
				can be saved to and loaded from XML data by calling
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.SaveAsXml" /> and
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.LoadFromXml" />.
				When saving, the system will persist the <see cref="!:WeifenLuo.WinFormsUI.DockContent" />
				object to a string by calling its 
				<see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" /> method;
				when loading, the system will call the <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				call back to get the instance of <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object.
			</para><para>
				The default implementation of <see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" />
				returns the type name of the <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> class. You can overwrite
				this method for your own implementation.
			</para><para>
				You always need to provide a <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				callback when loading the layout.
			</para>
				</remarks>
			</overloads>
            <summary>Save the layout to XML data, using the specified file.</summary><param name="filename">The file name to write to. If the file exsists, it will truncate it and
			overwrite it with new content.</param><remarks>
				<para>
				The layout of <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />
				can be saved to and loaded from XML data by calling
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.SaveAsXml" /> and
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.LoadFromXml" />.
				When saving, the system will persist the <see cref="!:WeifenLuo.WinFormsUI.DockContent" />
				object to a string by calling its 
				<see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" /> method;
				when loading, the system will call the <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				call back to get the instance of <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object.
			</para><para>
				The default implementation of <see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" />
				returns the type name of the <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> class. You can overwrite
				this method for your own implementation.
			</para><para>
				You always need to provide a <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				callback when loading the layout.
			</para>
			</remarks>
        </member>
        <member name="M:Netron.Neon.DockPanel.SaveAsXml(System.String,System.Text.Encoding)">
            <summary>Save the layout to XML data, using the specified file and encoding.</summary><param name="filename">The file name to write to. If the file exsists, it will truncate it and
			overwrite it with new content.</param><param name="encoding">The encoding to generate.</param><remarks>
				<para>
				The layout of <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />
				can be saved to and loaded from XML data by calling
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.SaveAsXml" /> and
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.LoadFromXml" />.
				When saving, the system will persist the <see cref="!:WeifenLuo.WinFormsUI.DockContent" />
				object to a string by calling its 
				<see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" /> method;
				when loading, the system will call the <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				call back to get the instance of <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object.
			</para><para>
				The default implementation of <see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" />
				returns the type name of the <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> class. You can overwrite
				this method for your own implementation.
			</para><para>
				You always need to provide a <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				callback when loading the layout.
			</para>
			</remarks>
        </member>
        <member name="M:Netron.Neon.DockPanel.SaveAsXml(System.IO.Stream,System.Text.Encoding)">
            <summary>Save the layout to XML data, using the specified stream and encoding.</summary><param name="stream">The stream to which you want to write.</param><param name="encoding">The encoding to generate.</param><remarks>
				<para>
				The layout of <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />
				can be saved to and loaded from XML data by calling
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.SaveAsXml" /> and
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.LoadFromXml" />.
				When saving, the system will persist the <see cref="!:WeifenLuo.WinFormsUI.DockContent" />
				object to a string by calling its 
				<see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" /> method;
				when loading, the system will call the <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				call back to get the instance of <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object.
			</para><para>
				The default implementation of <see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" />
				returns the type name of the <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> class. You can overwrite
				this method for your own implementation.
			</para><para>
				You always need to provide a <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				callback when loading the layout.
			</para>
			</remarks>
        </member>
        <member name="M:Netron.Neon.DockPanel.LoadFromXml(System.String,Netron.Neon.DeserializeDockContent)">
            <overloads>
				<summary>Load the layout from XML data. Overloaded</summary>
				<remarks>
					<para>
				The layout of <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />
				can be saved to and loaded from XML data by calling
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.SaveAsXml" /> and
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.LoadFromXml" />.
				When saving, the system will persist the <see cref="!:WeifenLuo.WinFormsUI.DockContent" />
				object to a string by calling its 
				<see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" /> method;
				when loading, the system will call the <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				call back to get the instance of <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object.
			</para><para>
				The default implementation of <see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" />
				returns the type name of the <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> class. You can overwrite
				this method for your own implementation.
			</para><para>
				You always need to provide a <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				callback when loading the layout.
			</para>
				</remarks>
			</overloads>
            <summary>Load the layout from XML file.</summary><param name="filename">The file name to read XML data from.</param><param name="deserializeContent">The callback function to get the
			<see cref="!:WeifenLuo.WinFormsUI.DockContent" /> instance from the persistent string.</param><remarks>
				<para>
				The layout of <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />
				can be saved to and loaded from XML data by calling
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.SaveAsXml" /> and
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.LoadFromXml" />.
				When saving, the system will persist the <see cref="!:WeifenLuo.WinFormsUI.DockContent" />
				object to a string by calling its 
				<see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" /> method;
				when loading, the system will call the <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				call back to get the instance of <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object.
			</para><para>
				The default implementation of <see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" />
				returns the type name of the <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> class. You can overwrite
				this method for your own implementation.
			</para><para>
				You always need to provide a <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				callback when loading the layout.
			</para>
			</remarks>
        </member>
        <member name="M:Netron.Neon.DockPanel.LoadFromXml(System.IO.Stream,Netron.Neon.DeserializeDockContent)">
            <summary>Load the layout from XML stream.</summary><param name="stream">The stream to read XML data from.</param><param name="deserializeContent">The callback function to get the
			<see cref="!:WeifenLuo.WinFormsUI.DockContent" /> instance from the persistent string.</param><remarks>
				<para>
				The layout of <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />
				can be saved to and loaded from XML data by calling
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.SaveAsXml" /> and
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel.LoadFromXml" />.
				When saving, the system will persist the <see cref="!:WeifenLuo.WinFormsUI.DockContent" />
				object to a string by calling its 
				<see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" /> method;
				when loading, the system will call the <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				call back to get the instance of <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object.
			</para><para>
				The default implementation of <see cref="!:WeifenLuo.WinFormsUI.DockContent.GetPersistString" />
				returns the type name of the <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> class. You can overwrite
				this method for your own implementation.
			</para><para>
				You always need to provide a <see cref="!:WeifenLuo.WinFormsUI.DeserializeDockContent" />
				callback when loading the layout.
			</para>
			</remarks>
        </member>
        <member name="T:Netron.Neon.DockPanelExtender">
            <summary>Provides class factories to plug in customized components into the <see cref="P:Netron.Neon.DockPanelExtender.DockPanel" />.</summary>
        </member>
        <member name="T:Netron.Neon.DockPanelExtender.IDockPaneFactory">
            <summary>Provides methods to initialize a instance of <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</summary><remarks>You can derive your own class from <see cref="!:WeifenLuo.WinFormsUI.DockPane" />, and
				set the <see cref="P:Netron.Neon.DockPanelExtender.DockPaneFactory" /> property to create instance
				of the derived class.</remarks>
        </member>
        <member name="M:Netron.Neon.DockPanelExtender.IDockPaneFactory.CreateDockPane(Netron.Neon.DockContent,Netron.Neon.DockState,System.Boolean)">
            <overloads>
				<summary>Initializes a new instance of DockPane class.</summary>
			</overloads>
            <summary>Initializes a new instance of DockPane class, with specified visible docking state.</summary><param name="content">The first DockContent for this DockPane.</param><param name="visibleState">The visible docking state for this DockPane.</param><param name="show"><b>True</b> to show the <paramref name="content" />, otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Netron.Neon.DockPanelExtender.IDockPaneFactory.CreateDockPane(Netron.Neon.DockContent,Netron.Neon.FloatWindow,System.Boolean)">
            <summary>Initializes a new instance of DockPane class, as nested docking to specified FloatWindow.</summary><param name="content">The first DockContent for this DockPane.</param><param name="floatWindow">The <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" /> for nested docking.</param><param name="show"><b>True</b> to show the <paramref name="content" />, otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Netron.Neon.DockPanelExtender.IDockPaneFactory.CreateDockPane(Netron.Neon.DockContent,Netron.Neon.DockPane,Netron.Neon.DockAlignment,System.Double,System.Boolean)">
            <summary>Initializes a new instance of DockPane class, as specified nested docking.</summary><param name="content">The first DockContent for this DockPane.</param><param name="prevPane">The target <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to dock.</param><param name="alignment">The edge of the target <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to dock.</param><param name="proportion">The proportion size of the source <see cref="!:WeifenLuo.WinFormsUI.DockPane" />
			to take inside the target <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</param><param name="show"><b>True</b> to show the <paramref name="content" />, otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Netron.Neon.DockPanelExtender.IDockPaneFactory.CreateDockPane(Netron.Neon.DockContent,System.Drawing.Rectangle,System.Boolean)">
            <summary>Initializes a new instance of DockPane class, as floating at the specified bounds.</summary><param name="content">The first DockContent for this DockPane.</param><param name="floatWindowBounds">The bounds of the floating window.</param><param name="show"><b>True</b> to show the <paramref name="content" />, otherwise, <b>false</b>.</param>
        </member>
        <member name="T:Netron.Neon.DockPanelExtender.IFloatWindowFactory">
            <summary>Provides methods to initialize a instance of <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />.</summary><remarks>You can derive your own class from <see cref="T:Netron.Neon.FloatWindow" />, and
				set the <see cref="P:Netron.Neon.DockPanelExtender.FloatWindowFactory" /> property to create instance
				of the derived class.</remarks>
        </member>
        <member name="M:Netron.Neon.DockPanelExtender.IFloatWindowFactory.CreateFloatWindow(Netron.Neon.DockPanel,Netron.Neon.DockPane)">
            <overloads>
				<summary>Initializes a new instance of <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />.</summary>
			</overloads>
            <summary>Initializes a new instance of <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />,
			with default size and location.</summary><param name="dockPanel">The <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> which owns this
			<see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />.</param><param name="pane">The first <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> in this
			<see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />.</param>
        </member>
        <member name="M:Netron.Neon.DockPanelExtender.IFloatWindowFactory.CreateFloatWindow(Netron.Neon.DockPanel,Netron.Neon.DockPane,System.Drawing.Rectangle)">
            <summary>Initializes a new instance of <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />,
			with specified size and location.</summary><param name="dockPanel">The <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> which owns this
			<see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />.</param><param name="pane">The first <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> in this
			<see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />.</param><param name="bounds">A <see cref="T:System.Drawing.Rectangle" /> for the location and size of the window.</param>
        </member>
        <member name="T:Netron.Neon.DockPanelExtender.IDockPaneCaptionFactory">
            <summary>Provides methods to initialize a instance of <see cref="T:Netron.Neon.DockPaneCaptionBase" /> derived class.</summary><remarks>You can derive your own class from <see cref="T:Netron.Neon.DockPaneCaptionBase" />, and
				set the <see cref="P:Netron.Neon.DockPanelExtender.DockPaneCaptionFactory" /> property to create instance
				of the derived class.</remarks>
        </member>
        <member name="M:Netron.Neon.DockPanelExtender.IDockPaneCaptionFactory.CreateDockPaneCaption(Netron.Neon.DockPane)">
            <summary>Creates a instance of <see cref="T:Netron.Neon.DockPaneCaptionBase" /> derived class.</summary><param name="pane">The <see cref="T:Netron.Neon.DockPane" /> to associate with.</param><returns>A instance of <see cref="T:Netron.Neon.DockPaneCaptionBase" /> derived class.</returns>
        </member>
        <member name="T:Netron.Neon.DockPanelExtender.IDockPaneStripFactory">
            <summary>Provides methods to initialize a instance of <see cref="T:Netron.Neon.DockPaneStripBase" /> derived class.</summary><remarks>You can derive your own class from <see cref="T:Netron.Neon.DockPaneStripBase" />, and
				set the <see cref="P:Netron.Neon.DockPanelExtender.DockPaneStripFactory" /> property to create instance
				of the derived class.</remarks>
        </member>
        <member name="M:Netron.Neon.DockPanelExtender.IDockPaneStripFactory.CreateDockPaneStrip(Netron.Neon.DockPane)">
            <summary>Creates a instance of <see cref="T:Netron.Neon.DockPaneStripBase" /> derived class.</summary><param name="pane">The <see cref="T:Netron.Neon.DockPane" /> to associate with.</param><returns>A instance of <see cref="T:Netron.Neon.DockPaneStripBase" /> derived class.</returns>
        </member>
        <member name="T:Netron.Neon.DockPanelExtender.IAutoHideStripFactory">
            <summary>Provides methods to initialize a instance of <see cref="T:Netron.Neon.AutoHideStripBase" /> derived class.</summary><remarks>You can derive your own class from <see cref="T:Netron.Neon.AutoHideStripBase" />, and
				set the <see cref="P:Netron.Neon.DockPanelExtender.AutoHideStripFactory" /> property to create instance
				of the derived class.</remarks>
        </member>
        <member name="M:Netron.Neon.DockPanelExtender.IAutoHideStripFactory.CreateAutoHideStrip(Netron.Neon.DockPanel)">
            <summary>Creates a instance of <see cref="T:Netron.Neon.AutoHideStripBase" /> derived class.</summary><param name="panel">The <see cref="P:Netron.Neon.DockPanelExtender.DockPanel" /> to associate with.</param><returns>A instance of <see cref="T:Netron.Neon.AutoHideStripBase" /> derived class.</returns>
        </member>
        <member name="T:Netron.Neon.DockPanelExtender.IAutoHideTabFactory">
            <summary>Provides methods to initialize a instance of <see cref="T:Netron.Neon.AutoHideTab" />.</summary><remarks>You can derive your own class from <see cref="T:Netron.Neon.AutoHideTab" />, and
				set the <see cref="P:Netron.Neon.DockPanelExtender.AutoHideTabFactory" /> property to create instance
				of the derived class.</remarks>
        </member>
        <member name="M:Netron.Neon.DockPanelExtender.IAutoHideTabFactory.CreateAutoHideTab(Netron.Neon.DockContent)">
            <summary>Creates a instance of <see cref="T:Netron.Neon.AutoHideTab" />.</summary><param name="content">The <see cref="T:Netron.Neon.DockContent" /> to associate with.</param><returns>A instance of <see cref="T:Netron.Neon.AutoHideTab" />.</returns>
        </member>
        <member name="T:Netron.Neon.DockPanelExtender.IAutoHidePaneFactory">
            <summary>Provides methods to initialize a instance of <see cref="T:Netron.Neon.AutoHidePane" />.</summary><remarks>You can derive your own class from <see cref="T:Netron.Neon.AutoHidePane" />, and
				set the <see cref="P:Netron.Neon.DockPanelExtender.AutoHidePaneFactory" /> property to create instance
				of the derived class.</remarks>
        </member>
        <member name="M:Netron.Neon.DockPanelExtender.IAutoHidePaneFactory.CreateAutoHidePane(Netron.Neon.DockPane)">
            <summary>Creates a instance of <see cref="T:Netron.Neon.AutoHidePane" />.</summary><param name="pane">The <see cref="T:Netron.Neon.DockPane" /> to associate with.</param><returns>A instance of <see cref="T:Netron.Neon.AutoHidePane" />.</returns>
        </member>
        <member name="T:Netron.Neon.DockPanelExtender.IDockPaneTabFactory">
            <summary>Provides methods to initialize a instance of <see cref="T:Netron.Neon.DockPaneTab" />.</summary><remarks>You can derive your own class from <see cref="T:Netron.Neon.DockPaneTab" />, and
				set the <see cref="P:Netron.Neon.DockPanelExtender.DockPaneTabFactory" /> property to create instance
				of the derived class.</remarks>
        </member>
        <member name="M:Netron.Neon.DockPanelExtender.IDockPaneTabFactory.CreateDockPaneTab(Netron.Neon.DockContent)">
            <summary>Creates a instance of <see cref="T:Netron.Neon.DockPaneTab" />.</summary><param name="content">The <see cref="T:Netron.Neon.DockContent" /> to associate with.</param><returns>A instance of <see cref="T:Netron.Neon.DockPaneTab" />.</returns>
        </member>
        <member name="P:Netron.Neon.DockPanelExtender.DockPaneFactory">
            <summary>Provides class factory to initialize <see cref="T:Netron.Neon.DockPane" /> instances.</summary><value>An object implements <see cref="T:Netron.Neon.DockPanelExtender.IDockPaneFactory" /> to initialize <see cref="T:Netron.Neon.DockPane" /> instances.</value><remarks>Set this property can plug your own class derived from <see cref="T:Netron.Neon.DockPane" /> into the <see cref="P:Netron.Neon.DockPanelExtender.DockPanel" />.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPanelExtender.FloatWindowFactory">
            <summary>Provides class factory to initialize <see cref="T:Netron.Neon.FloatWindow" /> instances.</summary><value>An object implements <see cref="T:Netron.Neon.DockPanelExtender.IFloatWindowFactory" /> to initialize <see cref="T:Netron.Neon.FloatWindow" /> instances.</value><remarks>Set this property can plug your own class derived from <see cref="T:Netron.Neon.FloatWindow" /> into the <see cref="P:Netron.Neon.DockPanelExtender.DockPanel" />.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPanelExtender.DockPaneCaptionFactory">
            <summary>Provides class factory to initialize <see cref="T:Netron.Neon.DockPaneCaptionBase" /> derived instances.</summary><value>An object implements <see cref="T:Netron.Neon.DockPanelExtender.IDockPaneCaptionFactory" /> to initialize <see cref="T:Netron.Neon.DockPaneCaptionBase" /> derived instances.</value><remarks>Set this property can plug your own class derived from <see cref="T:Netron.Neon.DockPaneCaptionBase" /> into the <see cref="P:Netron.Neon.DockPanelExtender.DockPanel" />.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPanelExtender.DockPaneTabFactory">
            <summary>Provides class factory to initialize <see cref="T:Netron.Neon.DockPaneTab" /> instances.</summary><value>An object implements <see cref="T:Netron.Neon.DockPanelExtender.IDockPaneTabFactory" /> to initialize <see cref="T:Netron.Neon.DockPaneTab" /> instances.</value><remarks>Set this property can plug your own class derived from <see cref="T:Netron.Neon.DockPaneTab" /> into the <see cref="P:Netron.Neon.DockPanelExtender.DockPanel" />.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPanelExtender.DockPaneStripFactory">
            <summary>Provides class factory to initialize <see cref="T:Netron.Neon.DockPaneStripBase" /> derived instances.</summary><value>An object implements <see cref="T:Netron.Neon.DockPanelExtender.IDockPaneStripFactory" /> to initialize <see cref="T:Netron.Neon.DockPaneStripBase" /> derived instances.</value><remarks>Set this property can plug your own class derived from <see cref="T:Netron.Neon.DockPaneStripBase" /> into the <see cref="P:Netron.Neon.DockPanelExtender.DockPanel" />.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPanelExtender.AutoHidePaneFactory">
            <summary>Provides class factory to initialize <see cref="T:Netron.Neon.AutoHidePane" /> instances.</summary><value>An object implements <see cref="T:Netron.Neon.DockPanelExtender.IAutoHidePaneFactory" /> to initialize <see cref="T:Netron.Neon.AutoHidePane" /> instances.</value><remarks>Set this property can plug your own class derived from <see cref="T:Netron.Neon.AutoHidePane" /> into the <see cref="P:Netron.Neon.DockPanelExtender.DockPanel" />.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPanelExtender.AutoHideTabFactory">
            <summary>Provides class factory to initialize <see cref="T:Netron.Neon.AutoHideTab" /> instances.</summary><value>An object implements <see cref="T:Netron.Neon.DockPanelExtender.IAutoHideTabFactory" /> to initialize <see cref="T:Netron.Neon.AutoHideTab" /> instances.</value><remarks>Set this property can plug your own class derived from <see cref="T:Netron.Neon.AutoHideTab" /> into the <see cref="P:Netron.Neon.DockPanelExtender.DockPanel" />.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPanelExtender.AutoHideStripFactory">
            <summary>Provides class factory to initialize <see cref="T:Netron.Neon.AutoHideStripBase" /> derived instances.</summary><value>An object implements <see cref="T:Netron.Neon.DockPanelExtender.IAutoHideStripFactory" /> to initialize <see cref="T:Netron.Neon.AutoHideStripBase" /> derived instances.</value><remarks>Set this property can plug your own class derived from <see cref="T:Netron.Neon.AutoHideStripBase" /> into the <see cref="P:Netron.Neon.DockPanelExtender.DockPanel" />.</remarks>
        </member>
        <member name="T:Netron.Neon.DockPaneStripBase">
            <summary>Implements the basic functionality common to the tab strip of <see cref="P:Netron.Neon.DockPaneStripBase.DockPane" />.</summary>
        </member>
        <member name="M:Netron.Neon.DockPaneStripBase.#ctor(Netron.Neon.DockPane)">
            <summary>Creates a instance of <see cref="T:Netron.Neon.DockPaneStripBase" />.</summary><param name="pane">The <see cref="P:Netron.Neon.DockPaneStripBase.DockPane" /> to associate with.</param>
        </member>
        <member name="P:Netron.Neon.DockPaneStripBase.DockPane">
            <summary>Gets the associated <see cref="P:Netron.Neon.DockPaneStripBase.DockPane" />.</summary><value>The associated <see cref="P:Netron.Neon.DockPaneStripBase.DockPane" />.</value>
        </member>
        <member name="P:Netron.Neon.DockPaneStripBase.Appearance">
            <summary>Gets the appearance style of the <see cref="P:Netron.Neon.DockPaneStripBase.DockPane" />.</summary><value>A <see cref="!:WeifenLuo.WinFormsUI.DockPane.AppearanceStyle" /> value that specifies the appearance style of the <see cref="T:Netron.Neon.DockPaneTab" /> objects for the <see cref="P:Netron.Neon.DockPaneStripBase.DockPane" />.</value>
        </member>
        <member name="P:Netron.Neon.DockPaneStripBase.OutlineSize">
            <summary>Gets the size of the drag and drop outline.</summary><value>The size, in pixel, of the drag and drop outline.</value>
        </member>
        <member name="P:Netron.Neon.DockPaneStripBase.Tabs">
            <summary>Gets a collection of <see cref="T:Netron.Neon.DockPaneTab" /> objects for the <see cref="P:Netron.Neon.DockPaneStripBase.DockPane" />.</summary><value>A <see cref="T:Netron.Neon.DockPaneTabCollection" /> that contains a collection of <see cref="T:Netron.Neon.DockPaneTab" /> objects for the <see cref="P:Netron.Neon.DockPaneStripBase.DockPane" />.</value>
        </member>
        <member name="M:Netron.Neon.DockPaneStripBase.OnRefreshChanges">
            <summary>Invoked when the underlying data has been changed and needs update of the control.</summary><remarks>Derived class should override to update the changes.</remarks>
        </member>
        <member name="M:Netron.Neon.DockPaneStripBase.MeasureHeight">
            <summary>Measures the height of the tab strip.</summary>
        </member>
        <member name="M:Netron.Neon.DockPaneStripBase.EnsureTabVisible(Netron.Neon.DockContent)">
            <summary>Ensures the specified content tab visible in the tab strip.</summary><param name="content">The specified <see cref="T:Netron.Neon.DockContent" />.</param>
        </member>
        <member name="M:Netron.Neon.DockPaneStripBase.GetHitTest">
            <overloads><summary>Gets the hit test result of the tab strip.</summary></overloads>
            <summary>Gets the hit test result of the tab strip using current mouse position.</summary><returns>The zero based index of the content tab; -1 for none of the content tabs.</returns>
        </member>
        <member name="M:Netron.Neon.DockPaneStripBase.GetHitTest(System.Drawing.Point)">
            <summary>Gets the hit test result of the tab strip using specified point.</summary><param name="point">The specified point.</param><returns>The zero based index of the content tab; -1 for none of the content tabs.</returns>
        </member>
        <member name="M:Netron.Neon.DockPaneStripBase.GetOutlineXorPath(System.Int32)">
            <summary>Gets the <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> that will be combined with the whole tab strip area by XOR to draw the drag and drop outline.</summary><param name="index">The zero based index of the content tab.</param><returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> that will be combined with the whole tab strip area by XOR to draw the drag and drop outline.</returns>
        </member>
        <member name="P:Netron.Neon.DockPaneStripBase.DefaultSize">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.DockPaneStripBase.WndProc(System.Windows.Forms.Message@)">
            <exclude/>
        </member>
        <member name="T:Netron.Neon.DockPaneStripVS2003">
            <summary>Visual Studio 2003 style tab strip of <see cref="T:Netron.Neon.DockPane" />.</summary>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.Components">
            <exclude/>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ToolWindowStripGapLeft">
            <summary>Gets the left space of the tool window style tab strip.</summary><value>The left space, in pixel, of the tool window style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ToolWindowStripGapRight">
            <summary>Gets the right space of the tool window style tab strip.</summary><value>The right space, in pixel, of the tool window style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ToolWindowImageHeight">
            <summary>Gets the image height of the tool window style tab strip.</summary><value>The image height, in pixel, of the tool window style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ToolWindowImageWidth">
            <summary>Gets the image width of the tool window style tab strip.</summary><value>The image width, in pixel, of the tool window style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ToolWindowImageGapTop">
            <summary>Gets the top side extra space of the image for the tool window style tab strip.</summary><value>The top side extra space of the image, in pixel, for the tool window style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ToolWindowImageGapBottom">
            <summary>Gets the bottom side extra space of the image for the tool window style tab strip.</summary><value>The bottom side extra space of the image, in pixel, for the tool window style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ToolWindowImageGapLeft">
            <summary>Gets the left side extra space of the image for the tool window style tab strip.</summary><value>The left side extra space of the image, in pixel, for the tool window style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ToolWindowImageGapRight">
            <summary>Gets the right side extra space of the image for the tool window style tab strip.</summary><value>The right side extra space of the image, in pixel, for the tool window style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ToolWindowTextGapRight">
            <summary>Gets the right side extra space of the text for the tool window style tab.</summary><value>The right side extra space of the text, in pixel, for the tool window style tab.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ToolWindowTabSeperatorGapTop">
            <!-- No matching elements were found for the following include tag --><include file="CodeDoc/DockPaneStripVS2003.xml" path="//CodeDoc/Class[@name=&quot;DockPaneStripVS2003&quot;]/Property[@name=&quot;ToolWindowSeperatorGaptop&quot;]/*" />
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ToolWindowTabSeperatorGapBottom">
            <summary>Gets the space between the tab seperator and the bottom of the tool window style tab strip.</summary><value>The space, in pixel, between the tab seperator and the bottom of the tool window style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ImageCloseEnabled">
            <summary>Gets the <see cref="T:System.Drawing.Image" /> of the enabled "close" inert button for document style tab strip.</summary><value>The <see cref="T:System.Drawing.Image" /> of the enabled "close" inert button for document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ImageCloseDisabled">
            <summary>Gets the <see cref="T:System.Drawing.Image" /> of the disabled "close" inert button for document style tab strip.</summary><value>The <see cref="T:System.Drawing.Image" /> of the disabled "close" inert button for document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ImageScrollLeftEnabled">
            <summary>Gets the <see cref="T:System.Drawing.Image" /> of the enabled "scroll left" inert button for document style tab strip.</summary><value>The <see cref="T:System.Drawing.Image" /> of the enabled "scroll left" inert button for document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ImageScrollLeftDisabled">
            <summary>Gets the <see cref="T:System.Drawing.Image" /> of the disabled "scroll left" inert button for document style tab strip.</summary><value>The <see cref="T:System.Drawing.Image" /> of the disabled "scroll left" inert button for document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ImageScrollRightEnabled">
            <summary>Gets the <see cref="T:System.Drawing.Image" /> of the enabled "scroll right" inert button for document style tab strip.</summary><value>The <see cref="T:System.Drawing.Image" /> of the enabled "scroll right" inert button for document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ImageScrollRightDisabled">
            <summary>Gets the <see cref="T:System.Drawing.Image" /> of the disabled "scroll right" inert button for document style tab strip.</summary><value>The <see cref="T:System.Drawing.Image" /> of the disabled "scroll right" inert button for document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ToolTipClose">
            <summary>Gets the tool tip text of the "close" inert button for document style tab strip.</summary><value>The tool tip text of the "close" inert button for document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ToolTipScrollLeft">
            <summary>Gets the tool tip text of the "scroll left" inert button for document style tab strip.</summary><value>The tool tip text of the "scroll left" inert button for document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ToolTipScrollRight">
            <summary>Gets the tool tip text of the "scroll right" inert button for document style tab strip.</summary><value>The tool tip text of the "scroll right" inert button for document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ToolWindowTextStringFormat">
            <summary>Gets the <see cref="T:System.Drawing.StringFormat" /> for drawing the text of the tool window style tab strip.</summary><value>The <see cref="T:System.Drawing.StringFormat" /> for drawing the text of the tool window style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.DocumentTextStringFormat">
            <summary>Gets the <see cref="T:System.Drawing.StringFormat" /> for drawing the text of the document style tab strip.</summary><value>The <see cref="T:System.Drawing.StringFormat" /> for drawing the text of the document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.DocumentTabMaxWidth">
            <summary>Gets the maximum width of the document style tab.</summary><value>The maximum width, in pixel, of the document style tab.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.DocumentButtonGapTop">
            <summary>Gets the top side extra space of the inert buttons for the document style tab strip.</summary><value>The top side extra space, in pixel, of the inert buttons for the document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.DocumentButtonGapBottom">
            <summary>Gets the bottom side extra space of the inert buttons for the document style tab strip.</summary><value>The bottom side extra space, in pixel, of the inert buttons for the document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.DocumentButtonGapBetween">
            <summary>Gets the horizontal space between two inert buttons for the document style tab strip.</summary><value>The horizontal space, in pixel, between two inert buttons for the document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.DocumentButtonGapRight">
            <summary>Gets the right side extra space of the inert buttons for the document style tab strip.</summary><value>The right side extra space, in pixel, of the inert buttons for the document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.DocumentTabGapTop">
            <summary>Gets the top side extra space of the tab for the document style tab strip.</summary><value>The top side extra space, in pixel, of the tab for the document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.DocumentTabGapLeft">
            <summary>Gets the left side extra space of the tab for the document style tab strip.</summary><value>The left side extra space, in pixel, of the tab for the document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.DocumentTabGapRight">
            <summary>Gets the right side extra space of the tab for the document style tab strip.</summary><value>The right side extra space, in pixel, of the tab for the document style tab strip.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.DocumentTextExtraHeight">
            <summary>Gets the extra height for drawing text of document style tab.</summary><value>The extra height, in pixel, for drawing text of document style tab.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.DocumentTextExtraWidth">
            <summary>Gets the extra width for drawing text of document style tab.</summary><value>The extra width, in pixel, for drawing text of document style tab.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.OutlineInnerPen">
            <summary>Gets the <see cref="T:System.Drawing.Pen" /> for drawing the inner outline.</summary><value>The <see cref="T:System.Drawing.Pen" /> for drawing the inner outline.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.OutlineOuterPen">
            <summary>Gets the <see cref="T:System.Drawing.Pen" /> for drawing the outer outline.</summary><value>The <see cref="T:System.Drawing.Pen" /> for drawing the outer outline.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ActiveBackBrush">
            <summary>Gets the <see cref="T:System.Drawing.Brush" /> for drawing the background of active tab.</summary><value>The <see cref="T:System.Drawing.Brush" /> for drawing the background of active tab.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.ActiveTextBrush">
            <summary>Gets the <see cref="T:System.Drawing.Brush" /> for drawing the text of active tab.</summary><value>The <see cref="T:System.Drawing.Brush" /> for drawing the text of active tab.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.TabSeperatorPen">
            <summary>Gets the <see cref="T:System.Drawing.Pen" /> for drawing the seperator of tabs.</summary><value>The <see cref="T:System.Drawing.Pen" /> for drawing the seperator of tabs.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="P:Netron.Neon.DockPaneStripVS2003.InactiveTextBrush">
            <summary>Gets the <see cref="T:System.Drawing.Brush" /> for drawing the text of inactive tab.</summary><value>The <see cref="T:System.Drawing.Brush" /> for drawing the text of inactive tab.</value><remarks>Derived class can override this property to provide its own value.</remarks>
        </member>
        <member name="M:Netron.Neon.DockPaneStripVS2003.#ctor(Netron.Neon.DockPane)">
            <summary>Initializes a instance of <see cref="T:Netron.Neon.DockPaneStripVS2003" /> class.</summary><param name="pane">The associated <see cref="T:Netron.Neon.DockPane" />.</param>
        </member>
        <member name="M:Netron.Neon.DockPaneStripVS2003.Dispose(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.DockPaneStripVS2003.MeasureHeight">
            <exclude />
        </member>
        <member name="M:Netron.Neon.DockPaneStripVS2003.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <exclude />
        </member>
        <member name="M:Netron.Neon.DockPaneStripVS2003.OnRefreshChanges">
            <exclude />
        </member>
        <member name="M:Netron.Neon.DockPaneStripVS2003.GetOutlineXorPath(System.Int32)">
            <exclude />
        </member>
        <member name="M:Netron.Neon.DockPaneStripVS2003.EnsureTabVisible(Netron.Neon.DockContent)">
            <exclude />
        </member>
        <member name="M:Netron.Neon.DockPaneStripVS2003.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.DockPaneStripVS2003.GetHitTest(System.Drawing.Point)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.DockPaneStripVS2003.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.DockPaneStripVS2003.OnBeginDrawTabStrip">
            <summary>Invoked when begin to draw the tab strip.</summary>
        </member>
        <member name="M:Netron.Neon.DockPaneStripVS2003.OnEndDrawTabStrip">
            <summary>Invoked when end to draw the tab strip.</summary>
        </member>
        <member name="M:Netron.Neon.DockPaneStripVS2003.OnBeginDrawTab(Netron.Neon.DockPaneTab)">
            <summary>Invoked when begin to draw the tab.</summary><param name="tab">The tab begin to draw.</param>
        </member>
        <member name="M:Netron.Neon.DockPaneStripVS2003.OnEndDrawTab(Netron.Neon.DockPaneTab)">
            <summary>Invoked when end to draw the tab.</summary><param name="tab">The tab end to draw.</param>
        </member>
        <member name="T:Netron.Neon.DockPaneTab">
            <summary>Represent a <see cref="T:Netron.Neon.DockContent" /> displayed in the tab strip area of <see cref="T:Netron.Neon.DockPane" />.</summary><remarks>When customizing the tab strip area of the <see cref="T:Netron.Neon.DockPane" />, you can derive a class from <see cref="T:Netron.Neon.DockPaneStripBase" />
			class, and then plug it into the <see cref="T:Netron.Neon.DockPanel" /> through the <see cref="P:Netron.Neon.DockPanelExtender.DockPaneStripFactory" /> property of <see cref="P:Netron.Neon.DockPanel.Extender" />. If you want to
			associate data with the <see cref="T:Netron.Neon.DockContent" />, you can derived a class from <see cref="T:Netron.Neon.DockPaneTab" /> class,
			then plug it into the <see cref="T:Netron.Neon.DockPanel" /> through <see cref="P:Netron.Neon.DockPanelExtender.DockPaneTabFactory" /> property of <see cref="P:Netron.Neon.DockPanel.Extender" />. The docking framework
			will create the class instances and you can reference them through <see cref="P:Netron.Neon.DockPaneStripBase.Tabs" /> property.</remarks>
        </member>
        <member name="M:Netron.Neon.DockPaneTab.#ctor(Netron.Neon.DockContent)">
            <summary>Creates a instance of <see cref="T:Netron.Neon.DockPaneTab" /> class.</summary><param name="content">The <see cref="T:Netron.Neon.DockContent" /> object to associate with.</param><remarks>Instance of <see cref="T:Netron.Neon.DockPaneTab" /> or derived class should only be created by the docking framework.
			The constructor should only be called within the implementation of <see cref="T:Netron.Neon.DockPanelExtender.IDockPaneTabFactory" /> interface or derived class's constructor.</remarks>
        </member>
        <member name="M:Netron.Neon.DockPaneTab.Finalize">
            <exclude/>
        </member>
        <member name="P:Netron.Neon.DockPaneTab.Content">
            <summary>Gets the associated <see cref="T:Netron.Neon.DockContent" /> object.</summary><value>A <see cref="T:Netron.Neon.DockContent" /> object which associates with this <see cref="T:Netron.Neon.DockPaneTab" /> object.</value>
        </member>
        <member name="M:Netron.Neon.DockPaneTab.Dispose">
            <overloads>
				<summary>Releases the resources used by the <see cref="T:Netron.Neon.DockPaneTab" /> object.</summary>
			</overloads>
            <summary>
				Releases all the resources used by the <see cref="T:Netron.Neon.DockPaneTab" /> object.
			</summary>
        </member>
        <member name="M:Netron.Neon.DockPaneTab.Dispose(System.Boolean)">
            <summary>
				Releases the unmanaged resources used by the <see cref="T:Netron.Neon.DockPaneTab" /> object and optionally releases the managed resources.
			</summary><param name="disposing">
				<B>true</B> to release both managed and unmanaged resources;
				<B>false</B> to release only unmanaged resources.
			</param>
        </member>
        <member name="T:Netron.Neon.DockPaneTabCollection">
            <summary>Provides methods to manage a collection of <see cref="T:Netron.Neon.DockPaneTab" /> objects.</summary>&gt;
        </member>
        <member name="M:Netron.Neon.DockPaneTabCollection.GetEnumerator">
            <exclude/>
        </member>
        <member name="P:Netron.Neon.DockPaneTabCollection.DockPane">
            <summary>Gets the <see cref="P:Netron.Neon.DockPaneTabCollection.DockPane" /> contains the <see cref="T:Netron.Neon.DockPaneTabCollection" />.</summary><value>The <see cref="P:Netron.Neon.DockPaneTabCollection.DockPane" /> contains the <see cref="T:Netron.Neon.DockPaneTabCollection" />.</value>&gt;
        </member>
        <member name="P:Netron.Neon.DockPaneTabCollection.Count">
            <summary>Gets the number of elements contained in the <see cref="T:Netron.Neon.DockPaneTabCollection" /> instance.</summary><value>The number of elements contained in the <see cref="T:Netron.Neon.DockPaneTabCollection" /> instance.</value>&gt;
        </member>
        <member name="P:Netron.Neon.DockPaneTabCollection.Item(System.Int32)">
            <summary>
			<para>Gets a <see cref="T:Netron.Neon.DockPaneTab" /> at the specified index.</para>
			<para>In C#, this property is the indexer for the <see cref="T:Netron.Neon.DockPaneTabCollection" /> class.</para>
			</summary>&gt;
        </member>
        <member name="M:Netron.Neon.DockPaneTabCollection.Contains(Netron.Neon.DockPaneTab)">
            <overloads><summary>Determines whether an element is in the <see cref="T:Netron.Neon.DockPaneTabCollection" />.</summary></overloads>&gt;
            <summary>Determines whether a <see cref="T:Netron.Neon.DockPaneTab" /> is in the <see cref="T:Netron.Neon.DockPaneTabCollection" />.</summary><param name="tab">The <see cref="T:Netron.Neon.DockPaneTab" /> to locate in <see cref="T:Netron.Neon.DockPaneTabCollection" />.</param><returns><b>true</b> if <paramref name="tab" /> is found in the <see cref="T:Netron.Neon.DockPaneTabCollection" />; otherwise, <b>false</b>.</returns>&gt;
        </member>
        <member name="M:Netron.Neon.DockPaneTabCollection.Contains(Netron.Neon.DockContent)">
            <summary>Determines whether a <see cref="T:Netron.Neon.DockContent" /> is in the <see cref="T:Netron.Neon.DockPaneTabCollection" />.</summary><param name="content">The <see cref="T:Netron.Neon.DockContent" /> to locate in <see cref="T:Netron.Neon.DockPaneTabCollection" />.</param><returns><b>true</b> if <paramref name="content" /> is found in the <see cref="T:Netron.Neon.DockPaneTabCollection" />; otherwise, <b>false</b>.</returns>&gt;
        </member>
        <member name="M:Netron.Neon.DockPaneTabCollection.IndexOf(Netron.Neon.DockPaneTab)">
            <overloads><summary>Searches for the specified element and returns the zero based index within the entire <see cref="T:Netron.Neon.DockPaneTabCollection" />.</summary></overloads>&gt;
            <summary>Searches for the specified <see cref="T:Netron.Neon.DockPaneTab" /> and returns the zero-based index within the entire <see cref="T:Netron.Neon.DockPaneTabCollection" />.</summary><param name="tab">The <see cref="T:Netron.Neon.DockPaneTab" /> to locate in the <see cref="T:Netron.Neon.DockPaneTabCollection" />.</param><returns>The zero-based index of <paramref name="tab" /> within the entire <see cref="T:Netron.Neon.DockPaneTabCollection" />, if found; otherwise, -1.</returns>&gt;
        </member>
        <member name="M:Netron.Neon.DockPaneTabCollection.IndexOf(Netron.Neon.DockContent)">
            <summary>Searches for the specified <see cref="T:Netron.Neon.DockContent" /> and returns the zero-based index within the entire <see cref="T:Netron.Neon.DockPaneTabCollection" />.</summary><param name="content">The <see cref="T:Netron.Neon.DockContent" /> to locate in the <see cref="T:Netron.Neon.DockPaneTabCollection" />.</param><returns>The zero-based index of <paramref name="content" /> within the entire <see cref="T:Netron.Neon.DockPaneTabCollection" />, if found; otherwise, -1.</returns>&gt;
        </member>
        <member name="T:Netron.Neon.DockWindow">
            <summary>Represents the docking zone of the <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />.</summary><remarks>
				<para>The <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> is divided into 5
				<see cref="!:WeifenLuo.WinFormsUI.DockWindow" />s: Top, Bottom, Left, Right and Document.
				The document <see cref="!:WeifenLuo.WinFormsUI.DockWindow" /> is always positioned in the central of the 
				<see cref="!:WeifenLuo.WinFormsUI.DockPanel" />. Other 4 <see cref="!:WeifenLuo.WinFormsUI.DockWindow" />s’ positions
				are determined by the Z-order. The last displayed <see cref="!:WeifenLuo.WinFormsUI.DockWindow" /> will be sent to the back of the
				Z-order.</para>
				<para>The <see cref="!:WeifenLuo.WinFormsUI.DockWindow" /> implements <see cref="!:WeifenLuo.WinFormsUI.IDockListContainer" />,
				it can contain a list of nested <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</para>
			</remarks>
        </member>
        <member name="P:Netron.Neon.DockWindow.DefaultSize">
            <exclude/>
        </member>
        <member name="P:Netron.Neon.DockWindow.DisplayingList">
            <summary>Gets the <see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" /> which contains
			a list of visible nested docking <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" /> which contains
			a list of visible nested docking <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</value>
        </member>
        <member name="P:Netron.Neon.DockWindow.DockList">
            <summary>Gets the <see cref="!:WeifenLuo.WinFormsUI.DockList" /> which contains
			a list of nested docking <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.DockList" /> which contains
			a list of nested docking <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</value>
        </member>
        <member name="P:Netron.Neon.DockWindow.DockPanel">
            <summary>Gets the <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> which contains this
			<see cref="!:WeifenLuo.WinFormsUI.DockWindow" />.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> which contains this
			<see cref="!:WeifenLuo.WinFormsUI.DockWindow" />.</value>
        </member>
        <member name="P:Netron.Neon.DockWindow.DockState">
            <summary>Gets the docking state of this <see cref="!:WeifenLuo.WinFormsUI.DockWindow" />.</summary><value>The docking state of this <see cref="!:WeifenLuo.WinFormsUI.DockWindow" />.</value>
        </member>
        <member name="P:Netron.Neon.DockWindow.IsFloat">
            <summary>Gets to determine if this <see cref="!:WeifenLuo.WinFormsUI.DockWindow" /> is floating.</summary><value>The value of this property is always <b>false</b>.</value>
        </member>
        <member name="P:Netron.Neon.DockWindow.DisplayingRectangle">
            <summary>Gets the rectangle represents the displaying area for nested docking DockPane objects.</summary><value>A <see cref="T:System.Drawing.Rectangle" /> represents the displaying area for nested docking DockPane objects.</value>
        </member>
        <member name="M:Netron.Neon.DockWindow.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.DockWindow.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <exclude/>
        </member>
        <member name="T:Netron.Neon.DockWindowCollection">
            <summary>Provides methods to manage a collection of <see cref="!:WeifenLuo.WinFormsUI.DockWindow" /> objects.</summary>&gt;
        </member>
        <member name="P:Netron.Neon.DockWindowCollection.Item(Netron.Neon.DockState)">
            <summary>
			<para>Gets a <see cref="!:WeifenLuo.WinFormsUI.DockWindow" /> at the specified docking state.</para>
			<para>In C#, this property is the indexer for the <see cref="!:WeifenLuo.WinFormsUI.DockWindowCollection" /> class.</para>
			</summary>&gt;
        </member>
        <member name="T:Netron.Neon.DragHandler">
            <summary>
            Summary description for DragHandler.
            </summary>
        </member>
        <member name="T:Netron.Neon.DragHandlerBase">
            <summary>
            DragHandlerBase is the base class for drag handlers. The derived class should:
              1. Define its public method BeginDrag. From within this public BeginDrag method,
                 DragHandlerBase.BeginDrag should be called to initialize the mouse capture
                 and message filtering.
              2. Override the OnDragging and OnEndDrag methods.
            </summary>
        </member>
        <member name="T:Netron.Neon.DockAreas">
            <summary>Specifies all the available docking areas.</summary>
        </member>
        <member name="F:Netron.Neon.DockAreas.Float">
            <summary>The floating window docking area.</summary>
        </member>
        <member name="F:Netron.Neon.DockAreas.DockLeft">
            <summary>The left docking area of the <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />.</summary>
        </member>
        <member name="F:Netron.Neon.DockAreas.DockRight">
            <summary>The right docking area of the <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />.</summary>
        </member>
        <member name="F:Netron.Neon.DockAreas.DockTop">
            <summary>The top docking area of the <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /></summary>
        </member>
        <member name="F:Netron.Neon.DockAreas.DockBottom">
            <summary>The bottom docking area of the <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />.</summary>
        </member>
        <member name="F:Netron.Neon.DockAreas.Document">
            <summary>The document area of the <see cref="!:WeifenLuo.WinFormsUI.DockPanel" />.</summary>
        </member>
        <member name="T:Netron.Neon.DockState">
            <summary>Specifies the docking state for docking windows.</summary>
        </member>
        <member name="F:Netron.Neon.DockState.Unknown">
            <summary>Unknown docking state.</summary>
        </member>
        <member name="F:Netron.Neon.DockState.Float">
            <summary>Displayed inside float window.</summary>
        </member>
        <member name="F:Netron.Neon.DockState.DockTopAutoHide">
            <summary>Displayed as auto-hide window, on the top edge.</summary>
        </member>
        <member name="F:Netron.Neon.DockState.DockLeftAutoHide">
            <summary>Displayed as auto-hide window, on the left edge.</summary>
        </member>
        <member name="F:Netron.Neon.DockState.DockBottomAutoHide">
            <summary>Displayed as auto-hide window, on the bottom edge.</summary>
        </member>
        <member name="F:Netron.Neon.DockState.DockRightAutoHide">
            <summary>Displayed as auto-hide window, on the right edge.</summary>
        </member>
        <member name="F:Netron.Neon.DockState.Document">
            <summary>Displayed as document window.</summary>
        </member>
        <member name="F:Netron.Neon.DockState.DockTop">
            <summary>Docked to the top edge.</summary>
        </member>
        <member name="F:Netron.Neon.DockState.DockLeft">
            <summary>Docked to the left edge.</summary>
        </member>
        <member name="F:Netron.Neon.DockState.DockBottom">
            <summary>Docked to the bottom edge.</summary>
        </member>
        <member name="F:Netron.Neon.DockState.DockRight">
            <summary>Docked to the right edge.</summary>
        </member>
        <member name="F:Netron.Neon.DockState.Hidden">
            <summary>The window is hidden.</summary>
        </member>
        <member name="T:Netron.Neon.DockAlignment">
            <summary>Specifies the edge for nested docking.</summary>
        </member>
        <member name="F:Netron.Neon.DockAlignment.Left">
            <summary>The <see cref="!:WeifenLuo.WinFormsUI.DockPane" />'s left edge is docked to its
			containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" />'s left edge.</summary>
        </member>
        <member name="F:Netron.Neon.DockAlignment.Right">
            <summary>The <see cref="!:WeifenLuo.WinFormsUI.DockPane" />'s right edge is docked to its
			containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" />'s right edge.</summary>
        </member>
        <member name="F:Netron.Neon.DockAlignment.Top">
            <summary>The <see cref="!:WeifenLuo.WinFormsUI.DockPane" />'s top edge is docked to its
			containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" />'s top edge.</summary>
        </member>
        <member name="F:Netron.Neon.DockAlignment.Bottom">
            <summary>The <see cref="!:WeifenLuo.WinFormsUI.DockPane" />'s bottom edge is docked to its
			containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" />'s bottom edge.</summary>
        </member>
        <member name="T:Netron.Neon.DockContentEventArgs">
            <summary>Provides data for <see cref="!:WeifenLuo.WinFormsUI.DockPanel.ContentAdded" /> and 
			<see cref="!:WeifenLuo.WinFormsUI.DockPanel.ContentRemoved" /> events.</summary>
        </member>
        <member name="M:Netron.Neon.DockContentEventArgs.#ctor(Netron.Neon.DockContent)">
            <summary>Initializes a new instance of <see cref="!:WeifenLuo.WinFormsUI.DockContentEventArgs" /> class.</summary><param name="content">The <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object.</param>
        </member>
        <member name="P:Netron.Neon.DockContentEventArgs.Content">
            <summary>Gets the <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.DockContent" /> object.</value>
        </member>
        <member name="T:Netron.Neon.FloatWindow">
            <summary>Represents the floating window to contain the nested docking DockPane.</summary><remarks>
				The <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" /> implements <see cref="!:WeifenLuo.WinFormsUI.IDockListContainer" />,
				it can contain a list of nested <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.
			</remarks>
        </member>
        <member name="M:Netron.Neon.FloatWindow.#ctor(Netron.Neon.DockPanel,Netron.Neon.DockPane)">
            <overloads>
				<summary>Initializes a new instance of <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />.</summary>
			</overloads>
            <summary>Initializes a new instance of <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />,
			with default size and location.</summary><param name="dockPanel">The <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> which owns this
			<see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />.</param><param name="pane">The first <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> in this
			<see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />.</param>
        </member>
        <member name="M:Netron.Neon.FloatWindow.#ctor(Netron.Neon.DockPanel,Netron.Neon.DockPane,System.Drawing.Rectangle)">
            <summary>Initializes a new instance of <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />,
			with specified size and location.</summary><param name="dockPanel">The <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> which owns this
			<see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />.</param><param name="pane">The first <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> in this
			<see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />.</param><param name="bounds">A <see cref="T:System.Drawing.Rectangle" /> for the location and size of the window.</param>
        </member>
        <member name="M:Netron.Neon.FloatWindow.Dispose(System.Boolean)">
            <exclude/>
        </member>
        <member name="P:Netron.Neon.FloatWindow.AllowRedocking">
            <summary>Gets or sets if the drag and drop re-docking is allowed.</summary><value><b>True</b> if drag and drop re-docking is allowed; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Netron.Neon.FloatWindow.DefaultSize">
            <exclude />
        </member>
        <member name="P:Netron.Neon.FloatWindow.DockList">
            <summary>Gets the <see cref="!:WeifenLuo.WinFormsUI.DockList" /> which contains
			a list of nested docking <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.DockList" /> which contains
			a list of nested docking <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</value>
        </member>
        <member name="P:Netron.Neon.FloatWindow.DisplayingList">
            <summary>Gets the <see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" /> which contains
			a list of visible nested docking <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" /> which contains
			a list of visible nested docking <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</value>
        </member>
        <member name="P:Netron.Neon.FloatWindow.DockPanel">
            <summary>Gets the <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> which contains this
			<see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.DockPanel" /> which contains this
			<see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />.</value>
        </member>
        <member name="P:Netron.Neon.FloatWindow.DockState">
            <summary>Gets the docking state of this <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />.</summary><value>The value of this property is always <see cref="!:WeifenLuo.WinFormsUI.DockState.Float" />.</value>
        </member>
        <member name="P:Netron.Neon.FloatWindow.IsFloat">
            <summary>Gets to determine if this <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" /> is floating.</summary><value>The value of this property is always <b>true</b>.</value>
        </member>
        <member name="M:Netron.Neon.FloatWindow.OnActivated(System.EventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.FloatWindow.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.FloatWindow.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.FloatWindow.WndProc(System.Windows.Forms.Message@)">
            <exclude/>
        </member>
        <member name="P:Netron.Neon.FloatWindow.DisplayingRectangle">
            <summary>Gets the rectangle represents the displaying area for nested docking DockPane objects.</summary><value>A <see cref="T:System.Drawing.Rectangle" /> represents the displaying area for nested docking DockPane objects.</value>
        </member>
        <member name="T:Netron.Neon.FloatWindowCollection">
            <summary>Provides methods to manage a collection of <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" /> objects.</summary>&gt;
        </member>
        <member name="P:Netron.Neon.FloatWindowCollection.Item(System.Int32)">
            <summary>
			<para>Gets a <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" /> at the specified index.</para>
			<para>In C#, this property is the indexer for the <see cref="!:WeifenLuo.WinFormsUI.FloatWindowCollection" /> class.</para>
			</summary>&gt;
        </member>
        <member name="M:Netron.Neon.FloatWindowCollection.Contains(Netron.Neon.FloatWindow)">
            <summary>
			Determines whether a <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" /> is in the
			<see cref="!:WeifenLuo.WinFormsUI.FloatWindowCollection" />.
		</summary><param name="fw">
			The <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" /> to locate in
			<see cref="!:WeifenLuo.WinFormsUI.FloatWindowCollection" />.
		</param><returns>
			<b>true</b> if <paramref name="fw" /> is found in the
			<see cref="!:WeifenLuo.WinFormsUI.FloatWindowCollection" />;
			otherwise, <b>false</b>.
		</returns>&gt;
        </member>
        <member name="M:Netron.Neon.FloatWindowCollection.IndexOf(Netron.Neon.FloatWindow)">
            <summary>
			Searches for the specified <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />
			and returns the zero-based index within the entire
			<see cref="!:WeifenLuo.WinFormsUI.FloatWindowCollection" />.
		</summary><param name="fw">
			The <see cref="!:WeifenLuo.WinFormsUI.FloatWindow" />
			to locate in the <see cref="!:WeifenLuo.WinFormsUI.FloatWindowCollection" />
		</param><returns>
			The zero-based index of <paramref name="fw" /> within the entire
			<see cref="!:WeifenLuo.WinFormsUI.FloatWindowCollection" />, if found;
			otherwise, -1.
		</returns>&gt;
        </member>
        <member name="T:Netron.Neon.IDockListContainer">
            <summary>Container for nested docking <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</summary><remarks>
				<para>
				<b>IDockListContainer</b> contains a list of <b>DockPane</b> objects
				for nested docking. It maintans two lists: <see cref="!:WeifenLuo.WinFormsUI.DockList" />
				and <see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" />. <b>DockList</b>
				contains all <b>DockPane</b> objects, no matter it's visible or not; <b>DisplayingDockList</b> contains only
				visible <b>DockPane</b> objects for this container.
			</para>
				<para>
				Internally, <b>IDockListContainer</b> creates <b>DockList</b>, this <b>DockList</b> then creates <b>DisplayingDockList</b>,
				and these two lists are always synchronized.
			</para>
			</remarks>
        </member>
        <member name="P:Netron.Neon.IDockListContainer.DockState">
            <summary>Gets the docking state of this container.</summary><value>One of the <see cref="!:WeifenLuo.WinFormsUI.DockState" /> values.</value>
        </member>
        <member name="P:Netron.Neon.IDockListContainer.DisplayingRectangle">
            <summary>Gets the rectangle represents the displaying area for nested docking DockPane objects.</summary><value>A <see cref="T:System.Drawing.Rectangle" /> represents the displaying area for nested docking DockPane objects.</value>
        </member>
        <member name="P:Netron.Neon.IDockListContainer.DockList">
            <summary>Gets the <see cref="!:WeifenLuo.WinFormsUI.DockList" /> which contains
			a list of nested docking <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.DockList" /> which contains
			a list of nested docking <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</value>
        </member>
        <member name="P:Netron.Neon.IDockListContainer.DisplayingList">
            <summary>Gets the <see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" /> which contains
			a list of visible nested docking <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</summary><value>The <see cref="!:WeifenLuo.WinFormsUI.DisplayingDockList" /> which contains
			a list of visible nested docking <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> objects.</value>
        </member>
        <member name="P:Netron.Neon.IDockListContainer.IsDisposed">
            <summary>Gets a value indicates the control has been disposed of.</summary><value><b>True</b> if the control has been disposed of, otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Netron.Neon.IDockListContainer.IsFloat">
            <summary>Determines if this container window is floating.</summary><value><b>True</b> if is floating; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:Netron.Neon.NestedDockingStatus">
            <summary>Provides nested docking information for a <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</summary>
        </member>
        <member name="P:Netron.Neon.NestedDockingStatus.DockPane">
            <summary>Gets the containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</summary><value>The containing <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</value>
        </member>
        <member name="P:Netron.Neon.NestedDockingStatus.DockList">
            <summary>Gets the containing <see cref="!:WeifenLuo.WinFormsUI.DockList" />.</summary><value>The containing <see cref="!:WeifenLuo.WinFormsUI.DockList" />.</value>
        </member>
        <member name="P:Netron.Neon.NestedDockingStatus.PrevPane">
            <summary>Gets the target Gets the target <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to dock.</summary><value>A <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> object that represents the target <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to dock.</value>
        </member>
        <member name="P:Netron.Neon.NestedDockingStatus.Alignment">
            <summary>Gets the edge of the target <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to dock.</summary><value>One of the <see cref="!:WeifenLuo.WinFormsUI.DockAlignment" /> values.</value>
        </member>
        <member name="P:Netron.Neon.NestedDockingStatus.Proportion">
            <summary>Gets the size for the nested docking.</summary><value>A value between 0 and 1 to indicate the size for the nested docking.</value>
        </member>
        <member name="P:Netron.Neon.NestedDockingStatus.IsDisplaying">
            <summary>Gets the value to indicate if current <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> is being displayed.</summary><value><b>true</b> if current <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> is being displayed, otherwise, <b>false</b>.</value>
        </member>
        <member name="P:Netron.Neon.NestedDockingStatus.DisplayingPrevPane">
            <summary>Gets the target <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to dock, when displaying.</summary><value>A <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> object that represents the target <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to dock, when displaying.</value>
        </member>
        <member name="P:Netron.Neon.NestedDockingStatus.DisplayingAlignment">
            <summary>Gets the edge of the target <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> to dock, when displaying.</summary><value>One of the <see cref="!:WeifenLuo.WinFormsUI.DockAlignment" /> values.</value>
        </member>
        <member name="P:Netron.Neon.NestedDockingStatus.DisplayingProportion">
            <summary>Gets the size for the nested docking, when displaying.</summary><value>A value between 0 and 1 to indicate the size for the nested docking.</value>
        </member>
        <member name="P:Netron.Neon.NestedDockingStatus.LogicalBounds">
            <summary>Gets the logical location and size of the <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</summary><value>The <see cref="T:System.Drawing.Rectangle" /> to represent the logical location and size of the
			<see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</value>
        </member>
        <member name="P:Netron.Neon.NestedDockingStatus.PaneBounds">
            <summary>Gets the actual location and size of the <see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</summary><value>The <see cref="T:System.Drawing.Rectangle" /> to represent the actual location and size of the
			<see cref="!:WeifenLuo.WinFormsUI.DockPane" />.</value>
        </member>
        <member name="P:Netron.Neon.NestedDockingStatus.SplitterBounds">
            <summary>Gets the location and size of the <see cref="!:WeifenLuo.WinFormsUI.DockPane" /> splitter.</summary><value>The <see cref="T:System.Drawing.Rectangle" /> to represent the location and size of the
			<see cref="!:WeifenLuo.WinFormsUI.DockPane" /> splitter.</value>
        </member>
        <member name="T:Netron.Neon.Docking.Extenders.Blue.ColorMixer">
            <summary>
            Holds the colors of the UI
            </summary>
        </member>
        <member name="F:Netron.Neon.Docking.Extenders.Blue.ColorMixer.DarkColor">
            <summary>
            The main color on which the overall design is based.
            If there is a gradient this is the darker color.
            </summary>
        </member>
        <member name="F:Netron.Neon.Docking.Extenders.Blue.ColorMixer.LightColor">
            <summary>
            The complementary color of the design.
            If there is a gradient this is the lighter color.
            </summary>
        </member>
        <member name="T:Netron.Neon.Docking.Extenders.Blue.AutoHideStripFromBase">
            <summary>
            Customizes the auto-hide strip (the tabs shown when the page is hidden)
            </summary>
        </member>
        <member name="P:Netron.Neon.Docking.Extenders.Blue.DockPaneStripFromBase.Components">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.Docking.Extenders.Blue.DockPaneStripFromBase.Dispose(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.Docking.Extenders.Blue.DockPaneStripFromBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.Docking.Extenders.Blue.DockPaneStripFromBase.DrawTab_ToolWindow(System.Drawing.Graphics,Netron.Neon.DockContent,System.Drawing.Rectangle)">
            <summary>
            Draws the tabs of a toolwindow/pane
            </summary>
            <param name="g"></param>
            <param name="content"></param>
            <param name="rect"></param>
        </member>
        <member name="M:Netron.Neon.Docking.Extenders.Blue.DockPaneStripFromBase.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="T:Netron.Neon.Docking.Extenders.VS2005.ColorMixer">
            <summary>
            Holds the colors of the UI
            </summary>
        </member>
        <member name="F:Netron.Neon.Docking.Extenders.VS2005.ColorMixer.DarkColor">
            <summary>
            The main color on which the overall design is based.
            If there is a gradient this is the darker color.
            </summary>
        </member>
        <member name="F:Netron.Neon.Docking.Extenders.VS2005.ColorMixer.LightColor">
            <summary>
            The complementary color of the design.
            If there is a gradient this is the lighter color.
            </summary>
        </member>
        <member name="T:Netron.Neon.Docking.Extenders.VS2005.AutoHideStripFromBase">
            <summary>
            Customizes the auto-hide strip (the tabs shown when the page is hidden)
            </summary>
        </member>
        <member name="P:Netron.Neon.Docking.Extenders.VS2005.DockPaneStripFromBase.Components">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.Docking.Extenders.VS2005.DockPaneStripFromBase.Dispose(System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.Docking.Extenders.VS2005.DockPaneStripFromBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <exclude/>
        </member>
        <member name="M:Netron.Neon.Docking.Extenders.VS2005.DockPaneStripFromBase.DrawTab_ToolWindow(System.Drawing.Graphics,Netron.Neon.DockContent,System.Drawing.Rectangle)">
            <summary>
            Draws the tabs of a toolwindow/pane
            </summary>
            <param name="g"></param>
            <param name="content"></param>
            <param name="rect"></param>
        </member>
        <member name="M:Netron.Neon.Docking.Extenders.VS2005.DockPaneStripFromBase.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <exclude/>
        </member>
        <member name="T:Netron.Neon.DrawUtil">
            <summary>
            Summary description for DrawUtil.
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Category">
            <summary>
            The class <c>Category</c> implements methods/properties for handling an information category
            </summary>
            <remarks>Note: Information types and categories allow users to filter help contents. 
            They are only supported if using sitemap TOC and/or sitemap Index.</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Category.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Category.#ctor(System.String,System.String)">
            <summary>
            Standard constructor
            </summary>
            <param name="name">name of the category</param>
            <param name="description">description</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Category.#ctor(System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Standard constructor
            </summary>
            <param name="name">name of the category</param>
            <param name="description">description</param>
            <param name="linkedInformationTypes">Arraylist of InformationType instances which applies to this category</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Category.Dump(System.IO.BinaryWriter@)">
            <summary>
            Dump the class data to a binary writer
            </summary>
            <param name="writer">writer to write the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Category.ReadDump(System.IO.BinaryReader@,Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Reads the object data from a dump store
            </summary>
            <param name="reader">reader to read the data</param>
            <param name="chmFile">current CHMFile instance which reads from dump</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Category.MergeInfoTypes(Netron.Neon.HtmlHelp.Category)">
            <summary>
            Merges the lineked information types from cat into this instance
            </summary>
            <param name="cat">category instance</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Category.ReferenceCount">
            <summary>
            Gets/Sets the reference count of this information type instance
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Category.Name">
            <summary>
            Gets/Sets the name of the information type
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Category.Description">
            <summary>
            Gets/Sets the description of the information type
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Category.InformationTypes">
            <summary>
            Gets an ArrayList with the linked Information types
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Category.AddInformationType(Netron.Neon.HtmlHelp.InformationType)">
            <summary>
            Adds a new information type to the category
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Category.RemoveInformationType(Netron.Neon.HtmlHelp.InformationType)">
            <summary>
            Removes an information type from the category
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Category.ContainsInformationType(Netron.Neon.HtmlHelp.InformationType)">
            <summary>
            Checks if the category contains an information type
            </summary>
            <param name="type">information type instance to check</param>
            <returns>Return true if the information type is part of this category</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Category.ContainsInformationType(System.String)">
            <summary>
            Checks if the category contains an information type
            </summary>
            <param name="name">name of the information type</param>
            <returns>Return true if the information type is part of this category</returns>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.BinaryReaderHelp">
            <summary>
            The class <c>BinaryReaderHelp</c> implements static helper methods for extracting binary data 
            from a binary reader object.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.BinaryReaderHelp.ExtractString(System.IO.BinaryReader@,System.Int32,System.Boolean,System.Text.Encoding)">
            <summary>
            Internal helper method to extract null-terminated strings from a binary reader
            </summary>
            <param name="binReader">reference to the binary reader</param>
            <param name="offset">offset in the stream</param>
            <param name="noOffset">true if the offset value should be used</param>
            <param name="encoder">encoder used for text encoding</param>
            <returns>An extracted string value</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.BinaryReaderHelp.ExtractString(System.IO.BinaryReader@,System.Int32,System.Int32,System.Boolean,System.Text.Encoding)">
            <summary>
            Internal helper method to extract a string with a specific length from the binary reader
            </summary>
            <param name="binReader">reference to the binary reader</param>
            <param name="length">length of the string (number of bytes)</param>
            <param name="offset">offset in the stream</param>
            <param name="noOffset">true if the offset value should be used</param>
            <param name="encoder">encoder used for text encoding</param>
            <returns>An extracted string value</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.BinaryReaderHelp.ExtractString(System.IO.BinaryReader@,System.Boolean@,System.Int32,System.Boolean,System.Text.Encoding)">
            <summary>
            Internal helper method to extract a string with a specific length from the binary reader
            </summary>
            <param name="binReader">reference to the binary reader</param>
            <param name="bFoundTerminator">reference to a bool vairable which will receive true if the
            string terminator \0 was found. false indicates that the end of the stream was reached.</param>
            <param name="offset">offset in the stream</param>
            <param name="noOffset">true if the offset value should be used</param>
            <param name="encoder">encoder used for text encoding</param>
            <returns>An extracted string value</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.BinaryReaderHelp.ExtractUTF16String(System.IO.BinaryReader@,System.Int32,System.Boolean,System.Text.Encoding)">
            <summary>
            Internal helper method to extract a null-terminated UTF-16/UCS-2 strings from a binary reader
            </summary>
            <param name="binReader">reference to the binary reader</param>
            <param name="offset">offset in the stream</param>
            <param name="noOffset">true if the offset value should be used</param>
            <param name="encoder">encoder used for text encoding</param>
            <returns>An extracted string value</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.BinaryReaderHelp.ReadENCINT(System.IO.BinaryReader@)">
            <summary>
            Internal helper for reading ENCINT encoded integer values
            </summary>
            <param name="binReader">reference to the reader</param>
            <returns>a long value</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.BinaryReaderHelp.ReadSRItem(System.Byte[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Reads an s/r encoded value from the byte array and decodes it into an integer
            </summary>
            <param name="wclBits">a byte array containing all bits (contains only 0 or 1 elements)</param>
            <param name="s">scale param for encoding</param>
            <param name="r">root param for encoding</param>
            <param name="nBitIndex">current index in the wclBits array</param>
            <returns>Returns an decoded integer value.</returns>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree">
            <summary>
            The class <c>CHMBtree</c> implements methods/properties to decode the binary help index. 
            This class automatically creates an index arraylist for the current CHMFile instance. 
            It does not store the index internally !
            </summary>
            <remarks>The binary index can be found in the storage file $WWKeywordLinks/BTree</remarks>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree.BLOCK_SIZE">
            <summary>
            Constant specifying the size of the string blocks
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree.disposed">
            <summary>
            Internal flag specifying if the object is going to be disposed
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree._binaryFileData">
            <summary>
            Internal member storing the binary file data
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree._flags">
            <summary>
            Internal member storing flags
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree._dataFormat">
            <summary>
            Internal member storing the data format
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree._indexOfLastListingBlock">
            <summary>
            Internal member storing the index of the last listing block
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree._indexOfRootBlock">
            <summary>
            Internal member storing the index of the root block
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree._numberOfBlocks">
            <summary>
            Internal member storing the number of blocks
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree._treeDepth">
            <summary>
            Internal member storing the tree depth. 
            (1 if no index blocks, 2 one level of index blocks, ...)
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree._numberOfKeywords">
            <summary>
            Internal member storing the number of keywords in the file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree._codePage">
            <summary>
            Internal member storing the codepage
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree._isCHI_CHM">
            <summary>
            true if the index is from a CHI or CHM file, else CHW
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree._associatedFile">
            <summary>
            Internal member storing the associated chmfile object
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree._readListingBlocks">
            <summary>
            Internal flag specifying if we have to read listing or index blocks
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree._indexList">
            <summary>
            Internal member storing an indexlist of the current file.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree.#ctor(System.Byte[],Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Constructor of the class
            </summary>
            <param name="binaryFileData">binary file data of the $WWKeywordLinks/BTree file</param>
            <param name="associatedFile">associated chm file</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree.DecodeData">
            <summary>
            Decodes the binary file data and fills the internal properties
            </summary>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree.DecodeBlock(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Decodes a block of url-string data
            </summary>
            <param name="dataBlock">block of data</param>
            <param name="nOffset">current file offset</param>
            <param name="indexBlocks">number of index blocks</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree.IndexList">
            <summary>
            Gets the internal generated index list
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree.Dispose">
            <summary>
            Implement IDisposable.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMBtree.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios. 
            If disposing equals true, the method has been called directly 
            or indirectly by a user's code. Managed and unmanaged resources 
            can be disposed. 
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference  
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">disposing flag</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.HtmlHelpFileType">
            <summary>
            Internal enumeration for specifying the type of the html-help file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HtmlHelpFileType.CHM">
            <summary>
            CHM - compiled contents file
            </summary>
            <remarks>A file with this extension must always exist. If the file would be too long, some parts 
            can be splitted into the filestypes below.</remarks>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HtmlHelpFileType.CHI">
            <summary>
            CHI - compiled system file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HtmlHelpFileType.CHQ">
            <summary>
            CHQ - compiled fulltext search file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HtmlHelpFileType.CHW">
            <summary>
            CHW - compiled index file
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile">
            <summary>
            The class <c>CHMFile</c> implemts methods and properties for handling a single chmfile.
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._systemInstance">
            <summary>
            Internal member storing a reference to the hosting HtmlHelpSystem instance
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._onlySystem">
            <summary>
            Internal flag specifying if only system data has been loaded
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.disposed">
            <summary>
            Internal flag specifying if the object is going to be disposed
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._toc">
            <summary>
            Internal arraylist containing the table of contents
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._mergeLinks">
            <summary>
            Internal arraylist containing items of the toc which are merge-Links
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._informationTypes">
            <summary>
            Internal member storing the read information types
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._categories">
            <summary>
            Internal member storing the read categories
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._indexKLinks">
            <summary>
            Internal arraylist containing the index (klinks)
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._indexALinks">
            <summary>
            Internal arraylist containing the index (alinks)
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._chmFileName">
            <summary>
            Internal member storing the full filename
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._chiFileName">
            <summary>
            Internal member storing the full filename of the chi-file (includes all system files)
            The file name is zero-length if there is no chi-file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._chwFileName">
            <summary>
            Internal member storing the full filename of the chw-file (includes the help index)
            The file name is zero-length if there is no chw-file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._chqFileName">
            <summary>
            Internal member storing the full filename of the chq-file (includes the fulltext contents)
            The file name is zero-length if there is no chq-file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._systemFile">
            <summary>
            Internal member storing the decoded information from the internal #SYSTEM file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._idxhdrFile">
            <summary>
            Internal member storing the decoded information from the internal #IDXHDR file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._stringsFile">
            <summary>
            Internal member storing the decoded information from the internal #STRINGS file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._urlstrFile">
            <summary>
            Internal member storing the decoded information from the internal #URLSTR file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._urltblFile">
            <summary>
            Internal member storing the decoded information from the internal #URLTBL file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._topicsFile">
            <summary>
            Internal member storing the decoded information from the internal #TOPICS file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._tocidxFile">
            <summary>
            Internal member storing the decoded information from the internal #TOCIDX file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._kLinks">
            <summary>
            Internal member storing the decoded information from the internal binary index file (KLinks).
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._aLinks">
            <summary>
            Internal member storing the decoded information from the internal binary index file (ALinks).
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._ftSearcher">
            <summary>
            Internal member storing the fulltext searcher for this file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._textEncoding">
            <summary>
            Internal member storing the default encoder
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._chmFileInfo">
            <summary>
            Internal memebr storing the chm file info
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._mustWriteDump">
            <summary>
            Internal flag specifying if the dump must be written (if enabled)
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._dumpRead">
            <summary>
            Internal flag specifying if data was read using the dump
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._dumpReadTrys">
            <summary>
            Internal member for specifying the number of dump-reading trys.
            If dump-reading fails, this is used that it will not be opened a second time
            (in CHM-Systems with CHM, CHI, etc. files)
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._dmpInfo">
            <summary>
            Internal member storing the dumping info instance
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile._currentWrapper">
            <summary>
            This member contains an instance to the currently used itstorage wrapper.
            This will be not null during file read operations !
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.#ctor(Netron.Neon.HtmlHelp.HtmlHelpSystem,System.String)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="systemInstance">a reference to the hosting HtmlHelpSystem instance</param>
            <param name="chmFile">chm file to read</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.#ctor(Netron.Neon.HtmlHelp.HtmlHelpSystem,System.String,Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="systemInstance">a reference to the hosting HtmlHelpSystem instance</param>
            <param name="chmFile">chm file to read</param>
            <param name="dmpInfo">A dumping info class</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.#ctor(Netron.Neon.HtmlHelp.HtmlHelpSystem,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="systemInstance">a reference to the hosting HtmlHelpSystem instance</param>
            <param name="chmFile">chm file to read</param>
            <param name="onlySystemData">true if only system data should be extracted (no index or toc)</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.#ctor(Netron.Neon.HtmlHelp.HtmlHelpSystem,System.String,System.Boolean,Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="systemInstance">a reference to the hosting HtmlHelpSystem instance</param>
            <param name="chmFile">chm file to read</param>
            <param name="onlySystemData">true if only system data should be extracted (no index or toc)</param>
            <param name="dmpInfo">A dumping info class</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.ReadFile(System.String,Netron.Neon.HtmlHelp.ChmDecoding.HtmlHelpFileType)">
            <summary>
            Read a IStorage file
            </summary>
            <param name="fname">filename</param>
            <param name="type">type of file</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.EnumFilesByExtension(System.String)">
            <summary>
            Enumerates the files in the chm storage and gets all files matching a given extension.
            </summary>
            <param name="extension">extension to return</param>
            <returns>Returns an arraylist of filenames or null if nothing found</returns>
            <remarks>On large CHMs, enumerations are very slow. Only use it if necessary !</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.GetTOCItemByLocal(System.String)">
            <summary>
            Searches an TOC entry using the local
            </summary>
            <param name="local">local to search</param>
            <returns>Returns the TOC item</returns>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.ChmWrapper">
            <summary>
            Gets an ITStorageWrapper of the current CHMFile
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.GetTOCItemByLocal(System.Collections.ArrayList,System.String)">
            <summary>
            Recursively searches an TOC entry using its local
            </summary>
            <param name="arrTOC">toc level list</param>
            <param name="local">local to search</param>
            <returns>Returns the TOC item</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.RemoveTOCItem(Netron.Neon.HtmlHelp.TOCItem)">
            <summary>
            Removes a TOCItem from the toc
            </summary>
            <param name="rem">item to remove</param>
            <returns>Returns true if removed</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.RemoveTOCItem(System.Collections.ArrayList,Netron.Neon.HtmlHelp.TOCItem)">
            <summary>
            Recursively searches a TOCItem and removes it if found
            </summary>
            <param name="arrTOC">toc level list</param>
            <param name="rem">item to remove</param>
            <returns>Returns true if removed</returns>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.HasInformationTypes">
            <summary>
            Returns true if the HtmlHelpSystem instance contains 1 or more information types
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.HasCategories">
            <summary>
            Returns true if the HtmlHelpSystem instance contains 1 or more categories
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.InformationTypes">
            <summary>
            Gets an ArrayList of <see cref="T:Netron.Neon.HtmlHelp.InformationType">InformationType</see> items
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.Categories">
            <summary>
            Gets an ArrayList of <see cref="T:Netron.Neon.HtmlHelp.Category">Category</see> items
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.GetInformationType(System.String)">
            <summary>
            Gets the information type specified by its name
            </summary>
            <param name="name">name of the information type to receive</param>
            <returns>Returns the Instance for the name or null if not found</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.GetCategory(System.String)">
            <summary>
            Gets the category specifiyd by its name
            </summary>
            <param name="name">name of the category</param>
            <returns>Returns the Instance for the name or null if not found</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.ParseHHC(System.String)">
            <summary>
            Parses a HHC file which is located in the current CHM.
            </summary>
            <param name="hhcFile">hhc file to parse</param>
            <returns>an arraylist with toc items</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.CheckDump(Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo)">
            <summary>
            Checks if a dump for this file exists and if it can be read
            </summary>
            <param name="dmpInfo">dumping info class</param>
            <returns>true if it can be read</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.SaveDump(Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo)">
            <summary>
            Saves the the toc and index into a data dump
            </summary>
            <param name="dmpInfo">dumping info</param>
            <returns>true if succeed</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.LoadDump(Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo)">
            <summary>
            Loads the toc and index from a data dump
            </summary>
            <param name="dmpInfo">dumping info</param>
            <returns>true if succeed</returns>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.CurrentStorageWrapper">
            <summary>
            Gets the current storage wrapper.
            </summary>
            <remarks>This property will return not null, if there are currently file read actions running !</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.SystemInstance">
            <summary>
            Gets/sets the hosting HtmlHelpSystem instance
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.MergLinks">
            <summary>
            Gets an arraylist of TOC items which contains merg-links to other CHMs
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.SystemFile">
            <summary>
            Gets the internal system file instance
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.IdxHdrFile">
            <summary>
            Gets the internal idxhdr file instance
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.StringsFile">
            <summary>
            Gets the internal strings file instance
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.UrlstrFile">
            <summary>
            Gets the internal urlstr file instance
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.UrltblFile">
            <summary>
            Gets the internal urltbl file instance
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.TopicsFile">
            <summary>
            Gets the internal topics file instance
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.TocidxFile">
            <summary>
            Gets the internal tocidx file instance
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.ALinksFile">
            <summary>
            Gets the internal btree file instance for alinks
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.KLinksFile">
            <summary>
            Gets the internal btree file instance for klinks
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.TextEncoding">
            <summary>
            Gets/Sets the text encoding
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.FileVersion">
            <summary>
            Gets the file version of the chm file. 
            2 for Compatibility=1.0,  3 for Compatibility=1.1
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.ContentsFile">
            <summary>
            Gets the contents file name
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.IndexFile">
            <summary>
            Gets the index file name
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.DefaultTopic">
            <summary>
            Gets the default help topic
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.HelpWindowTitle">
            <summary>
            Gets the title of the help window
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.DBCS">
            <summary>
            Gets the flag if DBCS is in use
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.FullTextSearch">
            <summary>
            Gets the flag if full-text-search is available
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.HasALinks">
            <summary>
            Gets the flag if the file has ALinks
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.HasKLinks">
            <summary>
            Gets the flag if the file has KLinks
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.DefaultWindow">
            <summary>
            Gets the default window name
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.CompileFile">
            <summary>
            Gets the file name of the compile file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.BinaryIndex">
            <summary>
            Gets the flag if the chm has a binary index file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.CompilerVersion">
            <summary>
            Gets the flag if the chm has a binary index file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.BinaryTOC">
            <summary>
            Gets the flag if the chm has a binary toc file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.FontFace">
            <summary>
            Gets the font face of the read font property.
            Empty string for default font.
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.FontSize">
            <summary>
            Gets the font size of the read font property.
            0 for default font size
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.CharacterSet">
            <summary>
            Gets the character set of the read font property
            1 for default
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.CodePage">
            <summary>
            Gets the codepage depending on the read font property
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.Culture">
            <summary>
            Gets the assiciated culture info
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.NumberOfTopicNodes">
            <summary>
            Gets the number of topic nodes including the contents and index files
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.ImageList">
            <summary>
            Gets the ImageList string specyfied in the #IDXHDR file.
            </summary>
            <remarks>This property uses the #STRINGS file to extract the string at a given offset.</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.ImageTypeFolder">
            <summary>
            True if the value of the ImageType param of the 
            "text/site properties" object of the sitemap contents is "Folder". 
            </summary>
            <remarks>If this is set to true, the help will display folders instead of books</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.Background">
            <summary>
            Gets the background setting 
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.Foreground">
            <summary>
            Gets the foreground setting 
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.FontName">
            <summary>
            Gets the Font string specyfied in the #IDXHDR file.
            </summary>
            <remarks>This property uses the #STRINGS file to extract the string at a given offset.</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.FrameName">
            <summary>
            Gets the FrameName string specyfied in the #IDXHDR file.
            </summary>
            <remarks>This property uses the #STRINGS file to extract the string at a given offset.</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.WindowName">
            <summary>
            Gets the WindowName string specyfied in the #IDXHDR file.
            </summary>
            <remarks>This property uses the #STRINGS file to extract the string at a given offset.</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.MergedFiles">
            <summary>
            Gets a string array containing the merged file names
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.FileInfo">
            <summary>
            Gets the file info associated with this instance
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.TOC">
            <summary>
            Gets the internal toc read from the text-based hhc file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.IndexKLinks">
            <summary>
            Gets the internal index read from the chm file.
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.IndexALinks">
            <summary>
            Gets the internal index read from the chm file.
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.FullTextSearchEngine">
            <summary>
            Gets the full-text search engine for this file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.ChmFilePath">
            <summary>
            Gets the full pathname of the file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.ChiFilePath">
            <summary>
            Gets the full pathname of the chi-file
            The file name is zero-length if there is no chi-file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.ChwFilePath">
            <summary>
            Gets the full pathname of the chw-file
            The file name is zero-length if there is no chw-file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.ChqFilePath">
            <summary>
            Gets the full pathname of the chq-file
            The file name is zero-length if there is no chq-file
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.FormURL(System.String)">
            <summary>
            Forms an URL for the web browser
            </summary>
            <param name="local">local resource</param>
            <returns>a url for the web-browser</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.Dispose">
            <summary>
            Implement IDisposable.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios. 
            If disposing equals true, the method has been called directly 
            or indirectly by a user's code. Managed and unmanaged resources 
            can be disposed. 
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference  
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">disposing flag</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr">
            <summary>
            The class <c>CHMIdxhdr</c> implements t properties which have been read from the #IDXHDR file.
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr.disposed">
            <summary>
            Internal flag specifying if the object is going to be disposed
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr._binaryFileData">
            <summary>
            Internal member storing the binary file data
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr._numberOfTopicNodes">
            <summary>
            Internal member storing the number of topic nodes including the contents and index files
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr._imageListOffset">
            <summary>
            Internal member storing the offset in the #STRINGS file of the ImageList param of the "text/site properties" object of the sitemap contents
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr._imageTypeFolder">
            <summary>
            True if the value of the ImageType param of the "text/site properties" object of the sitemap contents is "Folder". 
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr._background">
            <summary>
            Internal member storing the background value
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr._foreground">
            <summary>
            Internal member storing the foreground value
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr._fontOffset">
            <summary>
            Internal member storing the offset in the #STRINGS file of the Font param of the "text/site properties" object of the sitemap contents
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr._frameNameOffset">
            <summary>
            Internal member storing the offset in the #STRINGS file of the FrameName param of the "text/site properties" object of the sitemap contents
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr._windowNameOffset">
            <summary>
            Internal member storing the offset in the #STRINGS file of the WindowName param of the "text/site properties" object of the sitemap contents
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr._numberOfMergedFiles">
            <summary>
            Internal member storing the number of merged files
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr._mergedFileOffsets">
            <summary>
            Internal member storing the offset in the #STRINGS file of the merged file names
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr._associatedFile">
            <summary>
            Internal member storing the associated chmfile object
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr.#ctor(System.Byte[],Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Constructor of the class
            </summary>
            <param name="binaryFileData">binary file data of the #IDXHDR file</param>
            <param name="associatedFile">associated CHMFile instance</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr.DecodeData">
            <summary>
            Decodes the binary file data and fills the internal properties
            </summary>
            <returns>true if succeeded</returns>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr.NumberOfTopicNodes">
            <summary>
            Gets the number of topic nodes including the contents and index files
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr.ImageListOffset">
            <summary>
            Gets the offset in the #STRINGS file of the ImageList 
            param of the "text/site properties" object of the sitemap contents
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr.ImageTypeFolder">
            <summary>
            True if the value of the ImageType param of the 
            "text/site properties" object of the sitemap contents is "Folder". 
            </summary>
            <remarks>If this is set to true, the help will display folders instead of books</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr.Background">
            <summary>
            Gets the background setting 
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr.Foreground">
            <summary>
            Gets the foreground setting 
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr.WindowNameOffset">
            <summary>
            Gets the offset in the #STRINGS file of the Font 
            param of the "text/site properties" object of the sitemap contents
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr.FrameNameOffset">
            <summary>
            Gets the offset in the #STRINGS file of the FrameName 
            param of the "text/site properties" object of the sitemap contents
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr.FontOffset">
            <summary>
            Gets the offset in the #STRINGS file of the WindowName 
            param of the "text/site properties" object of the sitemap contents
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr.MergedFileOffsets">
            <summary>
            Gets an array list of offset numbers in the #STRINGS file of the 
            merged file names.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr.Dispose">
            <summary>
            Implement IDisposable.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMIdxhdr.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios. 
            If disposing equals true, the method has been called directly 
            or indirectly by a user's code. Managed and unmanaged resources 
            can be disposed. 
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference  
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">disposing flag</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings">
            <summary>
            The class <c>CHMStrings</c> implements a string collection read from the #STRINGS file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings.STRING_BLOCK_SIZE">
            <summary>
            Constant specifying the size of the string blocks
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings.disposed">
            <summary>
            Internal flag specifying if the object is going to be disposed
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings._binaryFileData">
            <summary>
            Internal member storing the binary file data
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings._stringDictionary">
            <summary>
            Internal member storing the string dictionary
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings._associatedFile">
            <summary>
            Internal member storing the associated chmfile object
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings.#ctor(System.Byte[],Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Constructor of the class
            </summary>
            <param name="binaryFileData">binary file data of the #STRINGS file</param>
            <param name="associatedFile">associated chm file</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings.Dump(System.IO.BinaryWriter@)">
            <summary>
            Dump the class data to a binary writer
            </summary>
            <param name="writer">writer to write the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings.ReadDump(System.IO.BinaryReader@)">
            <summary>
            Reads the object data from a dump store
            </summary>
            <param name="reader">reader to read the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings.SetCHMFile(Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Sets the associated CHMFile instance
            </summary>
            <param name="associatedFile">instance to set</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings.DecodeData">
            <summary>
            Decodes the binary file data and fills the internal properties
            </summary>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings.DecodeBlock(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Decodes a string block
            </summary>
            <param name="stringBlock">byte array which represents the string block</param>
            <param name="nStringOffset">current string offset number</param>
            <param name="nSubsetOffset">reference to a subset variable</param>
            <returns>true if succeeded</returns>
            <remarks>If a string crosses the end of a block then it will be cut off 
            without a NT and repeated in full, with a NT, at the start of the next block. 
            For eg "To customize the appearance of a contents file" might become 
            "To customize the (block ending)To customize the appearance of a contents file" 
            when there are 17 bytes left at the end of the block. </remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings.Item(System.Int32)">
            <summary>
            Indexer which returns the string at a given offset
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings.Item(System.String)">
            <summary>
            Indexer which returns the string at a given offset
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings.Dispose">
            <summary>
            Implement IDisposable.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMStrings.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios. 
            If disposing equals true, the method has been called directly 
            or indirectly by a user's code. Managed and unmanaged resources 
            can be disposed. 
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference  
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">disposing flag</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem">
            <summary>
            The class <c>CHMSystem</c> reads the #SYSTEM file of the chm and stores its settings
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.disposed">
            <summary>
            Internal flag specifying if the object is going to be disposed
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._binaryFileData">
            <summary>
            Internal member storing the binary file data
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._fileVersion">
            <summary>
            Internal member storing the file version 
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._contentsFile">
            <summary>
            Internal member storing the contents file path
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._indexFile">
            <summary>
            Internal member storing the index file path
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._defaultTopic">
            <summary>
            Internal member storing the default help topic
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._title">
            <summary>
            Internal member storing the help-window title
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._dbcs">
            <summary>
            Internal flag if dbcs is on
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._fullTextSearch">
            <summary>
            Internal flag if fulltext search is enabled
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._hasKLinks">
            <summary>
            Internal flag if KLinks are in the file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._hasALinks">
            <summary>
            Internal flag if ALinks are in the file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._defaultWindow">
            <summary>
            Internal member storing the name of the default window
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._compileFile">
            <summary>
            Internal member storing the filename of the compiled file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._binaryIndexURLTableID">
            <summary>
            Internal flag storing the offset value of the binary index
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._compilerVersion">
            <summary>
            Inernal member storing the compiler version this file was compiled
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._binaryTOCURLTableID">
            <summary>
            Internal flag storing the offset value of the binary TOC
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._associatedFile">
            <summary>
            Internal member storing the associated chmfile object
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._defaultFont">
            <summary>
            Internal member storing the default fontface, size, charset
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem._culture">
            <summary>
            Internal member storing the culture info of the file
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.#ctor(System.Byte[],Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Constructor of the class
            </summary>
            <param name="binaryFileData">binary file data of the #SYSTEM file</param>
            <param name="associatedFile">associated chm file</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.DecodeData">
            <summary>
            Decodes the binary file data and fills the internal properties
            </summary>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.DecodeEntry(System.IO.BinaryReader@)">
            <summary>
            Decodes an #system file entry
            </summary>
            <param name="binReader">binary reader reference</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.GetMasterHHC(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Reads all HHC files and checks which one has the global object tag.
            This hhc file will be returned as master hhc
            </summary>
            <param name="hhcTopics">list of topics containing the extension hhc</param>
            <param name="TopicItemArrayList">true if the arraylist contains topic items</param>
            <returns>the filename of the found master toc</returns>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.FileVersion">
            <summary>
            Gets the file version of the chm file. 
            2 for Compatibility=1.0,  3 for Compatibility=1.1
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.ContentsFile">
            <summary>
            Gets the contents file name
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.IndexFile">
            <summary>
            Gets the index file name
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.SetDefaultTopic(System.String)">
            <summary>
            Sets the default topic of this file
            </summary>
            <param name="local">new local value of the topic</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.DefaultTopic">
            <summary>
            Gets the default help topic
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.Title">
            <summary>
            Gets the title of the help window
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.DBCS">
            <summary>
            Gets the flag if DBCS is in use
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.FullTextSearch">
            <summary>
            Gets the flag if full-text-search is available
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.HasALinks">
            <summary>
            Gets the flag if the file has ALinks
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.HasKLinks">
            <summary>
            Gets the flag if the file has KLinks
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.DefaultWindow">
            <summary>
            Gets the default window name
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.CompileFile">
            <summary>
            Gets the file name of the compile file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.BinaryIndexURLTableID">
            <summary>
            Gets the id of the binary index in the url table
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.BinaryIndex">
            <summary>
            Gets the flag if the chm has a binary index file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.CompilerVersion">
            <summary>
            Gets the flag if the chm has a binary index file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.BinaryTOCURLTableID">
            <summary>
            Gets the id of the binary toc in the url table
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.BinaryTOC">
            <summary>
            Gets the flag if the chm has a binary toc file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.FontFace">
            <summary>
            Gets the font face of the read font property.
            Empty string for default font.
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.FontSize">
            <summary>
            Gets the font size of the read font property.
            0 for default font size
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.CharacterSet">
            <summary>
            Gets the character set of the read font property
            1 for default
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.CodePage">
            <summary>
            Gets the codepage depending on the read font property
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.Culture">
            <summary>
            Gets the assiciated culture info
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.Dispose">
            <summary>
            Implement IDisposable.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMSystem.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios. 
            If disposing equals true, the method has been called directly 
            or indirectly by a user's code. Managed and unmanaged resources 
            can be disposed. 
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference  
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">disposing flag</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx">
            <summary>
            The class <c>CHMTocidx</c> implements functions to decode the #TOCIDX internal file.
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx.BLOCK_SIZE">
            <summary>
            Constant specifying the size of the data blocks
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx.disposed">
            <summary>
            Internal flag specifying if the object is going to be disposed
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx._binaryFileData">
            <summary>
            Internal member storing the binary file data
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx._offset2028">
            <summary>
            Internal memebr storing the offset to the 20/28 byte structs
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx._offset16structs">
            <summary>
            Internal member storing the offset to the 16 byte structs
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx._numberOf16structs">
            <summary>
            Internal member storing the number of 16 byte structs
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx._offsetOftopics">
            <summary>
            Internal member storing the offset to the topic list
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx._toc">
            <summary>
            Internal member storing the toc
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx._offsetTable">
            <summary>
            Internal member for offset seeking
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx._associatedFile">
            <summary>
            Internal member storing the associated chmfile object
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx.#ctor(System.Byte[],Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Constructor of the class
            </summary>
            <param name="binaryFileData">binary file data of the #TOCIDX file</param>
            <param name="associatedFile">associated chm file</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx.DecodeData">
            <summary>
            Decodes the binary file data and fills the internal properties
            </summary>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx.RecursivelyBuildTree(System.IO.BinaryReader@,System.Int32,System.Collections.ArrayList,Netron.Neon.HtmlHelp.TOCItem)">
            <summary>
            Recursively reads the binary toc tree from the file
            </summary>
            <param name="binReader">reference to binary reader</param>
            <param name="NodeOffset">offset of the first node in the current level</param>
            <param name="level">arraylist of TOCItems for the current level</param>
            <param name="parentItem">parent item for the item</param>
            <returns>Returns true if succeeded</returns>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx.TOC">
            <summary>
            Gets the internal read toc
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx.Dispose">
            <summary>
            Implement IDisposable.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMTocidx.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios. 
            If disposing equals true, the method has been called directly 
            or indirectly by a user's code. Managed and unmanaged resources 
            can be disposed. 
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference  
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">disposing flag</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics">
            <summary>
            The class <c>CHMTopics</c> implements functionality to decode the #TOPICS internal file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics.disposed">
            <summary>
            Internal flag specifying if the object is going to be disposed
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics._binaryFileData">
            <summary>
            Internal member storing the binary file data
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics._associatedFile">
            <summary>
            Internal member storing the associated chmfile object
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics._topicTable">
            <summary>
            Internal member storing the topic list
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics.#ctor(System.Byte[],Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Constructor of the class
            </summary>
            <param name="binaryFileData">binary file data of the #TOPICS file</param>
            <param name="associatedFile">associated chm file</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics.Dump(System.IO.BinaryWriter@)">
            <summary>
            Dump the class data to a binary writer
            </summary>
            <param name="writer">writer to write the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics.ReadDump(System.IO.BinaryReader@)">
            <summary>
            Reads the object data from a dump store
            </summary>
            <param name="reader">reader to read the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics.SetCHMFile(Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Sets the associated CHMFile instance
            </summary>
            <param name="associatedFile">instance to set</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics.DecodeData">
            <summary>
            Decodes the binary file data and fills the internal properties
            </summary>
            <returns>true if succeeded</returns>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics.TopicTable">
            <summary>
            Gets the arraylist containing all topic entries.
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics.Item(System.Int32)">
            <summary>
            Gets the topic entry of a given offset
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics.GetByLocale(System.String)">
            <summary>
            Searches a topic by the locale name
            </summary>
            <param name="locale">locale name to search</param>
            <returns>The topicentry instance if found, otherwise null</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics.GetByExtension(System.String)">
            <summary>
            Searches the topics for all files with a given file extension
            </summary>
            <param name="fileExtension">extension to search</param>
            <returns>An arraylist of TopicEntry instances or null if no topic was found</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics.Dispose">
            <summary>
            Implement IDisposable.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMTopics.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios. 
            If disposing equals true, the method has been called directly 
            or indirectly by a user's code. Managed and unmanaged resources 
            can be disposed. 
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference  
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">disposing flag</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr">
            <summary>
            The class <c>CHMUrlstr</c> implements a string collection storing the URL strings of the help file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr.BLOCK_SIZE">
            <summary>
            Constant specifying the size of the string blocks
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr.disposed">
            <summary>
            Internal flag specifying if the object is going to be disposed
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr._binaryFileData">
            <summary>
            Internal member storing the binary file data
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr._urlDictionary">
            <summary>
            Internal member storing the url dictionary
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr._framenameDictionary">
            <summary>
            Internal member storing the framename dictionary
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr._associatedFile">
            <summary>
            Internal member storing the associated chmfile object
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr.#ctor(System.Byte[],Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Constructor of the class
            </summary>
            <param name="binaryFileData">binary file data of the #URLSTR file</param>
            <param name="associatedFile">associated chm file</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr.Dump(System.IO.BinaryWriter@)">
            <summary>
            Dump the class data to a binary writer
            </summary>
            <param name="writer">writer to write the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr.ReadDump(System.IO.BinaryReader@)">
            <summary>
            Reads the object data from a dump store
            </summary>
            <param name="reader">reader to read the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr.SetCHMFile(Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Sets the associated CHMFile instance
            </summary>
            <param name="associatedFile">instance to set</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr.DecodeData">
            <summary>
            Decodes the binary file data and fills the internal properties
            </summary>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr.DecodeBlock(System.Byte[],System.Int32@)">
            <summary>
            Decodes a block of url-string data
            </summary>
            <param name="dataBlock">block of data</param>
            <param name="nOffset">current file offset</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr.GetURLatOffset(System.Int32)">
            <summary>
            Gets the url at a given offset
            </summary>
            <param name="offset">offset of url</param>
            <returns>the url at the given offset</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr.GetFrameNameatOffset(System.Int32)">
            <summary>
            Gets the framename at a given offset
            </summary>
            <param name="offset">offset of the framename</param>
            <returns>the frame name at the given offset</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr.Dispose">
            <summary>
            Implement IDisposable.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrlstr.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios. 
            If disposing equals true, the method has been called directly 
            or indirectly by a user's code. Managed and unmanaged resources 
            can be disposed. 
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference  
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">disposing flag</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable">
            <summary>
            The class <c>CHMUrltable</c> implements methods to decode the #URLTBL internal file.
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable.BLOCK_SIZE">
            <summary>
            Constant specifying the size of the data blocks
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable.RECORDS_PER_BLOCK">
            <summary>
            Constant specifying the number of records per block
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable.disposed">
            <summary>
            Internal flag specifying if the object is going to be disposed
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable._binaryFileData">
            <summary>
            Internal member storing the binary file data
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable._urlTable">
            <summary>
            Internal member storing the url table
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable._associatedFile">
            <summary>
            Internal member storing the associated chmfile object
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable.#ctor(System.Byte[],Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Constructor of the class
            </summary>
            <param name="binaryFileData">binary file data of the #URLTBL file</param>
            <param name="associatedFile">associated chm file</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable.Dump(System.IO.BinaryWriter@)">
            <summary>
            Dump the class data to a binary writer
            </summary>
            <param name="writer">writer to write the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable.ReadDump(System.IO.BinaryReader@)">
            <summary>
            Reads the object data from a dump store
            </summary>
            <param name="reader">reader to read the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable.SetCHMFile(Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Sets the associated CHMFile instance
            </summary>
            <param name="associatedFile">instance to set</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable.DecodeData">
            <summary>
            Decodes the binary file data and fills the internal properties
            </summary>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable.DecodeBlock(System.Byte[],System.Int32@)">
            <summary>
            Decodes a block of url-string data
            </summary>
            <param name="dataBlock">block of data</param>
            <param name="nOffset">current file offset</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable.UrlTable">
            <summary>
            Gets the arraylist containing all urltable entries.
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable.Item(System.Int32)">
            <summary>
            Gets the urltable entry of a given offset
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable.GetByUniqueID(System.UInt32)">
            <summary>
            Gets the urltable entry of a given uniqueID
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable.Dispose">
            <summary>
            Implement IDisposable.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.CHMUrltable.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios. 
            If disposing equals true, the method has been called directly 
            or indirectly by a user's code. Managed and unmanaged resources 
            can be disposed. 
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference  
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">disposing flag</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.DumpCompression">
            <summary>
            Enumeration for specifying the dumping compression
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.DumpCompression.None">
            <summary>
            None - no data compression will be used. 
            Fastest but most memory intensive
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.DumpCompression.Minimum">
            <summary>
            Minimum - a minimum data compression will be used.
            Fast but not much data reduction
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.DumpCompression.Medium">
            <summary>
            Medium - a medium data compression will be used.
            Slower but medium data reduction
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.DumpCompression.Maximum">
            <summary>
            Maximum - a maximum data compression will be used.
            Slowest but maximum data reduction
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.DumpingFlags">
            <summary>
            Flags which specify which data should be dumped
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.DumpingFlags.DumpTextTOC">
            <summary>
            DumpTextTOC - if this flag is set, text-based TOCs (sitemap format) will be dumped
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.DumpingFlags.DumpBinaryTOC">
            <summary>
            DumpBinaryTOC - if this flag is set, binary TOCs will be dumped
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.DumpingFlags.DumpTextIndex">
            <summary>
            DumpTextIndex - if this flag is set, the text-based index (sitemap format) will be dumped
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.DumpingFlags.DumpBinaryIndex">
            <summary>
            DumpBinaryIndex - if this flag is set, the binary index will be dumped
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.DumpingFlags.DumpStrings">
            <summary>
            DumpStrings - if this flag is set, the internal #STRINGS file will be dumped
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.DumpingFlags.DumpUrlStr">
            <summary>
            DumpUrlStr - if this flag is set, the internal #URLSTR file will be dumped
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.DumpingFlags.DumpUrlTbl">
            <summary>
            DumpUrlTbl - if this flag is set, the internal #URLTBL file will be dumped
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.DumpingFlags.DumpTopics">
            <summary>
            DumpTopics - if this flag is set, the internal #TOPICS file will be dumped
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.DumpingFlags.DumpFullText">
            <summary>
            DumpFullText - if this flag is set, the internal $FIftiMain file will be dumped
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo">
            <summary>
            The class <c>DumpingInfo</c> implements information properties for the CHMFile class 
            if and how data dumping should be used.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.#ctor(Netron.Neon.HtmlHelp.ChmDecoding.DumpingFlags,System.String,Netron.Neon.HtmlHelp.ChmDecoding.DumpCompression)">
            <summary>
            Constructor of the class
            </summary>
            <param name="flags">Combine flag values to specify which data should be dumped.</param>
            <param name="outputDir">output directory. emtpy string means, 
            same directory as chm file (only if destination = ExternalFile)</param>
            <param name="compressionLevel">compression which should be used</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.DumpTextTOC">
            <summary>
            Gets the flag if text-based TOCs will be written to the dumping file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.DumpBinaryTOC">
            <summary>
            Gets the flag if binary TOCs will be written to the dumping file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.DumpTextIndex">
            <summary>
            Gets the flag if the text-based index will be written to the dumping file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.DumpBinaryIndex">
            <summary>
            Gets the flag if the binary index will be written to the dumping file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.DumpStrings">
            <summary>
            Gets the flag if the #STRINGS file will be written to the dumping file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.DumpUrlStr">
            <summary>
            Gets the flag if the #URLSTR file will be written to the dumping file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.DumpUrlTbl">
            <summary>
            Gets the flag if the #URLTBL file will be written to the dumping file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.DumpTopics">
            <summary>
            Gets the flag if the #TOPICS file will be written to the dumping file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.DumpFullText">
            <summary>
            Gets the flag if the $FIftiMain file will be written to the dumping file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.OutputDir">
            <summary>
            Gets the dump output directory.
            </summary>
            <value>emtpy string means, same directory as chm file</value>
            <remarks>If Destination is set to DumpingOutput.InternalFile this property will be ignored</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.CompressionLevel">
            <summary>
            The compression level used.
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.ChmFile">
            <summary>
            Gets/Sets the CHMFile instance associated with this object
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.CompLvl">
            <summary>
            Translates the compression level to the deflater constants
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.DumpExists">
            <summary>
            Checks if a dump exists
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.Writer">
            <summary>
            Gets a binary writer instance which allows you to write to the dump
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.Reader">
            <summary>
            Gets a binary reader which allows you to read from the dump
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo.SaveData">
            <summary>
            Saves data and closes the dump
            </summary>
            <returns>true if succeed</returns>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.DataMode">
            <summary>
            Enumeration for specifying the extraction mode of an toc or index item.
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.DataMode.TextBased">
            <summary>
            TextBased - this item comes from a text-based sitemap file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.DataMode.Binary">
            <summary>
            Binary - this item was extracted out of a binary stream
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine">
            <summary>
            The class <c>FullTextSearcher</c> implements a fulltext searcher for a single chm file !
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader">
            <summary>
            Internal class for decoding the header
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._numberOfIndexFiles">
            <summary>
            Internal member storing the number of indexed files
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._rootOffset">
            <summary>
            Internal member storing the offset of the root node
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._pageCount">
            <summary>
            Internal member storing the index-page count
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._depth">
            <summary>
            Internal member storing the depth of the tree
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._scaleDocIdx">
            <summary>
            Internal member storing the scale param for document index en-/decoding 
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._scaleCodeCnt">
            <summary>
            Internal member storing the scale param for code-count en-/decoding 
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._scaleLocCodes">
            <summary>
            Internal member storing the scale param for location codes en-/decoding 
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._rootDocIdx">
            <summary>
            Internal member storing the root param for document index en-/decoding 
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._rootCodeCnt">
            <summary>
            Internal member storing the root param for code-count en-/decoding 
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._rootLocCodes">
            <summary>
            Internal member storing the root param for location codes en-/decoding 
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._nodeSize">
            <summary>
            Internal member storing the size of the nodes in bytes
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._lengthOfLongestWord">
            <summary>
            Internal member storing the length of the longest word
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._totalNumberOfWords">
            <summary>
            Internal member storing the total number of words
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._numberOfUniqueWords">
            <summary>
            Internal member storing the total number of unique words
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._codePage">
            <summary>
            Internal member storing the codepage identifier
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._lcid">
            <summary>
            Internal member storing the language code id
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader._textEncoder">
            <summary>
            Internal member storing the text encoder
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.#ctor(System.Byte[])">
            <summary>
            Constructor of the header
            </summary>
            <param name="binaryData">binary data from which the header will be extracted</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.#ctor">
            <summary>
            Internal constructor for reading from dump
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.DecodeHeader(System.Byte[])">
            <summary>
            Decodes the binary header information and fills the members
            </summary>
            <param name="binaryData">binary data from which the header will be extracted</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.Dump(System.IO.BinaryWriter@)">
            <summary>
            Dump the class data to a binary writer
            </summary>
            <param name="writer">writer to write the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.ReadDump(System.IO.BinaryReader@)">
            <summary>
            Reads the object data from a dump store
            </summary>
            <param name="reader">reader to read the data</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.IndexedFileCount">
            <summary>
            Gets the number of indexed files
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.RootOffset">
            <summary>
            Gets the file offset of the root node
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.PageCount">
            <summary>
            Gets the page count
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.Depth">
            <summary>
            Gets the index depth
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.ScaleDocumentIndex">
            <summary>
            Gets the scale param for document index en-/decoding
            </summary>
            <remarks>The scale and root method of integer encoding needs two parameters, 
            which I'll call s (scale) and r (root size).
            The integer is encoded as two parts, p (prefix) and q (actual bits). 
            p determines how many bits are stored, as well as implicitly determining 
            the high-order bit of the integer. </remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.RootDocumentIndex">
            <summary>
            Gets the root param for the document index en-/decoding
            </summary>
            <remarks>The scale and root method of integer encoding needs two parameters, 
            which I'll call s (scale) and r (root size).
            The integer is encoded as two parts, p (prefix) and q (actual bits). 
            p determines how many bits are stored, as well as implicitly determining 
            the high-order bit of the integer. </remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.ScaleCodeCount">
            <summary>
            Gets the scale param for the code-count en-/decoding
            </summary>
            <remarks>The scale and root method of integer encoding needs two parameters, 
            which I'll call s (scale) and r (root size).
            The integer is encoded as two parts, p (prefix) and q (actual bits). 
            p determines how many bits are stored, as well as implicitly determining 
            the high-order bit of the integer. </remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.RootCodeCount">
            <summary>
            Gets the root param for the code-count en-/decoding
            </summary>
            <remarks>The scale and root method of integer encoding needs two parameters, 
            which I'll call s (scale) and r (root size).
            The integer is encoded as two parts, p (prefix) and q (actual bits). 
            p determines how many bits are stored, as well as implicitly determining 
            the high-order bit of the integer. </remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.ScaleLocationCodes">
            <summary>
            Gets the scale param for the location codes en-/decoding
            </summary>
            <remarks>The scale and root method of integer encoding needs two parameters, 
            which I'll call s (scale) and r (root size).
            The integer is encoded as two parts, p (prefix) and q (actual bits). 
            p determines how many bits are stored, as well as implicitly determining 
            the high-order bit of the integer. </remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.RootLocationCodes">
            <summary>
            Gets the root param for the location codes en-/decoding
            </summary>
            <remarks>The scale and root method of integer encoding needs two parameters, 
            which I'll call s (scale) and r (root size).
            The integer is encoded as two parts, p (prefix) and q (actual bits). 
            p determines how many bits are stored, as well as implicitly determining 
            the high-order bit of the integer. </remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.NodeSize">
            <summary>
            Gets the size in bytes of each index/leaf node
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.LengthOfLongestWord">
            <summary>
            Gets the length of the longest word in the index
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.TotalWordCount">
            <summary>
            Gets the total number of words indexed (including duplicates)
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.UniqueWordCount">
            <summary>
            Gets the total number of unique words indexed (excluding duplicates)
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.CodePage">
            <summary>
            Gets the codepage identifier
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FTHeader.LCID">
            <summary>
            Gets the language code id
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper">
            <summary>
            Internal class for easier hit recording and rate-calculation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper._documentIndex">
            <summary>
            Internal member storing the associated document index
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper._title">
            <summary>
            Internal member storing the title
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper._locale">
            <summary>
            Internal member storing the locale
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper._location">
            <summary>
            Internal member storing the location
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper._url">
            <summary>
            Internal member storing the url
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper._rating">
            <summary>
            Internal member storing the rating
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper._partialRating">
            <summary>
            Internal member used for rating calculation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Constructor of the class
            </summary>
            <param name="documentIndex">document index</param>
            <param name="title">title</param>
            <param name="locale">locale parameter</param>
            <param name="location">location</param>
            <param name="url">url of document</param>
            <param name="rating">rating</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper.UpdateRating(System.String)">
            <summary>
            Updates the rating for a found word
            </summary>
            <param name="word">word found</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper.CompareTo(System.Object)">
            <summary>
            Implements the CompareTo method of the IComparable interface. 
            Allows an easy sort by the document rating
            </summary>
            <param name="obj">object to compare</param>
            <returns>0 ... equal, -1 ... this instance is less than obj, 1 ... this instance is greater than obj</returns>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper.PartialRating">
            <summary>
            Gets the internal hashtable used for counting word hits of the document
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper.DocumentIndex">
            <summary>
            Gets the document index of the hit helper instance
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper.Title">
            <summary>
            Gets the title
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper.Locale">
            <summary>
            Gets the locale
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper.Location">
            <summary>
            Gets the location
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper.URL">
            <summary>
            Gets the url
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper.Rating">
            <summary>
            Gets the rating
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.RE_Quotes">
            <summary>
            Regular expression getting the text between to quotes
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.disposed">
            <summary>
            Internal flag specifying if the object is going to be disposed
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine._binaryFileData">
            <summary>
            Internal member storing the binary file data
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine._hits">
            <summary>
            Internal datatable storing the search hits
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine._hitsHelper">
            <summary>
            Internal arraylist for hit management
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine._header">
            <summary>
            Internal member storing the header of the file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine._associatedFile">
            <summary>
            Internal member storing the associated chmfile object
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.#ctor(System.Byte[],Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Constructor of the class
            </summary>
            <param name="binaryFileData">binary file data of the $FIftiMain file</param>
            <param name="associatedFile">associated chm file</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.Dump(System.IO.BinaryWriter@)">
            <summary>
            Dump the class data to a binary writer
            </summary>
            <param name="writer">writer to write the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.ReadDump(System.IO.BinaryReader@)">
            <summary>
            Reads the object data from a dump store
            </summary>
            <param name="reader">reader to read the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.SetCHMFile(Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Sets the associated CHMFile instance
            </summary>
            <param name="associatedFile">instance to set</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.CanSearch">
            <summary>
            Gets a flag if full-text searching is available for this chm file.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.Search(System.String,System.Boolean,System.Boolean)">
            <summary>
            Performs a fulltext search of a single file.
            </summary>
            <param name="search">word(s) or phrase to search</param>
            <param name="partialMatches">true if partial word should be matched also 
            ( if this is true a search of 'support' will match 'supports', otherwise not )</param>
            <param name="titleOnly">true if only search in titles</param>
            <remarks>Hits are available through the <see cref="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.Hits">Hists property</see>.</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.Search(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Performs a fulltext search of a single file.
            </summary>
            <param name="search">word(s) or phrase to search</param>
            <param name="MaxHits">max hits. If this number is reached, the search will be interrupted</param>
            <param name="partialMatches">true if partial word should be matched also 
            ( if this is true a search of 'support' will match 'supports', otherwise not )</param>
            <param name="titleOnly">true if only search in titles</param>
            <remarks>Hits are available through the <see cref="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.Hits">Hists property</see>.</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.FinalizeQuoted(System.String)">
            <summary>
            Gets rid of all search hits which doesn't match the quoted phrase
            </summary>
            <param name="search">full search string entered by the user</param>
            <remarks>Phrase search is not possible using the internal full-text index. We're just filtering all 
            documents which don't contain all words of the phrase.</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.CheckHit(Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.HitHelper,System.String[])">
            <summary>
            Eliminates all search hits where not all of the words have been found
            </summary>
            <param name="hit">hithelper instance to check</param>
            <param name="wordsInPhrase">word list</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.SearchSingleWord(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Performs a search for a single word in the index
            </summary>
            <param name="word">word to search</param>
            <param name="MaxHits">maximal hits to return</param>
            <param name="partialMatches">true if partial word should be matched also 
            ( if this is true a search of 'support' will match 'supports', otherwise not )</param>
            <param name="titleOnly">true if only search in titles</param>
            <returns>Returns true if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.ReadLeafNode(System.IO.BinaryReader@,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Reads a leaf node and extracts documents which holds the searched word
            </summary>
            <param name="binReader">reference to the reader</param>
            <param name="word">word to search</param>
            <param name="MaxHits">maximal hits to return</param>
            <param name="partialMatches">true if partial word should be matched also 
            ( if this is true a search of 'support' will match 'supports', otherwise not )</param>
            <param name="titleOnly">true if only search in titles</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.DecodeWCL(System.Byte[],System.Int32,System.String)">
            <summary>
            Decodes the s/r encoded WordCodeList (=wcl) and creates hit entries
            </summary>
            <param name="wclBytes">wcl encoded byte array</param>
            <param name="MaxHits">maximal hits</param>
            <param name="word">the word to find</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.CombineStrings(System.String,System.String,System.Int32)">
            <summary>
            Combines a "master" word with a partial word.
            </summary>
            <param name="word">the master word</param>
            <param name="partial">the partial word</param>
            <param name="partialPosition">position to place the parial word</param>
            <returns>returns a combined string</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.DocumentHit(System.Int32)">
            <summary>
            Gets the HitHelper instance for a specific document index
            </summary>
            <param name="index">document index</param>
            <returns>The reference of the hithelper instance for this document index, otherwise null</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.CreateHitsTable">
            <summary>
            Creates a DataTable for storing the hits
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.Hits">
            <summary>
            Gets an datatable containing the hits of the last search
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.Dispose">
            <summary>
            Implement IDisposable.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.FullTextEngine.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios. 
            If disposing equals true, the method has been called directly 
            or indirectly by a user's code. Managed and unmanaged resources 
            can be disposed. 
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference  
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">disposing flag</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser">
            <summary>
            The class <c>HHCParser</c> implements a parser for HHC contents files.
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser.RE_ULOpening">
            <summary>
            regular expressions for replacing the sitemap boundary tags 
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser.RE_ULBoundaries">
            <summary>
            Matching ul-tags
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser.RE_NestedBoundaries">
            <summary>
            Matching the nested tree structure.
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser.RE_ObjectBoundaries">
            <summary>
            Matching object-tags
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser.RE_ParamBoundaries">
            <summary>
            Matching param tags
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser.RE_QuoteAttributes">
            <summary>
            Extracting tag attributes
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser.ulRE">
            <summary>
            private regular expressionobjects 
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser._mergeItems">
            <summary>
            Internal member storing the list of TOCItems which are holding merge links
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser._lastTopicItem">
            <summary>
            Internal member storing the last read regular topic item.
            This is used to handle "Merge" entries and add them as child to this instance.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser.ParseHHC(System.String,Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Parses a HHC file and returns an ArrayList with the table of contents (TOC) tree
            </summary>
            <param name="hhcFile">string content of the hhc file</param>
            <param name="chmFile">CHMFile instance</param>
            <returns>Returns an ArrayList with the table of contents (TOC) tree</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser.HasGlobalObjectTag(System.String,Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Checks if the hhc file contains a global object tag.
            </summary>
            <param name="hhcFile">string content of the hhc file</param>
            <param name="chmFile">chm file</param>
            <returns>true if the hhc content contains a global object tag</returns>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser.HasMergeLinks">
            <summary>
            Gets true if the previously done parsing found merge-links
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser.MergeItems">
            <summary>
            Gets all TOCItem references which are holding merge-links
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser.ParseTree(System.String,Netron.Neon.HtmlHelp.TOCItem,System.Collections.ArrayList,Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Recursively parses a sitemap tree
            </summary>
            <param name="text">content text</param>
            <param name="parent">Parent for all read items</param>
            <param name="arrNodes">arraylist which receives the extracted nodes</param>
            <param name="chmFile">CHMFile instance</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser.ParseItems(System.String,Netron.Neon.HtmlHelp.TOCItem,System.Collections.ArrayList,Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Parses tree nodes from the text
            </summary>
            <param name="itemstext">text containing the items</param>
            <param name="parent">Parent for all read items</param>
            <param name="arrNodes">arraylist where the nodes should be added</param>
            <param name="chmFile">CHMFile instance</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.HHCParser.ParseGlobalSettings(System.String,Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Parses the very first &lt;OBJECT&gt; tag in the sitemap file and extracts 
            information types and categories.
            </summary>
            <param name="sText">text of the object tag</param>
            <param name="chmFile">CHMFile instance</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.HHKParser">
            <summary>
            The class <c>HHKParser</c> implements a parser for HHK contents files.
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HHKParser.RE_ULOpening">
            <summary>
            regular expressions for replacing the sitemap boundary tags 
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HHKParser.RE_ULBoundaries">
            <summary>
            Matching ul-tags
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HHKParser.RE_NestedBoundaries">
            <summary>
            Matching the nested tree structure.
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HHKParser.RE_ObjectBoundaries">
            <summary>
            Matching object-tags
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HHKParser.RE_ParamBoundaries">
            <summary>
            Matching param tags
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HHKParser.RE_QuoteAttributes">
            <summary>
            Extracting tag attributes
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.HHKParser.ulRE">
            <summary>
            private regular expressionobjects 
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.HHKParser.ParseHHK(System.String,Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Parses a HHK file and returns an ArrayList with the index tree
            </summary>
            <param name="hhkFile">string content of the hhk file</param>
            <param name="chmFile">CHMFile instance</param>
            <returns>Returns an ArrayList with the index tree</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.HHKParser.ParseTree(System.String,Netron.Neon.HtmlHelp.IndexItem,System.Collections.ArrayList,Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Recursively parses a sitemap tree
            </summary>
            <param name="text">content text</param>
            <param name="parent">Parent for all read items</param>
            <param name="arrNodes">arraylist which receives the extracted nodes</param>
            <param name="chmFile">CHMFile instance</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.HHKParser.ParseItems(System.String,Netron.Neon.HtmlHelp.IndexItem,System.Collections.ArrayList,Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Parses nodes from the text
            </summary>
            <param name="itemstext">text containing the items</param>
            <param name="parentItem">parent index item</param>
            <param name="arrNodes">arraylist where the nodes should be added</param>
            <param name="chmFile">CHMFile instance</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.HHKParser.FindByKeyword(System.Collections.ArrayList,System.String)">
            <summary>
            Searches an index-keyword in the index list
            </summary>
            <param name="indexList">index list to search</param>
            <param name="Keyword">keyword to find</param>
            <returns>Returns an <see cref="T:Netron.Neon.HtmlHelp.IndexItem">IndexItem</see> instance if found, otherwise null.</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.HHKParser.ParseGlobalSettings(System.String,Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Parses the very first &lt;OBJECT&gt; tag in the sitemap file and extracts 
            information types and categories.
            </summary>
            <param name="sText">text of the object tag</param>
            <param name="chmFile">CHMFile instance</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry">
            <summary>
            The class <c>TopicEntry</c> stores the data for one topic entry
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry._entryOffset">
            <summary>
            Internal member storing the offset of this topic entry
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry._tocidxOffset">
            <summary>
            Internal member storing the index of the binary toc
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry._titleOffset">
            <summary>
            Internal member storing the string offset of the title
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry._urltableOffset">
            <summary>
            Internal member storuing the urltable offset
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry._visibilityMode">
            <summary>
            Internal member storing the visibility mode
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry._unknownMode">
            <summary>
            Internal member storing an unknown mode
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry._associatedFile">
            <summary>
            Internal member storing the associated chmfile object
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor of the class
            </summary>
            <param name="entryOffset">offset of this entry</param>
            <param name="tocidxOffset">offset in the binary toc index</param>
            <param name="titleOffset">offset of the title (in the #STRINGS file)</param>
            <param name="urltableOffset">offset in the urltable containing the urlstr offset for the url</param>
            <param name="visibilityMode">visibility mode 2 indicates not in contents, 6 indicates that it is in the contents, 0/4 something else (unknown)</param>
            <param name="unknownMode">0, 2, 4, 8, 10, 12, 16, 32 (unknown)</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Constructor of the class
            </summary>
            <param name="entryOffset">offset of this entry</param>
            <param name="tocidxOffset">offset in the binary toc index</param>
            <param name="titleOffset">offset of the title (in the #STRINGS file)</param>
            <param name="urltableOffset">offset in the urltable containing the urlstr offset for the url</param>
            <param name="visibilityMode">visibility mode 2 indicates not in contents, 6 indicates that it is in the contents, 0/4 something else (unknown)</param>
            <param name="unknownMode">0, 2, 4, 8, 10, 12, 16, 32 (unknown)</param>
            <param name="associatedFile">associated chmfile object</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.Dump(System.IO.BinaryWriter@)">
            <summary>
            Dump the class data to a binary writer
            </summary>
            <param name="writer">writer to write the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.ReadDump(System.IO.BinaryReader@)">
            <summary>
            Reads the object data from a dump store
            </summary>
            <param name="reader">reader to read the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.SetCHMFile(Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Sets the associated CHMFile instance
            </summary>
            <param name="associatedFile">instance to set</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.ChmFile">
            <summary>
            Gets the associated chm file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.EntryOffset">
            <summary>
            Gets the offset of this entry
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.TOCIdxOffset">
            <summary>
            Gets the tocidx offset
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.TitleOffset">
            <summary>
            Gets the title offset of the #STRINGS file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.UrlTableOffset">
            <summary>
            Gets the urltable offset
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.Title">
            <summary>
            Gets the title of the topic entry
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.Locale">
            <summary>
            Gets the url of the topic
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.URL">
            <summary>
            Gets the URL of this topic
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.VisibilityMode">
            <summary>
            Gets the visibility mode
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.UknownMode">
            <summary>
            Gets the unknown mode
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.TextEncoding">
            <summary>
            Gets the text encoding for reading the content file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.ContentFile">
            <summary>
            Gets the FileObject of the topics' associated content file
            </summary>
            <remarks>If the file can't be opened, the property will return null. Always call Close() method of the file object after finishing reading the file contents !!!</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry.FileContents">
            <summary>
            Gets the contents of the topics' associated content file
            </summary>
            <remarks>If the file can't be opened the property will return an emtpy string (same for binary data)</remarks>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry">
            <summary>
            The class <c>UrlTableEntry</c> stores data for an URL-Table entry
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry._entryOffset">
            <summary>
            Internal member storing the offset of this entry
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry._uniqueID">
            <summary>
            Internal member storing a unique id
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry._topicsIndex">
            <summary>
            Internal member storing the topics index
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry._urlStrOffset">
            <summary>
            Internal member storing the offset in the urlstr table
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry._associatedFile">
            <summary>
            Internal member storing the associated chmfile object
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry.#ctor(System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor of the class
            </summary>
            <param name="uniqueID">unique id</param>
            <param name="entryOffset">offset of the entry</param>
            <param name="topicIndex">topic index</param>
            <param name="urlstrOffset">urlstr offset for filename</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry.#ctor(System.UInt32,System.Int32,System.Int32,System.Int32,Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Constructor of the class
            </summary>
            <param name="uniqueID">unique id</param>
            <param name="entryOffset">offset of the entry</param>
            <param name="topicIndex">topic index</param>
            <param name="urlstrOffset">urlstr offset for filename</param>
            <param name="associatedFile">associated chm file</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry.Dump(System.IO.BinaryWriter@)">
            <summary>
            Dump the class data to a binary writer
            </summary>
            <param name="writer">writer to write the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry.ReadDump(System.IO.BinaryReader@)">
            <summary>
            Reads the object data from a dump store
            </summary>
            <param name="reader">reader to read the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry.SetCHMFile(Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Sets the associated CHMFile instance
            </summary>
            <param name="associatedFile">instance to set</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry.UniqueID">
            <summary>
            Gets the unique id of the entry
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry.EntryOffset">
            <summary>
            Gets the offset of the entry
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry.TopicIndex">
            <summary>
            Gets the topics index
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry.UrlstrOffset">
            <summary>
            Gets the urlstr offset
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry.URL">
            <summary>
            Gets the url of the entry
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmDecoding.UrlTableEntry.Topic">
            <summary>
            Gets the associated topic for this url entry
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.ChmFileInfo">
            <summary>
            The class <c>ChmFileInfo</c> only extracts system information from a CHM file. 
            It doesn't build the index and table of contents.
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmFileInfo._chmFileName">
            <summary>
            Internal member storing the full filename
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.ChmFileInfo._associatedFile">
            <summary>
            Internal member storing the associated chmfile object
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmFileInfo.#ctor(System.String)">
            <summary>
            Constructor for extrating the file information of the provided file. 
            The constructor opens the chm-file and reads its system data.
            </summary>
            <param name="chmFile">full file name which information should be extracted</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.ChmFileInfo.#ctor(Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Internal constructor used in the class <see cref="T:Netron.Neon.HtmlHelp.ChmDecoding.CHMFile">CHMFile</see>.
            </summary>
            <param name="associatedFile">associated chm file</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.ChmFileName">
            <summary>
            Gets the full filename of the chm file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.FileInfo">
            <summary>
            Gets a <see cref="T:System.IO.FileInfo">FileInfo</see> instance for the chm file.
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.FileVersion">
            <summary>
            Gets the file version of the chm file. 
            2 for Compatibility=1.0,  3 for Compatibility=1.1
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.ContentsFile">
            <summary>
            Gets the contents file name
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.IndexFile">
            <summary>
            Gets the index file name
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.DefaultTopic">
            <summary>
            Gets the default help topic
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.HelpWindowTitle">
            <summary>
            Gets the title of the help window
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.DBCS">
            <summary>
            Gets the flag if DBCS is in use
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.FullTextSearch">
            <summary>
            Gets the flag if full-text-search is available
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.HasALinks">
            <summary>
            Gets the flag if the file has ALinks
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.HasKLinks">
            <summary>
            Gets the flag if the file has KLinks
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.DefaultWindow">
            <summary>
            Gets the default window name
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.CompileFile">
            <summary>
            Gets the file name of the compile file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.BinaryIndex">
            <summary>
            Gets the flag if the chm has a binary index file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.CompilerVersion">
            <summary>
            Gets the flag if the chm has a binary index file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.BinaryTOC">
            <summary>
            Gets the flag if the chm has a binary toc file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.FontFace">
            <summary>
            Gets the font face of the read font property.
            Empty string for default font.
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.FontSize">
            <summary>
            Gets the font size of the read font property.
            0 for default font size
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.CharacterSet">
            <summary>
            Gets the character set of the read font property
            1 for default
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.CodePage">
            <summary>
            Gets the codepage depending on the read font property
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.Culture">
            <summary>
            Gets the assiciated culture info
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.NumberOfTopicNodes">
            <summary>
            Gets the number of topic nodes including the contents and index files
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.ImageList">
            <summary>
            Gets the ImageList string specyfied in the #IDXHDR file.
            </summary>
            <remarks>This property uses the #STRINGS file to extract the string at a given offset.</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.Background">
            <summary>
            Gets the background setting 
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.Foreground">
            <summary>
            Gets the foreground setting 
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.FrameName">
            <summary>
            Gets the FrameName string specyfied in the #IDXHDR file.
            </summary>
            <remarks>This property uses the #STRINGS file to extract the string at a given offset.</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.WindowName">
            <summary>
            Gets the WindowName string specyfied in the #IDXHDR file.
            </summary>
            <remarks>This property uses the #STRINGS file to extract the string at a given offset.</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.ChmFileInfo.MergedFiles">
            <summary>
            Gets a string array containing the merged file names
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.HtmlHelpSystem">
            <summary>
            The class <c>HtmlHelpSystem</c> implements the main object for reading chm files
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.HtmlHelpSystem._current">
            <summary>
            Private shared instance of current HtmlHelpSystem class
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.HtmlHelpSystem._chmFiles">
            <summary>
            Internal member storing the attached files
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.HtmlHelpSystem._toc">
            <summary>
            Internal member storing a merged table of contents
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.HtmlHelpSystem._index">
            <summary>
            Internal member storing a merged index
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.HtmlHelpSystem._urlPrefix">
            <summary>
            URL prefix for specifying a chm destination
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.HtmlHelpSystem._useHH2TreePics">
            <summary>
            Internal flag specifying if the system should use the tree-images list
            from HtmlHelp2. If false the standard CHM-Viewer pics will be used.
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.HtmlHelpSystem._informationTypes">
            <summary>
            Internal member storing the read information types
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.HtmlHelpSystem._categories">
            <summary>
            Internal member storing the read categories
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.HtmlHelpSystem.UrlPrefix">
            <summary>
            Gets/Sets the url prefix for specifying a chm destination
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.HtmlHelpSystem.UseHH2TreePics">
            <summary>
            Gets/Sets the flag specifying if the system should use the tree-images list
            from HtmlHelp2. If false the standard CHM-Viewer pics will be used.
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.HtmlHelpSystem.Current">
            <summary>
            Gets the current HtmlHelpSystem instance
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.#ctor(System.String)">
            <summary>
            Constructor of the reader class
            </summary>
            <param name="chmFile">chm file to attach with the reader</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.OpenFile(System.String)">
            <summary>
            Opens a chm file and creates
            </summary>
            <param name="chmFile">full file path of the chm file to open</param>
            <remarks>If you call this method, all existing merged files will be cleared.</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.OpenFile(System.String,Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo)">
            <summary>
            Opens a chm file and creates
            </summary>
            <param name="chmFile">full file path of the chm file to open</param>
            <param name="dmpInfo">dumping info</param>
            <remarks>If you call this method, all existing merged files will be cleared.</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.MergeFile(System.String)">
            <summary>
            Merges a chm file to the current help contents
            </summary>
            <param name="chmFile">full file path of the chm file to merge</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.MergeFile(System.String,Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo)">
            <summary>
            Merges a chm file to the current help contents
            </summary>
            <param name="chmFile">full file path of the chm file to merge</param>
            <param name="dmpInfo">dumping info</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.MergeFile(System.String,Netron.Neon.HtmlHelp.ChmDecoding.DumpingInfo,System.Boolean)">
            <summary>
            Merges a chm file to the current help contents
            </summary>
            <param name="chmFile">full file path of the chm file to merge</param>
            <param name="dmpInfo">dumping info</param>
            <param name="mergedFileList">true if the merge is done because a merged file list 
            was found in the previously loaded CHM.</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.RecalculateMergeLinks(Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Checks all Merg-links read till now. Checks if the merg-link points to the 
            file <c>currentFile</c>. If yes the link will be replaced by the contents of the 
            merged file.
            </summary>
            <param name="currentFile">Current CHMFile instance</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.MarkChildrenAdded(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Adds sub-items of an TOC-entry to the merg-linked list. 
            This will mark this item as "added" during the extra merge run 
            of the HtmlHelpSystem class.
            </summary>
            <param name="tocs">TOCItem list</param>
            <param name="merged">Arraylist which holds the merged-items</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.RemoveMergeLinks">
            <summary>
            Removes merge-links from the toc of files which were not loaded
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.MergeFileInfoTypesCategories(Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Merges the information types and categories read by the CHMFile instance 
            into the system instance
            </summary>
            <param name="chmFile">file instance</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.RemoveFileInfoTypesCategories(Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Removes the information types and categories read by the CHMFile instance 
            </summary>
            <param name="chmFile">file instance</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.RemoveFile(System.String)">
            <summary>
            Removes a chm file from the internal file collection
            </summary>
            <param name="chmFile">full file path of the chm file to remove</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.CloseAllFiles">
            <summary>
            Closes all files and destroys TOC/index
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.HtmlHelpSystem.FileList">
            <summary>
            Gets an array of loaded chm files. 
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.HtmlHelpSystem.HasInformationTypes">
            <summary>
            Returns true if the HtmlHelpSystem instance contains 1 or more information types
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.HtmlHelpSystem.HasCategories">
            <summary>
            Returns true if the HtmlHelpSystem instance contains 1 or more categories
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.HtmlHelpSystem.InformationTypes">
            <summary>
            Gets an ArrayList of <see cref="T:Netron.Neon.HtmlHelp.InformationType">InformationType</see> items
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.HtmlHelpSystem.Categories">
            <summary>
            Gets an ArrayList of <see cref="T:Netron.Neon.HtmlHelp.Category">Category</see> items
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.GetInformationType(System.String)">
            <summary>
            Gets the information type specified by its name
            </summary>
            <param name="name">name of the information type to receive</param>
            <returns>Returns the Instance for the name or null if not found</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.GetCategory(System.String)">
            <summary>
            Gets the category specifiyd by its name
            </summary>
            <param name="name">name of the category</param>
            <returns>Returns the Instance for the name or null if not found</returns>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.HtmlHelpSystem.DefaultTopic">
            <summary>
            Gets the default topic
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.HtmlHelpSystem.TableOfContents">
            <summary>
            Gets a merged table of contents of all opened chm files
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.HtmlHelpSystem.Index">
            <summary>
            Gets a merged index  of all opened chm files
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.HtmlHelpSystem.HasTableOfContents">
            <summary>
            Gets a flag if the current instance offers a table of contents
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.HtmlHelpSystem.HasIndex">
            <summary>
            Gets a flag if the current instance offers an index
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.HtmlHelpSystem.HasKLinks">
            <summary>
            Gets a flag if the index holds klinks
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.HtmlHelpSystem.HasALinks">
            <summary>
            Gets a flag if the index holds alinks
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.HtmlHelpSystem.FullTextSearch">
            <summary>
            Gets a flag if the current instance supports fulltext searching
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.PerformSearch(System.String,System.Boolean,System.Boolean)">
            <summary>
            Performs a full-text search over the chm files
            </summary>
            <param name="words">words to search</param>
            <param name="partialMatches">true if partial word should be matched also 
            ( if this is true a search of 'support' will match 'supports', otherwise not )</param>
            <param name="titleOnly">true if titles only</param>
            <returns>A DataTable containing the search hits</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.HtmlHelpSystem.PerformSearch(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Performs a full-text search over the chm files
            </summary>
            <param name="words">words to search</param>
            <param name="MaxResults">maximal number of hits to return</param>
            <param name="partialMatches">true if partial word should be matched also 
            ( if this is true a search of 'support' will match 'supports', otherwise not )</param>
            <param name="titleOnly">true if titles only</param>
            <returns>A DataTable containing the search hits</returns>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.IndexType">
            <summary>
            Enumeration for specifying the index type
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.IndexType.KeywordLinks">
            <summary>
            Keyword links should be used
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.IndexType.AssiciativeLinks">
            <summary>
            Associative links should be used
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Index">
            <summary>
            The class <c>Index</c> holds the (keyword links) KLinks and (associative links) ALinks of the htmlhelp 
            system. It implements methods for easy index-based searching.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Index.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Index.#ctor(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Constructor of the class
            </summary>
            <param name="kLinks">arraylist with keyword links</param>
            <param name="aLinks">arraylist with associative links</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Index.Clear">
            <summary>
            Clears the current toc
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Index.Count(Netron.Neon.HtmlHelp.IndexType)">
            <summary>
            Gets the number of index items for a specific type
            </summary>
            <param name="typeOfIndex">type of index</param>
            <returns>Returns the number of index items for a specific type</returns>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Index.KLinks">
            <summary>
            Gets the internal index list of keyword links
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Index.ALinks">
            <summary>
            Gets the internal index list of associative links
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Index.MergeIndex(System.Collections.ArrayList,Netron.Neon.HtmlHelp.IndexType)">
            <summary>
            Merges the the index list <c>arrIndex</c> into the current one
            </summary>
            <param name="arrIndex">indexlist which should be merged with the current one</param>
            <param name="typeOfIndex">type of index to merge</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Index.BinSearch(System.Int32,System.Int32,System.Collections.ArrayList,System.String,System.Boolean,System.Boolean,System.Int32@)">
            <summary>
            Searches an index entry using recursive binary search algo (divide and conquer).
            </summary>
            <param name="nStart">start index for searching</param>
            <param name="nEnd">end index for searching</param>
            <param name="arrIndex">arraylist containing sorted IndexItem entries</param>
            <param name="keywordPath">keyword path to search</param>
            <param name="searchKeyword">true if the keywordPath will only contain the keyword not the complete path</param>
            <param name="caseInsensitive">True if case should be ignored</param>
            <param name="insertIndex">out reference. will receive the index where the item with the
            keywordPath should be inserted if not found (receives -1 if the item was found)</param>
            <returns>Returns an IndexItem instance if found, otherwise null 
            (use insertIndex for inserting the new item in a sorted order)</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Index.ContainsIndex(System.Collections.ArrayList,System.String)">
            <summary>
            Checks if a keyword exists in a index collection
            </summary>
            <param name="arrIndex">index to search (arraylist of IndexItems)</param>
            <param name="keywordPath">keywordpath to search</param>
            <returns>Returns the found IndexItem, otherwise null</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Index.SearchIndex(System.String,Netron.Neon.HtmlHelp.IndexType)">
            <summary>
            Searches the alinks- or klinks-index for a specific keyword/associative
            </summary>
            <param name="search">keyword/associative to search</param>
            <param name="typeOfIndex">type of index to search</param>
            <returns>Returns an ArrayList which contains IndexTopic items or null if nothing was found</returns>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.IndexItem">
            <summary>
            The class <c>IndexItem</c> implements an help-index item
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.IndexItem._keyWord">
            <summary>
            Internal member storing the keyword
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.IndexItem._infoTypeStrings">
            <summary>
            Internal member storing all associated information type strings
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.IndexItem._isSeeAlso">
            <summary>
            Internal member storing the flag if this is a see-also keyword
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.IndexItem._indent">
            <summary>
            Internal member storing the indent of the keyword
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.IndexItem._charIndex">
            <summary>
            Internal member storing the last index of the keyword in the seperated list
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.IndexItem._entryIndex">
            <summary>
            Internal member storing the entry index
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.IndexItem._seeAlso">
            <summary>
            Internal member storing an array of see-also values
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.IndexItem._nTopics">
            <summary>
            Internal member storing an array of topic offsets
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.IndexItem._Topics">
            <summary>
            Internal member storing the topics
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.IndexItem._chmFile">
            <summary>
            Associated CHMFile instance
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.IndexItem._chmFileName">
            <summary>
            Internal flag specifying the chm file path
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.IndexItem.#ctor(Netron.Neon.HtmlHelp.ChmDecoding.CHMFile,System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.String[],System.Int32[])">
            <summary>
            Constructor of the class
            </summary>
            <param name="chmFile">associated CHMFile instance</param>
            <param name="keyWord">keyword</param>
            <param name="isSeeAlso">true if it is a see-also keyword</param>
            <param name="indent">indent of the entry</param>
            <param name="charIndex">char index of the last keyword in the separated list</param>
            <param name="entryIndex">index of the entry</param>
            <param name="seeAlsoValues">string array with see-also values</param>
            <param name="topicOffsets">integer array with topic offsets</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.IndexItem.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.IndexItem.Dump(System.IO.BinaryWriter@,System.Boolean)">
            <summary>
            Dump the class data to a binary writer
            </summary>
            <param name="writer">writer to write the data</param>
            <param name="writeFileName">true if the chm filename should be written</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.IndexItem.Dump(System.IO.BinaryWriter@)">
            <summary>
            Dump the class data to a binary writer
            </summary>
            <param name="writer">writer to write the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.IndexItem.ReadDump(System.IO.BinaryReader@,System.Collections.ArrayList)">
            <summary>
            Reads the object data from a dump store
            </summary>
            <param name="reader">reader to read the data</param>
            <param name="filesList">filelist from helpsystem</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.IndexItem.ReadDump(System.IO.BinaryReader@)">
            <summary>
            Reads the object data from a dump store
            </summary>
            <param name="reader">reader to read the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.IndexItem.CompareTo(System.Object)">
            <summary>
            Implements the compareto method which allows sorting.
            </summary>
            <param name="obj">object to compare to</param>
            <returns>See <see cref="T:System.IComparable">IComparable.CompareTo()</see></returns>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexItem.ChmFile">
            <summary>
            Gets/Sets the associated CHMFile instance
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexItem.InfoTypeStrings">
            <summary>
            Gets the ArrayList which holds all information types/categories this item is associated
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.IndexItem.AddSeeAlso(System.String)">
            <summary>
            Adds a see-also string to the index item and marks it as see also item
            </summary>
            <param name="seeAlsoString">see also string to add</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexItem.KeyWordPath">
            <summary>
            Gets/Sets the full keyword-path of this item ( ", " separated list)
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexItem.KeyWord">
            <summary>
            Gets the keyword of this item
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexItem.IndentKeyWord">
            <summary>
            Gets the keyword of this item with prefixing indent spaces
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexItem.IsSeeAlso">
            <summary>
            Gets/Sets the see-also flag of this item
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexItem.Indent">
            <summary>
            Gets/Sets the listbox indent for this item
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexItem.CharIndex">
            <summary>
            Gets/Sets the character index of an indent keyword
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexItem.SeeAlso">
            <summary>
            Gets the see-also values of this item
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexItem.Topics">
            <summary>
            Gets an array with the associated topics
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.IndexTopic">
            <summary>
            The class <c>IndexTopic</c> implements an entry for the <see cref="T:Netron.Neon.HtmlHelp.IndexItem">IndexItem</see> topics list.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.IndexTopic.FromTopicEntry(Netron.Neon.HtmlHelp.ChmDecoding.TopicEntry)">
            <summary>
            Creates a new instance of the class based on an existing TopicEntry
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.IndexTopic.#ctor(System.Int32,Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Creates a new instance of the class (binary extraction mode)
            </summary>
            <param name="topicOffset">offset of the topic entry</param>
            <param name="associatedFile">associated CHMFile instance</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.IndexTopic.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor of the class
            </summary>
            <param name="Title">topic title</param>
            <param name="local">topic local (content filename)</param>
            <param name="compilefile">name of the chm file (location of topic)</param>
            <param name="chmpath">path of the chm file</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.IndexTopic.Dump(System.IO.BinaryWriter@)">
            <summary>
            Dump the class data to a binary writer
            </summary>
            <param name="writer">writer to write the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.IndexTopic.ReadDump(System.IO.BinaryReader@)">
            <summary>
            Reads the object data from a dump store
            </summary>
            <param name="reader">reader to read the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.IndexTopic.SetChmInfo(System.String,System.String)">
            <summary>
            Internally used to set the chm-finos when reading from dump store
            </summary>
            <param name="compilefile"></param>
            <param name="chmpath"></param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexTopic.AssociatedFile">
            <summary>
            Gets/Sets the associated CHMFile instance
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexTopic.Title">
            <summary>
            Gets the topic title
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexTopic.Local">
            <summary>
            Gets the local (content filename)
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexTopic.CompileFile">
            <summary>
            Gets the compile file (location)
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexTopic.ChmFilePath">
            <summary>
            Gets the chm file path
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexTopic.URL">
            <summary>
            Gets the url
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexTopic.TextEncoding">
            <summary>
            Gets the text encoding for reading the content file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexTopic.ContentFile">
            <summary>
            Gets the FileObject of the topics' associated content file
            </summary>
            <remarks>If the file can't be opened, the property will return null. Always call Close() method of the file object after finishing reading the file contents !!!</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.IndexTopic.FileContents">
            <summary>
            Gets the contents of the topics' associated content file
            </summary>
            <remarks>If the file can't be opened the property will return an emtpy string (same for binary data)</remarks>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.InformationTypeMode">
            <summary>
            Enumeration for specifying the mode of the information type
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.InformationTypeMode.Inclusive">
            <summary>
            Inclusive information type. The user will be allowed to select from one or more information types.
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.InformationTypeMode.Exclusive">
            <summary>
            Exclusive information type. The user will be allowed to choose only one information type within each category
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.InformationTypeMode.Hidden">
            <summary>
            Hidden information type. The user cannot see this information types (only for API calls).
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.InformationType">
            <summary>
            The class <c>InformationType</c> implements a methods/properties for an information type.
            </summary>
            <remarks>Note: Information types and categories allow users to filter help contents. 
            They are only supported if using sitemap TOC and/or sitemap Index.</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.InformationType.#ctor">
            <summary>
            Standard constructor
            </summary>
            <remarks>the mode is set to InformationTypeMode.Inclusive by default</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.InformationType.#ctor(System.String,System.String)">
            <summary>
            Standard constructor
            </summary>
            <param name="name">name of the information type</param>
            <param name="description">description</param>
            <remarks>the mode is set to InformationTypeMode.Inclusive by default</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.InformationType.#ctor(System.String,System.String,Netron.Neon.HtmlHelp.InformationTypeMode)">
            <summary>
            Standard constructor
            </summary>
            <param name="name">name of the information type</param>
            <param name="description">description</param>
            <param name="mode">mode of the information type</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.InformationType.Dump(System.IO.BinaryWriter@)">
            <summary>
            Dump the class data to a binary writer
            </summary>
            <param name="writer">writer to write the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.InformationType.ReadDump(System.IO.BinaryReader@)">
            <summary>
            Reads the object data from a dump store
            </summary>
            <param name="reader">reader to read the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.InformationType.SetCategoryFlag(System.Boolean)">
            <summary>
            Sets the flag if this information type is nested in at least one category 
            </summary>
            <param name="newValue">true or false</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.InformationType.ReferenceCount">
            <summary>
            Gets/Sets the reference count of this information type instance
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.InformationType.IsInCategory">
            <summary>
            Gets true if this information type is nested in at least one category
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.InformationType.Name">
            <summary>
            Gets/Sets the name of the information type
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.InformationType.Description">
            <summary>
            Gets/Sets the description of the information type
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.InformationType.Mode">
            <summary>
            Gets/Sets the mode of the information type
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Interop">
            <summary>
            The class <c>Interop</c> imports API-Methods from various dlls and defines some 
            structures used by this methods.
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Interop.WNDPROC">
            <summary>
            Delegate for default window procedure
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WINTRUST_ACTION_GENERIC_VERIFY_V2">
            <summary>
            WINTRUST_ACTION_GENERIC_VERIFY_V2 constant
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.IID_IUnknown">
            <summary>
            Guid for IID_IUnknown
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.NullIntPtr">
            <summary>
            NULL pointer
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.S_OK">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.STG_E_FILENOTFOUND">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.STG_E_INVALIDNAME">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.STGTY_STORAGE">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.STGTY_STREAM">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.STGTY_LOCKBYTES">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.STGTY_PROPERTY">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.COMPACT_DATA">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.COMPACT_DATA_AND_PATH">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_USER">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_CHAR">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_CLOSE">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_COMMAND">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_CREATE">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_DESTROY">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_ERASEBKGND">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_KILLFOCUS">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_LBUTTONDBLCLK">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_LBUTTONDOWN">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_LBUTTONUP">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_MBUTTONDBLCLK">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_MBUTTONDOWN">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_MBUTTONUP">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_MOUSEMOVE">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_NCLBUTTONDOWN">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_NCLBUTTONUP">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_NCPAINT">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_NOTIFY">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_PAINT">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_SETFOCUS">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WM_TIMER">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.HWND_TOPMOST">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.SW_SHOWNORMAL">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WS_EX_LAYERED">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WS_EX_TOOLWINDOW">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WS_EX_TOPMOST">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WS_HSCROLL">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WS_OVERLAPPEDWINDOW">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WS_POPUP">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WS_VISIBLE">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WS_VSCROLL">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WS_CHILD">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WS_BORDER">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WS_EX_WINDOWEDGE">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.CS_DROPSHADOW">
            <summary>
            Constant imports
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Interop.ITS_Control_Data">
            <summary>
            ITStorage control data struct
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.ITS_Control_Data.cdwControlData">
            <summary>
            Controldata flag
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.ITS_Control_Data.adwControlData">
            <summary>
            Controldata flag
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Interop.MSG">
            <summary>
            MSG struct implementation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.MSG.hwnd">
            <summary>
            See MSG in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.MSG.message">
            <summary>
            See MSG in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.MSG.wParam">
            <summary>
            See MSG in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.MSG.lParam">
            <summary>
            See MSG in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.MSG.time">
            <summary>
            See MSG in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.MSG.pt_x">
            <summary>
            See MSG in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.MSG.pt_y">
            <summary>
            See MSG in Plattform SDK documentation
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Interop.WNDCLASS">
            <summary>
            WNDCLASS struct implementation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WNDCLASS.style">
            <summary>
            See WNDCLASS in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WNDCLASS.lpfnWndProc">
            <summary>
            See WNDCLASS in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WNDCLASS.cbClsExtra">
            <summary>
            See WNDCLASS in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WNDCLASS.cbWndExtra">
            <summary>
            See WNDCLASS in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WNDCLASS.hInstance">
            <summary>
            See WNDCLASS in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WNDCLASS.hIcon">
            <summary>
            See WNDCLASS in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WNDCLASS.hCursor">
            <summary>
            See WNDCLASS in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WNDCLASS.hbrBackground">
            <summary>
            See WNDCLASS in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WNDCLASS.lpszMenuName">
            <summary>
            See WNDCLASS in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.WNDCLASS.lpszClassName">
            <summary>
            See WNDCLASS in Plattform SDK documentation
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT">
            <summary>
            PAINTSTRUCT struct implementation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT.hdc">
            <summary>
            See PAINTSTRUCT in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT.fErase">
            <summary>
            See PAINTSTRUCT in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT.rcPaint_left">
            <summary>
            See PAINTSTRUCT in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT.rcPaint_top">
            <summary>
            See PAINTSTRUCT in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT.rcPaint_right">
            <summary>
            See PAINTSTRUCT in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT.rcPaint_bottom">
            <summary>
            See PAINTSTRUCT in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT.fRestore">
            <summary>
            See PAINTSTRUCT in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT.fIncUpdate">
            <summary>
            See PAINTSTRUCT in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT.reserved1">
            <summary>
            See PAINTSTRUCT in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT.reserved2">
            <summary>
            See PAINTSTRUCT in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT.reserved3">
            <summary>
            See PAINTSTRUCT in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT.reserved4">
            <summary>
            See PAINTSTRUCT in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT.reserved5">
            <summary>
            See PAINTSTRUCT in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT.reserved6">
            <summary>
            See PAINTSTRUCT in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT.reserved7">
            <summary>
            See PAINTSTRUCT in Plattform SDK documentation
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT.reserved8">
            <summary>
            See PAINTSTRUCT in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.StgOpenStorage(System.String,Netron.Neon.HtmlHelp.Interop.IStorage,System.Int32,System.IntPtr,System.Int32,Netron.Neon.HtmlHelp.Interop.IStorage@)">
            <summary>
            Imports the ole32.dll function StgOpenStorage
            </summary>
            <param name="wcsName">storage name</param>
            <param name="pstgPriority">Points to previous opening of the storage object</param>
            <param name="grfMode">Access mode for the new storage object</param>
            <param name="snbExclude">Points to a block of stream names in the storage object</param>
            <param name="reserved">Reserved; must be zero</param>
            <param name="storage">out parameter returning the storage</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.BeginPaint(System.IntPtr,Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT@)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.CreateWindowEx(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.Object)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.DefWindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.DestroyWindow(System.IntPtr)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.DispatchMessage(Netron.Neon.HtmlHelp.Interop.MSG@)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.EndPaint(System.IntPtr,Netron.Neon.HtmlHelp.Interop.PAINTSTRUCT@)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.GetLastActivePopup(System.IntPtr)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.GetMessage(Netron.Neon.HtmlHelp.Interop.MSG@,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.GetMessagePos">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.KillTimer(System.IntPtr,System.Int32)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.PeekMessage(Netron.Neon.HtmlHelp.Interop.MSG@,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.PostQuitMessage(System.Int32)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.RegisterClass(Netron.Neon.HtmlHelp.Interop.WNDCLASS)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.UnregisterClass(System.String,System.IntPtr)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.RegisterWindowMessage(System.String)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.SetForegroundWindow(System.IntPtr)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.SetTimer(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.TranslateMessage(Netron.Neon.HtmlHelp.Interop.MSG@)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.UpdateWindow(System.IntPtr)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ShowWindow(System.IntPtr,System.Int32)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.GetModuleHandle(System.String)">
            <summary>
            Search for function name in Plattform SDK documentation
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Interop.IEnumSTATSTG">
            <summary>
            Imports the OLE interface IEnumSTATSG
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IEnumSTATSTG.Next(System.Int32,System.Runtime.InteropServices.STATSTG@,System.Int32@)">
            <summary>
            Retrieves the next celt items in the enumeration sequence. 
            If there are fewer than the requested number of elements left in the sequence, 
            it retrieves the remaining elements. 
            The number of elements actually retrieved is returned through pceltFetched 
            (unless the caller passed in NULL for that parameter).
            </summary>
            <param name="celt">Number of objects to retreive</param>
            <param name="rgVar">Array of STATSG elements</param>
            <param name="pceltFetched">Number of elements actually supplied</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IEnumSTATSTG.Skip(System.Int32)">
            <summary>
            Skips over the next specified number of elements in the enumeration sequence.
            </summary>
            <param name="celt">Number of elements to skip</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IEnumSTATSTG.Reset">
            <summary>
            Resets the enumeration sequence to the beginning.
            </summary>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IEnumSTATSTG.Clone(Netron.Neon.HtmlHelp.Interop.IEnumSTATSTG@)">
            <summary>
            Creates another enumerator that contains the same enumeration state 
            as the current one. Using this function, a client can record a 
            particular point in the enumeration sequence, and then return 
            to that point at a later time. The new enumerator supports the same 
            interface as the original one.
            </summary>
            <param name="newEnum">Output parameter of the new enumerator</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Interop.ILockBytes">
            <summary>
            The ILockBytes interface is implemented on a byte array object that 
            is backed by some physical storage, such as a disk file, global memory, 
            or a database. It is used by a COM compound file storage object to give 
            its root storage access to the physical device, while isolating the root 
            storage from the details of accessing the physical storage.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ILockBytes.ReadAt(System.Int64,System.IntPtr@,System.Int32)">
            <summary>
            Reads a specified number of bytes starting at a specified offset 
            from the beginning of the byte array object.
            </summary>
            <param name="ulOffset">Specifies the starting point for reading data</param>
            <param name="pv">Points to the buffer into which the data is read</param>
            <param name="cb">Specifies the number of bytes to read</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ILockBytes.WriteAt(System.Int64,System.IntPtr,System.Int32)">
            <summary>
            Writes the specified number of bytes starting at a specified offset 
            from the beginning of the byte array.
            </summary>
            <param name="ulOffset">Specifies the starting point for writing data</param>
            <param name="pv">Points to the buffer containing the data to be written</param>
            <param name="cb">Specifies the number of bytes to write</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ILockBytes.Flush">
            <summary>
            Ensures that any internal buffers maintained by the ILockBytes 
            implementation are written out to the underlying physical storage.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ILockBytes.SetSize(System.Int64)">
            <summary>
            Changes the size of the byte array.
            </summary>
            <param name="cb">Specifies the new size of the byte array in bytes</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ILockBytes.LockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>
            Restricts access to a specified range of bytes in the byte array.
            </summary>
            <param name="libOffset">Specifies the byte offset for the beginning of the range</param>
            <param name="cb">Specifies the length of the range in bytes</param>
            <param name="dwLockType">Specifies the type of restriction on accessing the specified range</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ILockBytes.UnlockRegion(System.Int64,System.Int64,System.Int32)">
            <summary>
            Removes the access restriction on a previously locked range of bytes.
            </summary>
            <param name="libOffset">Specifies the byte offset for the beginning of the range</param>
            <param name="cb">Specifies the length of the range in bytes</param>
            <param name="dwLockType">Specifies the access restriction previously placed on the range</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ILockBytes.Stat(System.Runtime.InteropServices.STATSTG@,System.Int32)">
            <summary>
            Retrieves a STATSTG structure containing information for this byte array object.
            </summary>
            <param name="pstatstg">Location for STATSTG structure</param>
            <param name="grfStatFlag">Values taken from the STATFLAG enumeration</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Interop.IStorage">
            <summary>
            The IStorage interface supports the creation and management of structured storage objects. 
            Structured storage allows hierarchical storage of information within a single file, and 
            is often referred to as "a file system within a file". Elements of a structured storage 
            object are storages and streams. Storages are analogous to directories, and streams are 
            analogous to files. Within a structured storage there will be a primary storage object that 
            may contain substorages, possibly nested, and streams. Storages provide the structure of the 
            object, and streams contain the data, which is manipulated through the IStream interface.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IStorage.CreateStream(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates and opens a stream object with the specified name contained in this storage object. 
            All elements within a storage object — both streams and other storage objects — are kept in 
            the same name space.
            </summary>
            <param name="pwcsName">Name of the new stream</param>
            <param name="grfMode">Access mode for the new stream</param>
            <param name="reserved1">Reserved; must be zero</param>
            <param name="reserved2">Reserved; must be zero</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IStorage.OpenStream(System.String,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Opens an existing stream object within this storage object in the specified access mode.
            </summary>
            <param name="pwcsName">Name of the stream</param>
            <param name="reserved1">Reserved; must be NULL</param>
            <param name="grfMode">Access mode for the new stream</param>
            <param name="reserved2">Reserved; must be zero</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IStorage.CreateStorage(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates and opens a new storage object nested within this storage object.
            </summary>
            <param name="pwcsName">Name of the new storage object</param>
            <param name="grfMode">Access mode for the new storage object</param>
            <param name="reserved1">Reserved; must be zero</param>
            <param name="reserved2">Reserved; must be zero</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IStorage.OpenStorage(System.String,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Opens an existing storage object with the specified name in the specified access mode.
            </summary>
            <param name="pwcsName">Name of the storage</param>
            <param name="pstgPriority">Points to previous opening of the storage object</param>
            <param name="grfMode">Access mode for the new storage object</param>
            <param name="snbExclude">Points to a block of stream names in the storage object</param>
            <param name="reserved">Reserved; must be zero</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IStorage.CopyTo(System.Int32,System.Guid[],System.IntPtr,Netron.Neon.HtmlHelp.Interop.IStorage)">
            <summary>
            Copies the entire contents of an open storage object to another storage object.
            </summary>
            <param name="ciidExclude">Number of elements in rgiidExclude</param>
            <param name="rgiidExclude">Array of interface identifiers (IIDs)</param>
            <param name="snbExclude">Points to a block of stream names in the storage object</param>
            <param name="pstgDest">Points to destination storage object</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IStorage.MoveElementTo(System.String,Netron.Neon.HtmlHelp.Interop.IStorage,System.String,System.Int32)">
            <summary>
            Copies or moves a substorage or stream from this storage object to another storage object.
            </summary>
            <param name="pwcsName">Name of the element to be moved</param>
            <param name="pstgDest">Points to destination storage object</param>
            <param name="pwcsNewName">Points to new name of element in destination</param>
            <param name="grfFlags">Specifies a copy or a move</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IStorage.Commit(System.Int32)">
            <summary>
            Ensures that any changes made to a storage object open in transacted mode are reflected in 
            the parent storage; for a root storage, reflects the changes in the actual device, for 
            example, a file on disk. For a root storage object opened in direct mode, this method has no 
            effect except to flush all memory buffers to the disk. For non-root storage objects in direct mode, 
            this method has no effect.
            </summary>
            <param name="grfCommitFlags">Specifies how changes are to be committed</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IStorage.Revert">
            <summary>
            Discards all changes that have been made to the storage object since the last commit.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IStorage.EnumElements(System.Int32,System.IntPtr,System.Int32,Netron.Neon.HtmlHelp.Interop.IEnumSTATSTG@)">
            <summary>
            Retrieves a pointer to an enumerator object that can be used to enumerate the storage and stream 
            objects contained within this storage object.
            </summary>
            <param name="reserved1">Reserved; must be zero</param>
            <param name="reserved2">Reserved; must be NULL</param>
            <param name="reserved3">Reserved; must be zero</param>
            <param name="ppenum">Output variable that receives the IEnumSTATSTG interface</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IStorage.DestroyElement(System.String)">
            <summary>
            Removes the specified storage or stream from this storage object.
            </summary>
            <param name="pwcsName">Name of the element to be removed</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IStorage.RenameElement(System.String,System.String)">
            <summary>
            Renames the specified substorage or stream in this storage object.
            </summary>
            <param name="pwcsOldName">Old name of the element</param>
            <param name="pwcsNewName">New name of the element</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IStorage.SetElementTimes(System.String,System.Runtime.InteropServices.FILETIME,System.Runtime.InteropServices.FILETIME,System.Runtime.InteropServices.FILETIME)">
            <summary>
            Sets the modification, access, and creation times of the specified storage element, if supported 
            by the underlying file system.
            </summary>
            <param name="pwcsName">Name of the element to be changed</param>
            <param name="pctime">New creation time for element, or NULL</param>
            <param name="patime">New access time for element, or NULL</param>
            <param name="pmtime">New modification time for element, or NULL</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IStorage.SetClass(System.Guid@)">
            <summary>
            Assigns the specified CLSID to this storage object.
            </summary>
            <param name="clsid">Class identifier to be assigned to the storage object</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IStorage.SetStateBits(System.Int32,System.Int32)">
            <summary>
            Stores up to 32 bits of state information in this storage object.
            </summary>
            <param name="grfStateBits">Specifies new values of bits</param>
            <param name="grfMask">Specifies mask that indicates which bits are significant</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.IStorage.Stat(System.Runtime.InteropServices.STATSTG@,System.Int32)">
            <summary>
            Retrieves the STATSTG structure for this open storage object.
            </summary>
            <param name="pStatStg">Ouput STATSTG structure</param>
            <param name="grfStatFlag">Values taken from the STATFLAG enumeration</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Interop.ITStorage">
            <summary>
            Imports the interface ITStorage
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ITStorage.StgCreateDocfile(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new doc file
            </summary>
            <param name="pwcsName">Name of the new stream</param>
            <param name="grfMode">Access mode for the new stream</param>
            <param name="reserved">Reserved; must be zero</param>
            <returns>An IStorage reference to the new file</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ITStorage.StgCreateDocfileOnILockBytes(Netron.Neon.HtmlHelp.Interop.ILockBytes,System.Int32,System.Int32)">
            <summary>
            Creates a new doc file on licked bytes
            </summary>
            <param name="plkbyt">ILockBytes interface</param>
            <param name="grfMode">Access mode for the new stream</param>
            <param name="reserved">Reserved; must be zero</param>
            <returns>An IStorage reference to the new file</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ITStorage.StgIsStorageFile(System.String)">
            <summary>
            Checks if a filename exists in the storage
            </summary>
            <param name="pwcsName">name of the file to check</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ITStorage.StgIsStorageILockBytes(Netron.Neon.HtmlHelp.Interop.ILockBytes)">
            <summary>
            Checks if a ILockBytes is part of the storage
            </summary>
            <param name="plkbyt">ILockBytes instance</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ITStorage.StgOpenStorage(System.String,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Opens a storage
            </summary>
            <param name="pwcsName">Name of the storage</param>
            <param name="pstgPriority">Points to previous opening of the storage object</param>
            <param name="grfMode">Access mode for the new storage object</param>
            <param name="snbExclude">Points to a block of stream names in the storage object</param>
            <param name="reserved">Reserved; must be zero</param>
            <returns>An IStorage reference to the new file</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ITStorage.StgOpenStorageOnILockBytes(Netron.Neon.HtmlHelp.Interop.ILockBytes,Netron.Neon.HtmlHelp.Interop.IStorage,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Opens a storage
            </summary>
            <param name="plkbyt">ILockBytes instance</param>
            <param name="pStgPriority">Points to previous opening of the storage object</param>
            <param name="grfMode">Access mode for the new storage object</param>
            <param name="snbExclude">Points to a block of stream names in the storage object</param>
            <param name="reserved">Reserved; must be zero</param>
            <returns>An IStorage reference to the new file</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ITStorage.StgSetTimes(System.String,System.Runtime.InteropServices.FILETIME,System.Runtime.InteropServices.FILETIME,System.Runtime.InteropServices.FILETIME)">
            <summary>
            Set the file times of a storage file
            </summary>
            <param name="lpszName">Name of the element to be changed</param>
            <param name="pctime">New creation time for element, or NULL</param>
            <param name="patime">New access time for element, or NULL</param>
            <param name="pmtime">New modification time for element, or NULL</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ITStorage.SetControlData(Netron.Neon.HtmlHelp.Interop.ITS_Control_Data)">
            <summary>
            Sets the storage control data
            </summary>
            <param name="pControlData">control data</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ITStorage.DefaultControlData(Netron.Neon.HtmlHelp.Interop.ITS_Control_Data)">
            <summary>
            Sets the default control data
            </summary>
            <param name="ppControlData">control data</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Interop.ITStorage.Compact(System.String,System.Int32)">
            <summary>
            Compact a file
            </summary>
            <param name="pwcsName">filename</param>
            <param name="iLev">level</param>
            <returns>Returns S_OK if succeeded</returns>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Interop.UCOMITStorage">
            <summary>
            Imports the class <c>UCOMITStorage</c>
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Storage.FileObject">
            <summary>
            The class <c>FileObject</c> implements the properties/methods for handling storage file streams
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Storage.FileObject.fileName">
            <summary>
            Internal member storing the name of the file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Storage.FileObject.filePath">
            <summary>
            Internal member storing the path of the file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Storage.FileObject.fileUrl">
            <summary>
            Internal member storing the url of the file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Storage.FileObject.fileType">
            <summary>
            Internal member storing the type of the file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Storage.FileObject.fileStorage">
            <summary>
            Internal member storing the storage of the file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Storage.FileObject.fileStream">
            <summary>
            Internal member storing the storage stream
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Storage.FileObject.Length">
            <summary>
            Gets the length of the file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Storage.FileObject.CanRead">
            <summary>
            Gets a flag if reading is supported
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Storage.FileObject.CanWrite">
            <summary>
            Gets a flag if writing is supported
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Storage.FileObject.CanSeek">
            <summary>
            Gets a flag if seeking is supported
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Storage.FileObject.Position">
            <summary>
            Gets the current position in the stream
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Storage.FileObject.FileName">
            <summary>
            Gets the file name
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Storage.FileObject.FilePath">
            <summary>
            Gets the file path
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Storage.FileObject.FileUrl">
            <summary>
            Gets the file url
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Storage.FileObject.FileType">
            <summary>
            Gets the file type
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Storage.FileObject.FileStorage">
            <summary>
            Gets the storage of the file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Storage.FileObject.FileStream">
            <summary>
            Gets the storage stream for this file
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.FileObject.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from the stream
            </summary>
            <param name="buffer">buffer which will receive the bytes</param>
            <param name="offset">offset</param>
            <param name="count">number of bytes to be read</param>
            <returns>Returns the actual number of bytes read from the stream.</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.FileObject.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes to the stream
            </summary>
            <param name="buffer">byte array which contains the bytes to write</param>
            <param name="offset">offset where to write the bytes</param>
            <param name="count">number of bytes to write</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.FileObject.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks to a position within the stream
            </summary>
            <param name="offset">offset to seek</param>
            <param name="origin">seek origin</param>
            <returns>Returns the new position</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.FileObject.Flush">
            <summary>
            Flushes the stream
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.FileObject.Close">
            <summary>
            Closes the storage stream
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.FileObject.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream
            </summary>
            <param name="Value">new length of the stream</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.FileObject.Save(System.String)">
            <summary>
            Saves the stream to a file
            </summary>
            <param name="FileName">filename</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.FileObject.ReadFromFile">
            <summary>
            Reads from the stream (text-based)
            </summary>
            <returns>The string contents of the stream</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.FileObject.ReadFromFile(System.Text.Encoding)">
            <summary>
            Reads from the stream (text based)
            </summary>
            <param name="encoder">encoder to use during read operation</param>
            <returns>The string contents of the stream</returns>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Storage.FileObjectCollection">
            <summary>
            The class <c>FileObjectCollection</c> implements a colletion class for enumerated storage files
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.FileObjectCollection.Add(Netron.Neon.HtmlHelp.Storage.FileObject)">
            <summary>
            Adds a new file object to the collection
            </summary>
            <param name="fo">file object instance to add</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.FileObjectCollection.Remove(System.Int32)">
            <summary>
            Removes a file object from the collection
            </summary>
            <param name="index">index of file object to remove</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.FileObjectCollection.Item(System.Int32)">
            <summary>
            Gets the file object at a given index from the collection
            </summary>
            <param name="index">index of file object to retreive</param>
            <returns>Returns the file object at the given index, or null if not found.</returns>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Storage.IBaseStorageWrapper">
            <summary>
            The class <c>IBaseStorageWrapper</c> is the base wrapper for the Interop.IStorage interface
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Storage.IBaseStorageWrapper.storage">
            <summary>
            Internal member storing the actual storage interface
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Storage.IBaseStorageWrapper.baseUrl">
            <summary>
            Internal member storing the baseUrl of the file(s)
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Storage.IBaseStorageWrapper.foCollection">
            <summary>
            Internal member storing the file object collection (if files where enumerated)
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Storage.IBaseStorageWrapper.Storage">
            <summary>
            Gets the internal Interop.IStorage member
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.Storage.IBaseStorageWrapper.BaseUrl">
            <summary>
            Gets the base url of files
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.IBaseStorageWrapper.#ctor">
            <summary>
            Constructor of the class
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.IBaseStorageWrapper.EnumIStorageObject">
            <summary>
            Enumerates an Interop.IStorage object and creates the internal file object collection
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.IBaseStorageWrapper.EnumIStorageObject(Netron.Neon.HtmlHelp.Interop.IStorage,System.String)">
            <summary>
            Enumerates an Interop.IStorage object and creates the internal file object collection
            </summary>
            <param name="BasePath">Sets the base url for the storage files</param>
            <param name="enumStorage">storage to enumerate</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Storage.IStorageWrapper">
            <summary>
            The class <c>IStorageWrapper</c> extends <c>IBaseStorageWrapper</c> and adds functionality for 
            the interface IStorage.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.IStorageWrapper.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor of the class
            </summary>
            <param name="workPath">workpath of the storage</param>
            <param name="enumStorage">true if the storage should be enumerated automatically</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.IStorageWrapper.EnumIStorageObject">
            <summary>
            Enumerates an IStorage object and creates the file object collection
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.Storage.ITStorageWrapper">
            <summary>
            The class <c>ITStorageWrapper</c> extends <c>IBaseStorageWrapper</c> and adds functionality for 
            the interface ITStorage.
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Storage.ITStorageWrapper.comITStorage">
            <summary>
            Internal UCOM storage
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.Storage.ITStorageWrapper.comITStorageInterfaced">
            <summary>
            Internal storage
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.ITStorageWrapper.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor of the class
            </summary>
            <param name="workPath">workpath of the storage</param>
            <param name="enumStorage">true if the storage should be enumerated automatically</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.ITStorageWrapper.EnumIStorageObject">
            <summary>
            Enumerates an IStorage object and creates the file object collection
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.ITStorageWrapper.OpenSubStorage(Netron.Neon.HtmlHelp.Interop.IStorage,System.String)">
            <summary>
            Opens a sub storage. Call this if an enumerated file object is of type storage
            </summary>
            <param name="parentStorage">parent storage of the sub storage file</param>
            <param name="storageName">name of the storage</param>
            <returns>Returns a reference to the sub storage</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.Storage.ITStorageWrapper.OpenUCOMStream(Netron.Neon.HtmlHelp.Interop.IStorage,System.String)">
            <summary>
            Opens an UCOMIStream and returns the associated file object
            </summary>
            <param name="parentStorage">storage used to open the stream</param>
            <param name="fileName">filename of the stream</param>
            <returns>A <see cref="T:Netron.Neon.HtmlHelp.Storage.FileObject">FileObject</see> instance if the file was found, otherwise null.</returns>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.TableOfContents">
            <summary>
            The class <c>TableOfContents</c> holds the TOC of the htmlhelp system class.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TableOfContents.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TableOfContents.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor of the class
            </summary>
            <param name="toc"></param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TableOfContents.TOC">
            <summary>
            Gets the internal stored table of contents
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TableOfContents.Clear">
            <summary>
            Clears the current toc
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TableOfContents.Count">
            <summary>
            Gets the number of topics in the toc
            </summary>
            <returns>Returns the number of topics in the toc</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TableOfContents.MergeToC(System.Collections.ArrayList)">
            <summary>
            Merges the <c>arrToC</c> list to the one in this instance
            </summary>
            <param name="arrToC">the toc list which should be merged with the current one</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TableOfContents.MergeToC(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Merges the <c>arrToC</c> list to the one in this instance (called if merged files
            were found in a CHM)
            </summary>
            <param name="arrToC">the toc list which should be merged with the current one</param>
            <param name="openFiles">An arraylist of CHMFile instances.</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TableOfContents.MergeToC(System.Collections.ArrayList,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Internal method for recursive toc merging
            </summary>
            <param name="globalLevel">level of global toc</param>
            <param name="localLevel">level of local toc</param>
            <param name="openFiles">An arraylist of CHMFile instances.</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TableOfContents.IsMergedItem(System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Checks if the item is part of the merged-links
            </summary>
            <param name="name">name of the topic</param>
            <param name="local">local of the topic</param>
            <param name="openFiles">An arraylist of CHMFile instances.</param>
            <returns>Returns true if this item is part of the merged-links</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TableOfContents.ContainsToC(System.Collections.ArrayList,System.String)">
            <summary>
            Checks if a topicname exists in a SINGLE toc level 
            </summary>
            <param name="arrToC">toc list</param>
            <param name="Topic">topic to search</param>
            <returns>Returns the topic item if found, otherwise null</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TableOfContents.SearchTopic(System.String)">
            <summary>
            Searches the table of contents for a special topic
            </summary>
            <param name="topic">topic to search</param>
            <returns>Returns an instance of TOCItem if found, otherwise null</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TableOfContents.SearchTopic(System.String,System.Collections.ArrayList)">
            <summary>
            Internal recursive tree search
            </summary>
            <param name="topic">topic to search</param>
            <param name="searchIn">tree level list to look in</param>
            <returns>Returns an instance of TOCItem if found, otherwise null</returns>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.TOCItem">
            <summary>
            The class <c>TOCItem</c> implements a toc-entry item
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem.STD_FOLDER_HH2">
            <summary>
            Constant for standard folder (closed) image index (HH2 image list)
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem.STD_FOLDER_OPEN_HH2">
            <summary>
            Constant for standard folder (opened) image index (HH2 image list)
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem.STD_FILE_HH2">
            <summary>
            Constant for standard file image index (HH2 image list)
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem.STD_FOLDER_HH1">
            <summary>
            Constant for standard folder (closed) image index (HH1 image list)
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem.STD_FOLDER_OPEN_HH1">
            <summary>
            Constant for standard folder (opened) image index (HH1 image list)
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem.STD_FILE_HH1">
            <summary>
            Constant for standard file image index (HH1 image list)
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem._tocMode">
            <summary>
            Internal flag specifying the data extraction mode used for this item
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem._offset">
            <summary>
            Internal member storing the offset (only used in binary tocs)
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem._offsetNext">
            <summary>
            Internal member storing the offset of the next item(only used in binary tocs)
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem._mergeLink">
            <summary>
            Internal member storing a merge link. 
            If the target file is in the merged files list of the CHM,
            this item will be replaced with the target TOC or Topic, if not it will 
            be removed from TOC.
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem._name">
            <summary>
            Internal member storing the toc name
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem._local">
            <summary>
            Internal member storing the toc loca (content file)
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem._infoTypeStrings">
            <summary>
            Internal member storing all associated information type strings
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem._chmFile">
            <summary>
            Internal member storing the associated chm file
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem._imageIndex">
            <summary>
            Internal member storing the image index
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem._topicOffset">
            <summary>
            Internal member storing the offset of the associated topic entry (for binary tocs)
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem._children">
            <summary>
            Internal member storing the toc children
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem._otherParams">
            <summary>
            Internal member storing the parameter collection
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem._associatedFile">
            <summary>
            Internal member storing the associated chmfile object
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.TOCItem._parent">
            <summary>
            Parent item
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TOCItem.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Constructor of the class used during text-based data extraction
            </summary>
            <param name="name">name of the item</param>
            <param name="local">local content file</param>
            <param name="ImageIndex">image index</param>
            <param name="chmFile">associated chm file</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TOCItem.#ctor(System.Int32,System.Int32,Netron.Neon.HtmlHelp.ChmDecoding.CHMFile)">
            <summary>
            Constructor of the class used during binary data extraction
            </summary>
            <param name="topicOffset">offset of the associated topic entry</param>
            <param name="ImageIndex">image index to use</param>
            <param name="associatedFile">associated chm file</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TOCItem.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TOCItem.Dump(System.IO.BinaryWriter@,System.Boolean)">
            <summary>
            Dump the class data to a binary writer
            </summary>
            <param name="writer">writer to write the data</param>
            <param name="writeFilename">true if the chmfile name should be written</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TOCItem.Dump(System.IO.BinaryWriter@)">
            <summary>
            Dump the class data to a binary writer
            </summary>
            <param name="writer">writer to write the data</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TOCItem.ReadDump(System.IO.BinaryReader@,System.Boolean)">
            <summary>
            Reads the object data from a dump store
            </summary>
            <param name="reader">reader to read the data</param>
            <param name="readFilename">true if the chmfile name should be read</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.TOCItem.ReadDump(System.IO.BinaryReader@)">
            <summary>
            Reads the object data from a dump store
            </summary>
            <param name="reader">reader to read the data</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.TocMode">
            <summary>
            Gets/Sets the data extraction mode with which this item was created.
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.TopicOffset">
            <summary>
            Gets/Sets the offset of the associated topic entry
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.AssociatedFile">
            <summary>
            Gets/Sets the associated CHMFile instance
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.Offset">
            <summary>
            Gets/Sets the offset of the item.
            </summary>
            <remarks>Only used in binary tocs</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.OffsetNext">
            <summary>
            Gets/Sets the offset of the next item.
            </summary>
            <remarks>Only used in binary tocs</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.InfoTypeStrings">
            <summary>
            Gets the ArrayList which holds all information types/categories this item is associated
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.Parent">
            <summary>
            Gets/Sets the parent of this item
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.MergeLink">
            <summary>
            Gets/Sets the mergelink for this item. 
            <b>You should not set the mergedlink by your own !</b>
            This is only for loading merged CHMs.
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.Name">
            <summary>
            Gets/Sets the name of the item
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.Local">
            <summary>
            Gets/Sets the local of the item
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.ChmFile">
            <summary>
            Gets/Sets the chm file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.Url">
            <summary>
            Gets the url for the webbrowser for this file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.ImageIndex">
            <summary>
            Gets/Sets the image index of the item
            </summary>
            <remarks>Set this to -1 for a default icon</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.Children">
            <summary>
            Gets/Sets the children of this item.
            </summary>
            <remarks>Each entry in the ArrayList is of type TOCItem</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.Params">
            <summary>
            Gets the internal hashtable storing all params
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.TextEncoding">
            <summary>
            Gets the text encoding for reading the content file
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.ContentFile">
            <summary>
            Gets the FileObject of the topics' associated content file
            </summary>
            <remarks>If the file can't be opened, the property will return null. Always call Close() method of the file object after finishing reading the file contents !!!</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.TOCItem.FileContents">
            <summary>
            Gets the contents of the topics' associated content file
            </summary>
            <remarks>If the file can't be opened the property will return an emtpy string (same for binary data)</remarks>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.helpIndex">
            <summary>
            The class <c>helpIndex</c> implements a user control which displays the HtmlHelp index pane 
            known by the default HtmlHelp viewer
            </summary>
        </member>
        <member name="E:Netron.Neon.HtmlHelp.UIComponents.helpIndex.IndexSelected">
            <summary>
            Event if the user changes the selection in the toc tree
            </summary>
        </member>
        <member name="E:Netron.Neon.HtmlHelp.UIComponents.helpIndex.TopicsFound">
            <summary>
            Event if the user selects a keyword which is bound to more than one topic.
            </summary>
            <remarks>If you don't add an event handler for this event, the user control will show its own dialog 
            with the found topics.</remarks>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.helpIndex._arrIndex">
            <summary>
            Internal member storing the arraylist of indezes
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.helpIndex.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpIndex.#ctor">
            <summary>
            Constructor of the class
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpIndex.OnIndexSelected(Netron.Neon.HtmlHelp.UIComponents.IndexEventArgs)">
            <summary>
            Fireing the on selected event
            </summary>
            <param name="e">event parameters</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpIndex.OnTopicsFound(Netron.Neon.HtmlHelp.UIComponents.TopicsFoundEventArgs)">
            <summary>
            Fireing the topics found event
            </summary>
            <param name="e">event parameters</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpIndex.ClearContents">
            <summary>
            Clears the items displayed in the index pane
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpIndex.BuildIndex(Netron.Neon.HtmlHelp.Index,Netron.Neon.HtmlHelp.IndexType)">
            <summary>
            Call this method to build the help-index and fill the internal list box
            </summary>
            <param name="index">Index instance extracted from the chm file(s)</param>
            <param name="typeOfIndex">type of index to display</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpIndex.BuildIndex(Netron.Neon.HtmlHelp.Index,Netron.Neon.HtmlHelp.IndexType,Netron.Neon.HtmlHelp.UIComponents.InfoTypeCategoryFilter)">
            <summary>
            Call this method to build the help-index and fill the internal list box
            </summary>
            <param name="index">Index instance extracted from the chm file(s)</param>
            <param name="typeOfIndex">type of index to display</param>
            <param name="filter">information type/category filter</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpIndex.SelectText(System.String)">
            <summary>
            Sets the selected index text
            </summary>
            <param name="indexText">text to select</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpIndex.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpIndex.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpIndex.lbIndex_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Called if the user double-clicks on the listbox
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameter</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpIndex.btnDisplay_Click(System.Object,System.EventArgs)">
            <summary>
            Called if the user clicks on the <c>Display</c> button
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameter</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpIndex.DisplayTopic(System.Boolean)">
            <summary>
            Checks the selection of the listbox. If the keyword contains more than one topic, 
            a "Topics found" dialog will be displayed to the user and let him select de desired topic.
            Fires the <c>IndexSelected</c> event let the parent window know, that the user wants to view
            a new help topic.
            </summary>
            <param name="errorOnNothingSelected">set this true, if you want to display an error message if no item is selected</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpIndex.tbLookfor_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Called if the user changes the text of the "Loof for" textbox
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameter</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpIndex.tbLookfor_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Called if the user presses a key in the "Look for" textbox
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameter</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx">
            <summary>
            The class <c>HelpProviderEx</c> implements an extended HelpProvider for interacting with
            the class library.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx.Viewer">
            <summary>
            Gets/Sets the help viewer which will receive display requests
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx.HelpNamespace">
            <summary>
            Gets/Sets the HelpNamespace name
            </summary>
            <remarks>This property is only for compatibility with the default HelpProvider.</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx.GetHelpNamespace(System.Windows.Forms.Control)">
            <summary>
            Gets the property HelpNamespace for a specific control
            </summary>
            <param name="control">control for which the HelpNamespace should be retreived</param>
            <returns>Returns the HelpNamespace for this control</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx.SetHelpNamespace(System.Windows.Forms.Control,System.String)">
            <summary>
            Sets the property HelpNamespace for a specific control
            </summary>
            <param name="control">control for which the HelpNamespace should be set</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx.GetHelpKeyword(System.Windows.Forms.Control)">
            <summary>
            Gets the property HelpKeyword for a specific control
            </summary>
            <param name="control">control for which the HelpNamespace should be retreived</param>
            <returns>Returns the HelpNamespace for this control</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx.SetHelpKeyword(System.Windows.Forms.Control,System.String)">
            <summary>
            Sets the property HelpKeyword for a specific control
            </summary>
            <param name="control">control for which the HelpKeyword should be set</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx.GetHelpNavigator(System.Windows.Forms.Control)">
            <summary>
            Gets the property HelpNavigator for a specific control
            </summary>
            <param name="control">control for which the HelpNavigator should be retreived</param>
            <returns>Returns the HelpNavigator for this control</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx.SetHelpNavigator(System.Windows.Forms.Control,System.Windows.Forms.HelpNavigator)">
            <summary>
            Sets the property HelpNavigator for a specific control
            </summary>
            <param name="control">control for which the HelpNavigator should be set</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx.GetHelpString(System.Windows.Forms.Control)">
            <summary>
            Gets the property HelpString for a specific control
            </summary>
            <param name="control">control for which the HelpString should be retreived</param>
            <returns>Returns the HelpString for this control</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx.SetHelpString(System.Windows.Forms.Control,System.String)">
            <summary>
            Sets the property HelpString for a specific control
            </summary>
            <param name="control">control for which the HelpString should be set</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx.GetShowHelp(System.Windows.Forms.Control)">
            <summary>
            Gets the property ShowHelp for a specific control
            </summary>
            <param name="control">control for which the ShowHelp should be retreived</param>
            <returns>Returns the ShowHelp for this control</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx.SetShowHelp(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the property ShowHelp for a specific control
            </summary>
            <param name="control">control for which the ShowHelp should be set</param>
            <param name="value">value to set</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx.System#ComponentModel#IExtenderProvider#CanExtend(System.Object)">
            <summary>
            Implements the interface method CanExtend()
            </summary>
            <param name="extendee">object/control which is checked if it is extendable by this provider</param>
            <returns>Returns true if the object can be extended</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx.HandleHelpRequested(System.Object,System.Windows.Forms.HelpEventArgs)">
            <summary>
            Called if the user request help on one of the extended controls
            </summary>
            <param name="sender">sender of the event (the control)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpProviderEx.HandleKeyPressed(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Called if the user presses a key in one of the extended controls
            </summary>
            <param name="sender">sender of the event (the control)</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.helpSearch">
            <summary>
            The class <c>helpSearch</c> implements a user control which displays the HtmlHelp full-text search pane to 
            the user.
            </summary>
        </member>
        <member name="E:Netron.Neon.HtmlHelp.UIComponents.helpSearch.FTSearch">
            <summary>
            Event if the user presses the "search" button in the control
            </summary>
        </member>
        <member name="E:Netron.Neon.HtmlHelp.UIComponents.helpSearch.HitSelected">
            <summary>
            Event if the user changes the selection in the hit results
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.helpSearch.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpSearch.#ctor">
            <summary>
            Constructor of the class
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpSearch.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpSearch.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpSearch.ClearContents">
            <summary>
            Clears the items displayed in the search pane
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpSearch.SetResults(System.Data.DataTable)">
            <summary>
            Updates the search results with the records of the given datatable
            </summary>
            <param name="hits">hits table</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpSearch.SetSearchText(System.String)">
            <summary>
            Sets the text which appears in the look-for textbox
            </summary>
            <param name="searchText"></param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpSearch.OnFTSearch(Netron.Neon.HtmlHelp.UIComponents.SearchEventArgs)">
            <summary>
            Fireing the do search event
            </summary>
            <param name="e">event parameters</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpSearch.OnHitSelected(Netron.Neon.HtmlHelp.UIComponents.HitEventArgs)">
            <summary>
            Fireing the do search event
            </summary>
            <param name="e">event parameters</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpSearch.btnDoSearch_Click(System.Object,System.EventArgs)">
            <summary>
            Called if the user clicks on the <c>Search</c> button.
            If the "Look for" text is not empty, this method fires the <c>FTSearch</c> event notifying the
            parent window, that the user wants to perform a fulltext search.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameter</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpSearch.lvSearch_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Called if the user selects an item of the search results. 
            This method fires the <c>HitSelected</c> event notifying the parent window, that the user wants to 
            view a new help topic.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameter</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpSearch.tbLookfor_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Called if the user presses a key in the "Look for" textbox.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameter</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.helpSearch.lvSearch_ColumnClick(System.Object,System.Windows.Forms.ColumnClickEventArgs)">
            <summary>
            Called if the user clicks on a column header of the search results
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameter</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow">
            <summary>
            The class <c>HelpToolTipWindow</c> implements a native tooltip window
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.ThreadName">
            <summary>
            Constant specifying the thread name for a tool window
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.WindowClassName">
            <summary>
            Constant specifying the window class name
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.current">
            <summary>
            Internal member for the current tooltip window
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.tooltipWindowProcedure">
            <summary>
            Window procedure of the splash screen
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow._showShadow">
            <summary>
            Internal member specifying if a shadow should be drawn
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow._widthMax">
            <summary>
            Internal member storing the max toolwindow width
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow._width">
            <summary>
            Internal member storing the width of the window
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow._height">
            <summary>
            Internal member storing the height of the window
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow._hwnd">
            <summary>
            Internal member storing the handle to the window
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow._timer">
            <summary>
            Internal member storing the timer id
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow._maximumDuration">
            <summary>
            Internal member specifying the maximum show duration 
            after loosing the focus.
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow._waitingForTimer">
            <summary>
            Internal member specifying if we wait for the timer
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow._windowToActivate">
            <summary>
            Internal member specifying the window which should be activated
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow._visible">
            <summary>
            Intneral flag specifying if the toolwindow is visible or not
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow._text">
            <summary>
            Internal memnber storing the window text
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow._location">
            <summary>
            Internal member storing the display location
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.Text">
            <summary>
            Gets/Sets the window text
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.MaximumDuration">
            <summary>
            Gets/Sets the maximum display duration after loosing the focus
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.ShowShadow">
            <summary>
            Gets/Sets if a shadow should be drawn
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.Visible">
            <summary>
            Gets a flag specifying if the toolwindow is currently visible or not
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.Location">
            <summary>
            Gets/Sets the window location
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.MaxWidth">
            <summary>
            Gets/Sets the maximum tooltip window width
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.CreateNativeWindow">
            <summary>
            Creates a native window using the API-call CreateWindowEx()
            </summary>
            <returns>true if succeeded, otherwise false</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.Show">
            <summary>
            Shows the tooltip window
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.Hide(System.Windows.Forms.IWin32Window)">
            <summary>
            Hindes the window
            </summary>
            <param name="windowToActivate">window which should be activated</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.IsDropShadowSupported">
            <summary>
            Checks if a shadow can be drawn or not
            </summary>
            <returns>true if a shadow can be drawn</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.RegisterWindowClass">
            <summary>
            Registeres the window class using the API-call RegisterClass()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.ToolTipThreadProcedure">
            <summary>
            Windowthread for the tooltip
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.ToolTipWindowProcedure(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Window procedure for the tooltip
            </summary>
            <param name="hwnd">handle of window</param>
            <param name="msg">WM_ constant</param>
            <param name="wParam">wParam of message</param>
            <param name="lParam">lParam of message</param>
            <returns>0 if message was handled, otherwise 1</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.CalculateWindowSize">
            <summary>
            Calculates the window size and position
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the tooltip window
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HelpToolTipWindow.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.HitSelectedEventHandler">
            <summary>
            Eventhandler for handling full-text search-hit events
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.HitEventArgs">
            <summary>
            The class <c>HitEventArgs</c> implements the event parameters which occures if the user selects a search hit.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.HitEventArgs.#ctor(System.String,System.String,System.String,System.Double)">
            <summary>
            Constructor of the event args
            </summary>
            <param name="title">the title of the topic</param>
            <param name="url">url selected by the user</param>
            <param name="location">location of the hit</param>
            <param name="rating">rating of the hit</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.HitEventArgs.Title">
            <summary>
            Gets the title of the selected topic
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.HitEventArgs.URL">
            <summary>
            Gets the topic-url selected by the user
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.HitEventArgs.Location">
            <summary>
            Gets the location of the selected topic
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.HitEventArgs.Rating">
            <summary>
            Gets the rating of the selected hit
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.IHelpViewer">
            <summary>
            The interface <c>IHelpViewer</c> defines methods/properties for a help-viewing window.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.IHelpViewer.NavigateTo(System.String)">
            <summary>
            Navigates the helpviewer to a specific help url
            </summary>
            <param name="url">url</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.IHelpViewer.ShowHelp(System.String,System.Windows.Forms.HelpNavigator,System.String)">
            <summary>
            Shows help for a specific url
            </summary>
            <param name="namespaceFilter">namespace filter (used for merged files)</param>
            <param name="hlpNavigator">navigator value</param>
            <param name="keyword">keyword</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.IHelpViewer.ShowHelp(System.String,System.Windows.Forms.HelpNavigator,System.String,System.String)">
            <summary>
            Shows help for a specific keyword
            </summary>
            <param name="namespaceFilter">namespace filter (used for merged files)</param>
            <param name="hlpNavigator">navigator value</param>
            <param name="keyword">keyword</param>
            <param name="url">url</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.IHelpViewer.ShowHelpIndex(System.String)">
            <summary>
            Shows the help index
            </summary>
            <param name="url">url</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.IHelpViewer.ShowPopup(System.Windows.Forms.Control,System.String,System.Drawing.Point)">
            <summary>
            Shows a help popup window
            </summary>
            <param name="parent">the parent control for the popup window</param>
            <param name="text">help text</param>
            <param name="location">display location</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.IndexSelectedEventHandler">
            <summary>
            Eventhandler for handling helpIndex events
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.IndexEventArgs">
            <summary>
            The class <c>IndexEventArgs</c> implements event arguments for index selected event
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.IndexEventArgs.#ctor(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            Constructor of the event args
            </summary>
            <param name="title">the title of the topic</param>
            <param name="url">url selected by the user</param>
            <param name="isSeeAlso">true if the indexitem is a see also link</param>
            <param name="seeAlso">array of see also key words</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.IndexEventArgs.Title">
            <summary>
            Gets the title of the selected topic
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.IndexEventArgs.URL">
            <summary>
            Gets the topic-url selected by the user
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.IndexEventArgs.IsSeeAlso">
            <summary>
            Gets the flag if the index item is a see also link
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.IndexEventArgs.SeeAlso">
            <summary>
            Gets the see also key words
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.InfoTypeCategoryFilter">
            <summary>
            The class <c>InfoTypeCategoryFilter</c> implements properties/methods for defining a filter 
            for toc and index. Content will be filtered using information types and categories.
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.InfoTypeCategoryFilter.FilterEnabled">
            <summary>
            Gets a flag if the filter is enabled.
            </summary>
            <remarks>False means that no filtering will be done (all contents will be displayed)</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.InfoTypeCategoryFilter.AddInformationType(Netron.Neon.HtmlHelp.InformationType)">
            <summary>
            Adds a new information type to the filter
            </summary>
            <param name="infoType">information type to add</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.InfoTypeCategoryFilter.AddCategory(Netron.Neon.HtmlHelp.Category)">
            <summary>
            Adds a new category to the filter
            </summary>
            <param name="cat">category to add</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.InfoTypeCategoryFilter.ResetFilter">
            <summary>
            Resets the filter
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.InfoTypeCategoryFilter.ContainsInformationType(Netron.Neon.HtmlHelp.InformationType)">
            <summary>
            Checks if a special information type is part of the filter
            </summary>
            <param name="type">information type to check</param>
            <returns>Returns true if the specified type is part of this filter</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.InfoTypeCategoryFilter.ContainsCategory(Netron.Neon.HtmlHelp.Category)">
            <summary>
            Checks if a special category is part of the filter
            </summary>
            <param name="cat">category to check</param>
            <returns>Returns true if the specified category is part of the filter</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.InfoTypeCategoryFilter.Match(System.String)">
            <summary>
            Checks if a type string matches the filter. 
            Type strings are of the following format: &lt;category name&gt;::&lt;information type name&gt; 
            (category name is optional)
            </summary>
            <param name="type">type string to check</param>
            <returns>True if the type string matches the filter</returns>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper">
            <summary>
            The class <c>ResourceHelper</c> implements methods for easy resource loading/using
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper._defaultNamespace">
            <summary>
            Internal member storing the default resource namespace
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper._resAssembly">
            <summary>
            Internal member storing the resource assembly
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.m_resourceManager">
            <summary>
            Internal resource manager
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper._defaultBitmapNamespace">
            <summary>
            Internal member storing the bitmap/icon/images default namepsace
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper._defaultStringNamespace">
            <summary>
            Internal member storing the default namespace for string resources
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.#ctor">
            <summary>
            Constructs a new resource helper class.
            </summary>
            <remarks>Uses "<c>Flextronics.eLounge2.Application</c>" as default namespace and the current module's assembly 
            as default resource assembly.</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.#ctor(System.Reflection.Assembly)">
            <summary>
            Constructs a new resource helper class.
            </summary>
            <param name="resAssembly">resource assembly</param>
            <remarks>Uses "<c>Flextronics.eLounge2.Application</c>" as default namespace.</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.#ctor(System.String)">
            <summary>
            Constructs a new resource helper class.
            </summary>
            <param name="defaultNamespace">default namespace for loading resources</param>
            <remarks>Uses the current module's assembly as default resource assembly.</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.#ctor(System.String,System.Reflection.Assembly)">
            <summary>
            Constructs a new resource helper class.
            </summary>
            <param name="defaultNamespace">default namespace for loading resources</param>
            <param name="resAssembly">resource assembly</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.DefaultNamespace">
            <summary>
            Gets the default resource namespace
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.ResourceAssembly">
            <summary>
            Gets the default resource assembly
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.ResourceAssemblyName">
            <summary>
            Gets the name of the default resource assembly
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.DefaultBitmapNamespace">
            <summary>
            Gets/sets the default namespace for loading bitmaps/icons/images etc.
            </summary>
            <remarks>This namespace will be combined with the <see cref="P:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.DefaultNamespace">DefaultNamespace</see> property.</remarks>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.DefaultStringNamespace">
            <summary>
            Gets/sets the default namespace for loading string resources.
            </summary>
            <remarks>This namespace will be combined with the <see cref="P:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.DefaultNamespace">DefaultNamespace</see> property.</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.LoadBitmap(System.String)">
            <summary>
            Loads a bitmap from the combined resources and returns an <see cref="T:System.Drawing.Bitmap">Bitmap</see> instance to the caller.
            </summary>
            <param name="name">name of the bitmap file/resource</param>
            <returns>Returns an <see cref="T:System.Drawing.Bitmap">Bitmap</see> instance to the caller.</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.LoadBitmap(System.String,System.String)">
            <summary>
            Loads an icon from the combined resources and returns an <see cref="T:System.Drawing.Bitmap">Bitmap</see> instance to the caller.
            </summary>
            <param name="bmpNamespace">bitmap namespace used for loading the resource</param>
            <param name="name">name of the bitmap file/resource</param>
            <returns>Returns an <see cref="T:System.Drawing.Bitmap">Bitmap</see> instance to the caller.</returns>
            <remarks>The bitmap namespace will be combined with the <see cref="P:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.DefaultNamespace">DefaultNamespace</see> property.</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.LoadIcon(System.String)">
            <summary>
            Loads a bitmap from the combined resources and returns an <see cref="T:System.Drawing.Icon">Icon</see> instance to the caller.
            </summary>
            <param name="name">name of the icon file/resource</param>
            <returns>Returns an <see cref="T:System.Drawing.Bitmap">Bitmap</see> instance to the caller.</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.LoadIcon(System.String,System.String)">
            <summary>
            Loads an icon from the combined resources and returns an <see cref="T:System.Drawing.Icon">Icon</see> instance to the caller.
            </summary>
            <param name="bmpNamespace">bitmap namespace used for loading the resource</param>
            <param name="name">name of the icon file/resource</param>
            <returns>Returns an <see cref="T:System.Drawing.Icon">Icon</see> instance to the caller.</returns>
            <remarks>The bitmap namespace will be combined with the <see cref="P:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.DefaultNamespace">DefaultNamespace</see> property.</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.GetString(System.String)">
            <summary>
            Loads a resource string from.
            </summary>
            <param name="name">name of the string resource</param>
            <returns>Returns a string value for the given resource name</returns>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.GetString(System.String,System.String)">
            <summary>
            Loads a resource string from.
            </summary>
            <param name="strNamespace">namespace for loading string resources</param>
            <param name="name">name of the string resource</param>
            <returns>Returns a string value for the given resource name</returns>
            <remarks>The string namespace will be combined with the <see cref="P:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.DefaultNamespace">DefaultNamespace</see> property.</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.ResourceHelper.CombineResource(System.String,System.String)">
            <summary>
            Combines two namespacestrings into one.
            </summary>
            <param name="namePrefix">namespace prefix</param>
            <param name="resourceName">resource name or sub namespace</param>
            <returns>A combine resource name or resource namespace name</returns>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.FTSearchEventHandler">
            <summary>
            Eventhandler for handling full-text search events
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.SearchEventArgs">
            <summary>
            The class <c>SearchEventArgs</c> implements the event arguments for the FTSearch event.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.SearchEventArgs.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor of the class
            </summary>
            <param name="words">words to search</param>
            <param name="partial">search partial words</param>
            <param name="titlesOnly">search titles only</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.SearchEventArgs.Words">
            <summary>
            Gets the words to search
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.SearchEventArgs.PartialWords">
            <summary>
            Gets the flag if partial words should also be searched
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.SearchEventArgs.TitlesOnly">
            <summary>
            Gets the flag if only search in titles
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.TocSelectedEventHandler">
            <summary>
            Eventhandler for handling toc-tree events
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.TocEventArgs">
            <summary>
            The class <c>TocEventArgs</c> implements event arguments for toc selected event
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TocEventArgs.#ctor(Netron.Neon.HtmlHelp.TOCItem)">
            <summary>
            Standard constructor
            </summary>
            <param name="item">toc item associated with the event</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.TocEventArgs.Item">
            <summary>
            Gets the associated item
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.TocTree">
            <summary>
            The class <c>TocTree</c> implements a user control which displays the HtmlHelp table of contents pane to the user.
            </summary>
        </member>
        <member name="E:Netron.Neon.HtmlHelp.UIComponents.TocTree.TocSelected">
            <summary>
            Event if the user changes the selection in the toc tree
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TocTree.#ctor">
            <summary>
            Constructor of the class
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TocTree.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TocTree.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TocTree.OnTocSelected(Netron.Neon.HtmlHelp.UIComponents.TocEventArgs)">
            <summary>
            Fireing the on selected event
            </summary>
            <param name="e">event parameters</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TocTree.ReloadImageList">
            <summary>
            Reloads the imagelist using the HtmlHelpSystem.UseHH2TreePics preference
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TocTree.ClearContents">
            <summary>
            Clears the items displayed in the toc pane
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TocTree.BuildTOC(Netron.Neon.HtmlHelp.TableOfContents)">
            <summary>
            Call this method to build the table of contents (TOC) tree.
            </summary>
            <param name="tocItems">TOC instance (tree) extracted from the chm file</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TocTree.BuildTOC(Netron.Neon.HtmlHelp.TableOfContents,Netron.Neon.HtmlHelp.UIComponents.InfoTypeCategoryFilter)">
            <summary>
            Call this method to build the table of contents (TOC) tree.
            </summary>
            <param name="tocItems">TOC instance (tree) extracted from the chm file</param>
            <param name="filter">information type/category filter</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TocTree.Synchronize(System.String)">
            <summary>
            Snychronizes the table of content tree with the currently displayed browser url.
            </summary>
            <param name="URL">url to search</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TocTree.tocTreeView_AfterExpand(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Called if the user has expanded a tree item
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameter</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TocTree.tocTreeView_AfterCollapse(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Called if the user has collapsed a tree item
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameter</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TocTree.tocTreeView_AfterSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Called if the user selects a tree item. 
            This method will fire the <c>TocSelected</c> event notifying the parent window, that the user whants 
            to view a new help topic.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameter</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TocTree.SelectTOCItem(System.Windows.Forms.TreeNodeCollection,System.String,System.String)">
            <summary>
            Selects a node identified by its chm file and local
            </summary>
            <param name="col">treenode collection to search</param>
            <param name="chmFile">chm filename</param>
            <param name="local">local of the toc item</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TocTree.BuildTOC(System.Collections.ArrayList,System.Windows.Forms.TreeNodeCollection,Netron.Neon.HtmlHelp.UIComponents.InfoTypeCategoryFilter)">
            <summary>
            Recursively builds the toc tree and fills the treeview
            </summary>
            <param name="tocItems">list of toc-items</param>
            <param name="col">treenode collection of the current level</param>
            <param name="filter">information type/category filter</param>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.TopicsFound">
            <summary>
            The class <c>TopcisFound</c> implements a form which displays a list of found topics.
            </summary>
        </member>
        <member name="F:Netron.Neon.HtmlHelp.UIComponents.TopicsFound.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TopicsFound.#ctor">
            <summary>
            Constructor of the class
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TopicsFound.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TopicsFound.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TopicsFound.TopicsFound_Load(System.Object,System.EventArgs)">
            <summary>
            Called if the form is loaded
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameter</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TopicsFound.lvTopics_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Called if the user double clicks on a topic item in the listview
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameter</param>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TopicsFound.btnDisplay_Click(System.Object,System.EventArgs)">
            <summary>
            Called if the user clicks the <c>Display</c> button
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameter</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.TopicsFound.Items">
            <summary>
            Gets/Sets the items for displaying the topics
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.TopicsFound.SelectedUrl">
            <summary>
            Gets the selected URL
            </summary>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.TopicsFound.SelectedTitle">
            <summary>
            Gets the selected URL
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.TopicsFoundEventHandler">
            <summary>
            Eventhandler for handling the topics found event.
            </summary>
        </member>
        <member name="T:Netron.Neon.HtmlHelp.UIComponents.TopicsFoundEventArgs">
            <summary>
            The class <c>TopicsFoundEventArgs</c> implements event arguments for the TopicsFound event of the index 
            user controll. 
            </summary>
            <remarks>If you don't add an event handler for this event, the user control will show its own dialog 
            with the found topics.</remarks>
        </member>
        <member name="M:Netron.Neon.HtmlHelp.UIComponents.TopicsFoundEventArgs.#ctor(System.Collections.ArrayList)">
            <summary>
            Constructor of the class
            </summary>
            <param name="topics">topics found</param>
        </member>
        <member name="P:Netron.Neon.HtmlHelp.UIComponents.TopicsFoundEventArgs.Topics">
            <summary>
            Gets an arraylist containing all found topics.
            </summary>
            <remarks>Each item is of type IndexTopic.</remarks>
        </member>
        <member name="T:Netron.Neon.TextEditor.Actions.FormatBuffer">
            <summary>
            This is a sample editaction plugin, it indents the selected area.
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Actions.IEditAction">
            <summary>
            To define a new key for the textarea, you must write a class which
            implements this interface.
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Actions.IEditAction.Keys">
            <value>
            An array of keys on which this edit action occurs.
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Actions.IEditAction.Execute(Netron.Neon.TextEditor.TextArea)">
            <remarks>
            When the key which is defined per XML is pressed, this method will be launched.
            </remarks>
        </member>
        <member name="T:Netron.Neon.TextEditor.Actions.AbstractEditAction">
            <summary>
            To define a new key for the textarea, you must write a class which
            implements this interface.
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Actions.AbstractEditAction.Keys">
            <value>
            An array of keys on which this edit action occurs.
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Actions.AbstractEditAction.Execute(Netron.Neon.TextEditor.TextArea)">
            <remarks>
            When the key which is defined per XML is pressed, this method will be launched.
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Actions.Tab.Execute(Netron.Neon.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Actions.ShiftTab.Execute(Netron.Neon.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Actions.ToggleComment.Execute(Netron.Neon.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Actions.IndentSelection.Execute(Netron.Neon.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Actions.Backspace.Execute(Netron.Neon.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Actions.Delete.Execute(Netron.Neon.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Actions.MovePageDown.Execute(Netron.Neon.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Actions.MovePageUp.Execute(Netron.Neon.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Actions.Return.Execute(Netron.Neon.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Actions.ToggleEditMode.Execute(Netron.Neon.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Actions.Undo.Execute(Netron.Neon.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Actions.Redo.Execute(Netron.Neon.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="T:Netron.Neon.TextEditor.Actions.WordBackspace">
            <summary>
            handles the ctrl-backspace key
            functionality attempts to roughly mimic MS Developer studio
            I will implement this as deleting back to the point that ctrl-leftarrow would
            take you to
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Actions.WordBackspace.Execute(Netron.Neon.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="T:Netron.Neon.TextEditor.Actions.DeleteWord">
            <summary>
            handles the ctrl-delete key
            functionality attempts to mimic MS Developer studio
            I will implement this as deleting forwardto the point that 
            ctrl-leftarrow would take you to
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Actions.DeleteWord.Execute(Netron.Neon.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.AbstractSegment">
            <summary>
            This interface is used to describe a span inside a text sequence
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.BookmarkManager">
            <summary>
            This class handles the bookmarks for a buffer
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.BookmarkManager.Marks">
            <value>
            Contains all bookmarks as int values
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.BookmarkManager.#ctor(Netron.Neon.TextEditor.Document.ILineManager)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Document.BookmarkManager"/>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.BookmarkManager.ToggleMarkAt(System.Int32)">
            <remarks>
            Sets the mark at the line <code>lineNr</code> if it is not set, if the
            line is already marked the mark is cleared.
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.BookmarkManager.IsMarked(System.Int32)">
            <returns>
            true, if a mark at mark exists, otherwise false
            </returns>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.BookmarkManager.MoveIndices(System.Object,Netron.Neon.TextEditor.Document.LineManagerEventArgs)">
            <summary>
            This method moves all indices from index upward count lines
            (useful for deletion/insertion of text)
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.BookmarkManager.Clear">
            <remarks>
            Clears all bookmark
            </remarks>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.BookmarkManager.FirstMark">
            <value>
            The lowest mark, if no marks exists it returns -1
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.BookmarkManager.LastMark">
            <value>
            The highest mark, if no marks exists it returns -1
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.BookmarkManager.GetNextMark(System.Int32)">
            <remarks>
            returns first mark higher than <code>lineNr</code>
            </remarks>
            <returns>
            returns the next mark > cur, if it not exists it returns FirstMark()
            </returns>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.BookmarkManager.GetPrevMark(System.Int32)">
            <remarks>
            returns first mark lower than <code>lineNr</code>
            </remarks>
            <returns>
            returns the next mark lower than cur, if it not exists it returns LastMark()
            </returns>
        </member>
        <member name="E:Netron.Neon.TextEditor.Document.BookmarkManager.BeforeChanged">
            <remarks>
            Is fired before the bookmarks change
            </remarks>
        </member>
        <member name="E:Netron.Neon.TextEditor.Document.BookmarkManager.Changed">
            <remarks>
            Is fired after the bookmarks change
            </remarks>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.BookmarkManagerMemento">
            <summary>
            This class is used for storing the state of a bookmark manager 
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.BookmarkManagerMemento.Bookmarks">
            <value>
            Contains all bookmarks as int values
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.BookmarkManagerMemento.CheckMemento(Netron.Neon.TextEditor.Document.IDocument)">
            <summary>
            Validates all bookmarks if they're in range of the document.
            (removing all bookmarks &lt; 0 and bookmarks &gt; max. line number
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.BookmarkManagerMemento.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Document.BookmarkManagerMemento"/>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.BookmarkManagerMemento.#ctor(System.Xml.XmlElement)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Document.BookmarkManagerMemento"/>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.BookmarkManagerMemento.#ctor(System.Collections.ArrayList)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Document.BookmarkManagerMemento"/>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.BookmarkManagerMemento.FromXmlElement(System.Xml.XmlElement)">
            <summary>
            Converts a xml element to a <see cref="T:Netron.Neon.TextEditor.Document.BookmarkManagerMemento"/> object
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.BookmarkManagerMemento.ToXmlElement(System.Xml.XmlDocument)">
            <summary>
            Converts this <see cref="T:Netron.Neon.TextEditor.Document.BookmarkManagerMemento"/> to a xml element
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.IBookMarkManager">
            <summary>
            This class handles the bookmarks for a buffer
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.IBookMarkManager.Marks">
            <value>
            Contains all bookmarks as int values
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.IBookMarkManager.FirstMark">
            <value>
            The lowest mark, if no marks exists it returns -1
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.IBookMarkManager.LastMark">
            <value>
            The highest mark, if no marks exists it returns -1
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IBookMarkManager.ToggleMarkAt(System.Int32)">
            <remarks>
            Sets the mark at the line <code>lineNr</code> if it is not set, if the
            line is already marked the mark is cleared.
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IBookMarkManager.IsMarked(System.Int32)">
            <remarks>
            Returns true if the line <code>lineNr</code> is marked
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IBookMarkManager.Clear">
            <remarks>
            Clears all bookmarks
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IBookMarkManager.GetNextMark(System.Int32)">
            <remarks>
            returns first mark higher than <code>lineNr</code>
            </remarks>
            <returns>
            returns the next mark > cur, if it not exists it returns FirstMark()
            </returns>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IBookMarkManager.GetPrevMark(System.Int32)">
            <remarks>
            returns first mark lower than <code>lineNr</code>
            </remarks>
            <returns>
            returns the next mark lower than cur, if it not exists it returns LastMark()
            </returns>
        </member>
        <member name="E:Netron.Neon.TextEditor.Document.IBookMarkManager.BeforeChanged">
            <remarks>
            Is fired before the bookmarks change
            </remarks>
        </member>
        <member name="E:Netron.Neon.TextEditor.Document.IBookMarkManager.Changed">
            <remarks>
            Is fired after the bookmarks change
            </remarks>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.LineViewerStyle">
            <summary>
            Describes the caret marker
            </summary>
        </member>
        <member name="F:Netron.Neon.TextEditor.Document.LineViewerStyle.None">
            <summary>
            No line viewer will be displayed
            </summary>
        </member>
        <member name="F:Netron.Neon.TextEditor.Document.LineViewerStyle.FullRow">
            <summary>
            The row in which the caret is will be marked
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.IndentStyle">
            <summary>
            Describes the indent style
            </summary>
        </member>
        <member name="F:Netron.Neon.TextEditor.Document.IndentStyle.None">
            <summary>
            No indentation occurs
            </summary>
        </member>
        <member name="F:Netron.Neon.TextEditor.Document.IndentStyle.Auto">
            <summary>
            The indentation from the line above will be
            taken to indent the curent line
            </summary>
        </member>
        <member name="F:Netron.Neon.TextEditor.Document.IndentStyle.Smart">
            <summary>
            Inteligent, context sensitive indentation will occur
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.BracketHighlightingStyle">
            <summary>
            Describes the bracket highlighting style
            </summary>
        </member>
        <member name="F:Netron.Neon.TextEditor.Document.BracketHighlightingStyle.None">
            <summary>
            Brackets won't be highlighted
            </summary>
        </member>
        <member name="F:Netron.Neon.TextEditor.Document.BracketHighlightingStyle.OnBracket">
            <summary>
            Brackets will be highlighted if the caret is on the bracket
            </summary>
        </member>
        <member name="F:Netron.Neon.TextEditor.Document.BracketHighlightingStyle.AfterBracket">
            <summary>
            Brackets will be highlighted if the caret is after the bracket
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.DocumentSelectionMode">
            <summary>
            Describes the selection mode of the text area
            </summary>
        </member>
        <member name="F:Netron.Neon.TextEditor.Document.DocumentSelectionMode.Normal">
            <summary>
            The 'normal' selection mode.
            </summary>
        </member>
        <member name="F:Netron.Neon.TextEditor.Document.DocumentSelectionMode.Additive">
            <summary>
            Selections will be added to the current selection or new
            ones will be created (multi-select mode)
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.DefaultDocument">
            <summary>
            The default <see cref="T:Netron.Neon.TextEditor.Document.IDocument"/> implementation.
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.DocumentEventHandler">
            <summary>
            This delegate is used for document events.
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.DocumentEventArgs">
            <summary>
            This class contains more information on a document event
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.DocumentEventArgs.Document">
            <returns>
            always a valid Document which is related to the Event.
            </returns>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.DocumentEventArgs.Offset">
            <returns>
            -1 if no offset was specified for this event
            </returns>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.DocumentEventArgs.Text">
            <returns>
            null if no text was specified for this event
            </returns>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.DocumentEventArgs.Length">
            <returns>
            -1 if no length was specified for this event
            </returns>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.DocumentEventArgs.#ctor(Netron.Neon.TextEditor.Document.IDocument)">
            <summary>
            Creates a new instance off <see cref="T:Netron.Neon.TextEditor.Document.DocumentEventArgs"/>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.DocumentEventArgs.#ctor(Netron.Neon.TextEditor.Document.IDocument,System.Int32)">
            <summary>
            Creates a new instance off <see cref="T:Netron.Neon.TextEditor.Document.DocumentEventArgs"/>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.DocumentEventArgs.#ctor(Netron.Neon.TextEditor.Document.IDocument,System.Int32,System.Int32)">
            <summary>
            Creates a new instance off <see cref="T:Netron.Neon.TextEditor.Document.DocumentEventArgs"/>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.DocumentEventArgs.#ctor(Netron.Neon.TextEditor.Document.IDocument,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new instance off <see cref="T:Netron.Neon.TextEditor.Document.DocumentEventArgs"/>
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.DocumentFactory">
            <summary>
            This interface represents a container which holds a text sequence and
            all necessary information about it. It is used as the base for a text editor.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.DocumentFactory.CreateDocument">
            <remarks>
            Creates a new <see cref="T:Netron.Neon.TextEditor.Document.IDocument"/> object. Only create
            <see cref="T:Netron.Neon.TextEditor.Document.IDocument"/> with this method.
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.DocumentFactory.CreateFromFile(System.String)">
            <summary>
            Creates a new document and loads the given file
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.IFoldingStrategy">
            <summary>
            This interface is used for the folding capabilities
            of the textarea.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IFoldingStrategy.GenerateFoldMarkers(Netron.Neon.TextEditor.Document.IDocument,System.String,System.Object)">
            <remarks>
            Calculates the fold level of a specific line.
            </remarks>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.ParserFoldingStrategy">
            <summary>
            A simple folding strategy which calculates the folding level
            using the indent level of the line.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ParserFoldingStrategy.GenerateFoldMarkers(Netron.Neon.TextEditor.Document.IDocument,System.String,System.Object)">
            <remarks>
            Calculates the fold level of a specific line.
            </remarks>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.DefaultFormattingStrategy">
            <summary>
            This class handles the auto and smart indenting in the textbuffer while
            you type.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.DefaultFormattingStrategy.#ctor">
            <summary>
            Creates a new instance off <see cref="T:Netron.Neon.TextEditor.Document.DefaultFormattingStrategy"/>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.DefaultFormattingStrategy.GetIndentation(Netron.Neon.TextEditor.TextArea,System.Int32)">
            <summary>
            returns the whitespaces which are before a non white space character in the line line
            as a string.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.DefaultFormattingStrategy.AutoIndentLine(Netron.Neon.TextEditor.TextArea,System.Int32)">
            <summary>
            Could be overwritten to define more complex indenting.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.DefaultFormattingStrategy.SmartIndentLine(Netron.Neon.TextEditor.TextArea,System.Int32)">
            <summary>
            Could be overwritten to define more complex indenting.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.DefaultFormattingStrategy.FormatLine(Netron.Neon.TextEditor.TextArea,System.Int32,System.Int32,System.Char)">
            <summary>
            This function formats a specific line after <code>ch</code> is pressed.
            </summary>
            <returns>
            the caret delta position the caret will be moved this number
            of bytes (e.g. the number of bytes inserted before the caret, or
            removed, if this number is negative)
            </returns>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.DefaultFormattingStrategy.IndentLine(Netron.Neon.TextEditor.TextArea,System.Int32)">
            <summary>
            This function sets the indentation level in a specific line
            </summary>
            <returns>
            the number of inserted characters.
            </returns>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.DefaultFormattingStrategy.IndentLines(Netron.Neon.TextEditor.TextArea,System.Int32,System.Int32)">
            <summary>
            This function sets the indentlevel in a range of lines.
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.IFormattingStrategy">
            <summary>
            This interface handles the auto and smart indenting and formating
            in the document while  you type. Language bindings could overwrite this 
            interface and define their own indentation/formating.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IFormattingStrategy.FormatLine(Netron.Neon.TextEditor.TextArea,System.Int32,System.Int32,System.Char)">
            <summary>
            This function formats a specific line after <code>ch</code> is pressed.
            </summary>
            <returns>
            the caret delta position the caret will be moved this number
            of bytes (e.g. the number of bytes inserted before the caret, or
            removed, if this number is negative)
            </returns>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IFormattingStrategy.IndentLine(Netron.Neon.TextEditor.TextArea,System.Int32)">
            <summary>
            This function sets the indentation level in a specific line
            </summary>
            <returns>
            the number of inserted characters.
            </returns>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IFormattingStrategy.IndentLines(Netron.Neon.TextEditor.TextArea,System.Int32,System.Int32)">
            <summary>
            This function sets the indentlevel in a range of lines.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IFormattingStrategy.SearchBracketBackward(Netron.Neon.TextEditor.Document.IDocument,System.Int32,System.Char,System.Char)">
            <summary>
            Finds the offset of the opening bracket in the block defined by offset skipping
            brackets in strings and comments.
            </summary>
            <param name="document">The document to search in.</param>
            <param name="offset">The offset of an position in the block or the offset of the closing bracket.</param>
            <param name="openBracket">The character for the opening bracket.</param>
            <param name="closingBracket">The character for the closing bracket.</param>
            <returns>Returns the offset of the opening bracket or -1 if no matching bracket was found.</returns>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IFormattingStrategy.SearchBracketForward(Netron.Neon.TextEditor.Document.IDocument,System.Int32,System.Char,System.Char)">
            <summary>
            Finds the offset of the closing bracket in the block defined by offset skipping
            brackets in strings and comments.
            </summary>
            <param name="document">The document to search in.</param>
            <param name="offset">The offset of an position in the block or the offset of the opening bracket.</param>
            <param name="openBracket">The character for the opening bracket.</param>
            <param name="closingBracket">The character for the closing bracket.</param>
            <returns>Returns the offset of the closing bracket or -1 if no matching bracket was found.</returns>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.DefaultHighlightingStrategy.PushCurWord(Netron.Neon.TextEditor.Document.IDocument,Netron.Neon.TextEditor.Document.HighlightColor@,System.Collections.ArrayList)">
            <summary>
            pushes the curWord string on the word list, with the
            correct color.
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.FontContainer">
            <summary>
            This class is used to generate bold, italic and bold/italic fonts out
            of a base font.
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.FontContainer.BoldFont">
            <value>
            The bold version of the base font
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.FontContainer.ItalicFont">
            <value>
            The italic version of the base font
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.FontContainer.BoldItalicFont">
            <value>
            The bold/italic version of the base font
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.FontContainer.DefaultFont">
            <value>
            The base font
            </value>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.HighlightBackground">
            <summary>
            Extens the highlighting color with a background image.
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.HighlightBackground.BackgroundImage">
            <value>
            The image used as background
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.HighlightBackground.#ctor(System.Xml.XmlElement)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Document.HighlightBackground"/>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.HighlightBackground.#ctor(System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Document.HighlightBackground"/>
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.HighlightColor">
            <summary>
            A color used for highlighting 
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.HighlightColor.Bold">
            <value>
            If true the font will be displayed bold style
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.HighlightColor.Italic">
            <value>
            If true the font will be displayed italic style
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.HighlightColor.BackgroundColor">
            <value>
            The background color used
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.HighlightColor.Color">
            <value>
            The foreground color used
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.HighlightColor.Font">
            <value>
            The font used
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.HighlightColor.#ctor(System.Xml.XmlElement)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Document.HighlightColor"/>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.HighlightColor.#ctor(System.Xml.XmlElement,Netron.Neon.TextEditor.Document.HighlightColor)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Document.HighlightColor"/>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.HighlightColor.#ctor(System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Document.HighlightColor"/>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.HighlightColor.#ctor(System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Document.HighlightColor"/>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.HighlightColor.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Document.HighlightColor"/>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.HighlightColor.ToString">
            <summary>
            Converts a <see cref="T:Netron.Neon.TextEditor.Document.HighlightColor"/> instance to string (for debug purposes)
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.IHighlightingStrategy">
            <summary>
            A highlighting strategy for a buffer.
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.IHighlightingStrategy.Name">
            <value>
            The name of the highlighting strategy, must be unique
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.IHighlightingStrategy.Extensions">
            <value>
            The file extenstions on which this highlighting strategy gets
            used
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IHighlightingStrategy.GetColorFor(System.String)">
            <remarks>
            Used internally, do not call
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IHighlightingStrategy.GetRuleSet(Netron.Neon.TextEditor.Document.Span)">
            <remarks>
            Used internally, do not call
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IHighlightingStrategy.GetColor(Netron.Neon.TextEditor.Document.IDocument,Netron.Neon.TextEditor.Document.LineSegment,System.Int32,System.Int32)">
            <remarks>
            Used internally, do not call
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IHighlightingStrategy.MarkTokens(Netron.Neon.TextEditor.Document.IDocument,System.Collections.ArrayList)">
            <remarks>
            Used internally, do not call
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IHighlightingStrategy.MarkTokens(Netron.Neon.TextEditor.Document.IDocument)">
            <remarks>
            Used internally, do not call
            </remarks>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.NextMarker">
            <summary>
            Used for mark next token
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.NextMarker.What">
            <value>
            String value to indicate to mark next token
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.NextMarker.Color">
            <value>
            Color for marking next token
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.NextMarker.MarkMarker">
            <value>
            If true the indication text will be marked with the same color
            too
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.NextMarker.#ctor(System.Xml.XmlElement)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Document.NextMarker"/>
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.PrevMarker">
            <summary>
            Used for mark previous token
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.PrevMarker.What">
            <value>
            String value to indicate to mark previous token
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.PrevMarker.Color">
            <value>
            Color for marking previous token
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.PrevMarker.MarkMarker">
            <value>
            If true the indication text will be marked with the same color
            too
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.PrevMarker.#ctor(System.Xml.XmlElement)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Document.PrevMarker"/>
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.TextWord">
            <summary>
            This class represents single words with color information, two special versions of a word are 
            spaces and tabs.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.TextWord.ToString">
            <summary>
            Converts a <see cref="T:Netron.Neon.TextEditor.Document.TextWord"/> instance to string (for debug purposes)
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.IDocument">
            <summary>
            This interface represents a container which holds a text sequence and
            all necessary information about it. It is used as the base for a text editor.
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.IDocument.ReadOnly">
            <value>
            If true the document can't be altered
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.IDocument.FormattingStrategy">
            <summary>
            The <see cref="T:Netron.Neon.TextEditor.Document.IFormattingStrategy"/> attached to the <see cref="T:Netron.Neon.TextEditor.Document.IDocument"/> instance
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.IDocument.TextBufferStrategy">
            <summary>
            The <see cref="T:Netron.Neon.TextEditor.Document.ITextBufferStrategy"/> attached to the <see cref="T:Netron.Neon.TextEditor.Document.IDocument"/> instance
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.IDocument.FoldingManager">
            <summary>
            The <see cref="P:Netron.Neon.TextEditor.Document.IDocument.FoldingManager"/> attached to the <see cref="T:Netron.Neon.TextEditor.Document.IDocument"/> instance
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.IDocument.HighlightingStrategy">
            <summary>
            The <see cref="T:Netron.Neon.TextEditor.Document.IHighlightingStrategy"/> attached to the <see cref="T:Netron.Neon.TextEditor.Document.IDocument"/> instance
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.IDocument.BookmarkManager">
            <summary>
            The <see cref="T:Netron.Neon.TextEditor.Document.IBookMarkManager"/> attached to the <see cref="T:Netron.Neon.TextEditor.Document.IDocument"/> instance
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.IDocument.LineSegmentCollection">
            <value>
            A collection of all line segments
            </value>
            <remarks>
            The collection should only be used if you're aware
            of the 'last line ends with a delimiter problem'. Otherwise
            the <see cref="M:Netron.Neon.TextEditor.Document.IDocument.GetLineSegment(System.Int32)"/> method should be used.
            </remarks>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.IDocument.TotalNumberOfLines">
            <value>
            The total number of lines, this may be != ArrayList.Count 
            if the last line ends with a delimiter.
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.GetLineNumberForOffset(System.Int32)">
            <remarks>
            Returns a valid line number for the given offset.
            </remarks>
            <param name="offset">
            A offset which points to a character in the line which
            line number is returned.
            </param>
            <returns>
            An int which value is the line number.
            </returns>
            <exception cref="T:System.ArgumentException">If offset points not to a valid position</exception>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.GetLineSegmentForOffset(System.Int32)">
            <remarks>
            Returns a <see cref="T:Netron.Neon.TextEditor.Document.LineSegment"/> for the given offset.
            </remarks>
            <param name="offset">
            A offset which points to a character in the line which
            is returned.
            </param>
            <returns>
            A <see cref="T:Netron.Neon.TextEditor.Document.LineSegment"/> object.
            </returns>
            <exception cref="T:System.ArgumentException">If offset points not to a valid position</exception>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.GetLineSegment(System.Int32)">
            <remarks>
            Returns a <see cref="T:Netron.Neon.TextEditor.Document.LineSegment"/> for the given line number.
            This function should be used to get a line instead of getting the
            line using the <see cref="T:System.Collections.ArrayList"/>.
            </remarks>
            <param name="lineNumber">
            The line number which is requested.
            </param>
            <returns>
            A <see cref="T:Netron.Neon.TextEditor.Document.LineSegment"/> object.
            </returns>
            <exception cref="T:System.ArgumentException">If offset points not to a valid position</exception>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.GetFirstLogicalLine(System.Int32)">
            <remarks>
            Get the first logical line for a given visible line.
            example : lineNumber == 100 foldings are in the linetracker
            between 0..1 (2 folded, invisible lines) this method returns 102
            the 'logical' line number
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.GetLastLogicalLine(System.Int32)">
            <remarks>
            Get the last logical line for a given visible line.
            example : lineNumber == 100 foldings are in the linetracker
            between 0..1 (2 folded, invisible lines) this method returns 102
            the 'logical' line number
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.GetVisibleLine(System.Int32)">
            <remarks>
            Get the visible line for a given logical line.
            example : lineNumber == 100 foldings are in the linetracker
            between 0..1 (2 folded, invisible lines) this method returns 98
            the 'visible' line number
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.GetNextVisibleLineAbove(System.Int32,System.Int32)">
            <remarks>
            Get the next visible line after lineNumber
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.GetNextVisibleLineBelow(System.Int32,System.Int32)">
            <remarks>
            Get the next visible line below lineNumber
            </remarks>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.IDocument.TextContent">
            <value>
            Get the whole text as string
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.IDocument.TextLength">
            <value>
            The current length of the sequence of characters that can be edited.
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.Insert(System.Int32,System.String)">
            <summary>
            Inserts a string of characters into the sequence.
            </summary>
            <param name="offset">
            offset where to insert the string.
            </param>
            <param name="text">
            text to be inserted.
            </param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.Remove(System.Int32,System.Int32)">
            <summary>
            Removes some portion of the sequence.
            </summary>
            <param name="offset">
            offset of the remove.
            </param>
            <param name="length">
            number of characters to remove.
            </param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.Replace(System.Int32,System.Int32,System.String)">
            <summary>
            Replace some portion of the sequence.
            </summary>
            <param name="offset">
            offset.
            </param>
            <param name="length">
            number of characters to replace.
            </param>
            <param name="text">
            text to be replaced with.
            </param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.GetCharAt(System.Int32)">
            <summary>
            Returns a specific char of the sequence.
            </summary>
            <param name="offset">
            Offset of the char to get.
            </param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.GetText(System.Int32,System.Int32)">
            <summary>
            Fetches a string of characters contained in the sequence.
            </summary>
            <param name="offset">
            Offset into the sequence to fetch
            </param>
            <param name="length">
            number of characters to copy.
            </param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.OffsetToPosition(System.Int32)">
            <summary>
            returns the logical line/column position from an offset
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.PositionToOffset(System.Drawing.Point)">
            <summary>
            returns the offset from a logical line/column position
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.IDocument.UpdateQueue">
            <value>
            A container where all TextAreaUpdate objects get stored
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.RequestUpdate(Netron.Neon.TextEditor.TextAreaUpdate)">
            <remarks>
            Requests an update of the textarea
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.CommitUpdate">
            <remarks>
            Commits all updates in the queue to the textarea (the
            textarea will be painted)
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.IDocument.UpdateSegmentListOnDocumentChange(System.Collections.ArrayList,Netron.Neon.TextEditor.Document.DocumentEventArgs)">
            <summary>
            Moves, Resizes, Removes a list of segments on insert/remove/replace events.
            </summary>
        </member>
        <member name="E:Netron.Neon.TextEditor.Document.IDocument.UpdateCommited">
            <summary>
            Is fired when CommitUpdate is called
            </summary>
        </member>
        <member name="E:Netron.Neon.TextEditor.Document.IDocument.DocumentAboutToBeChanged">
            <summary>
            </summary>
        </member>
        <member name="E:Netron.Neon.TextEditor.Document.IDocument.DocumentChanged">
            <summary>
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.ISegment">
            <summary>
            This interface is used to describe a span inside a text sequence
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.ISegment.Offset">
            <value>
            The offset where the span begins
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.ISegment.Length">
            <value>
            The length of the span
            </value>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.ILineManager">
            <summary>
            The line tracker keeps track of all lines in a document.
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.ILineManager.LineSegmentCollection">
            <value>
            A collection of all line segments
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.ILineManager.TotalNumberOfLines">
            <value>
            The total number of lines, this may be != ArrayList.Count 
            if the last line ends with a delimiter.
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.ILineManager.HighlightingStrategy">
            <value>
            The current <see cref="T:Netron.Neon.TextEditor.Document.IHighlightingStrategy"/> attached to this line manager
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ILineManager.GetLineNumberForOffset(System.Int32)">
            <summary>
            Returns a valid line number for the given offset.
            </summary>
            <param name="offset">
            A offset which points to a character in the line which
            line number is returned.
            </param>
            <returns>
            An int which value is the line number.
            </returns>
            <exception cref="T:System.ArgumentException">If offset points not to a valid position</exception>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ILineManager.GetLineSegmentForOffset(System.Int32)">
            <summary>
            Returns a <see cref="T:Netron.Neon.TextEditor.Document.LineSegment"/> for the given offset.
            </summary>
            <param name="offset">
            A offset which points to a character in the line which
            is returned.
            </param>
            <returns>
            A <see cref="T:Netron.Neon.TextEditor.Document.LineSegment"/> object.
            </returns>
            <exception cref="T:System.ArgumentException">If offset points not to a valid position</exception>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ILineManager.GetLineSegment(System.Int32)">
            <summary>
            Returns a <see cref="T:Netron.Neon.TextEditor.Document.LineSegment"/> for the given line number.
            This function should be used to get a line instead of getting the
            line using the <see cref="T:System.Collections.ArrayList"/>.
            </summary>
            <param name="lineNumber">
            The line number which is requested.
            </param>
            <returns>
            A <see cref="T:Netron.Neon.TextEditor.Document.LineSegment"/> object.
            </returns>
            <exception cref="T:System.ArgumentException">If offset points not to a valid position</exception>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ILineManager.Insert(System.Int32,System.String)">
            <summary>
            Used internally, do not call yourself.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ILineManager.Remove(System.Int32,System.Int32)">
            <summary>
            Used internally, do not call yourself.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ILineManager.Replace(System.Int32,System.Int32,System.String)">
            <summary>
            Used internally, do not call yourself.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ILineManager.SetContent(System.String)">
            <summary>
            Sets the content of this line manager = break the text
            into lines.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ILineManager.GetFirstLogicalLine(System.Int32)">
            <summary>
            Get the first logical line for a given visible line.
            example : lineNumber == 100 foldings are in the linetracker
            between 0..1 (2 folded, invisible lines) this method returns 102
            the 'logical' line number
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ILineManager.GetLastLogicalLine(System.Int32)">
            <summary>
            Get the last logical line for a given visible line.
            example : lineNumber == 100 foldings are in the linetracker
            between 0..1 (2 folded, invisible lines) this method returns 102
            the 'logical' line number
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ILineManager.GetVisibleLine(System.Int32)">
            <summary>
            Get the visible line for a given logical line.
            example : lineNumber == 100 foldings are in the linetracker
            between 0..1 (2 folded, invisible lines) this method returns 98
            the 'visible' line number
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ILineManager.GetNextVisibleLineAbove(System.Int32,System.Int32)">
            <summary>
            Get the next visible line after lineNumber
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ILineManager.GetNextVisibleLineBelow(System.Int32,System.Int32)">
            <summary>
            Get the next visible line below lineNumber
            </summary>
        </member>
        <member name="E:Netron.Neon.TextEditor.Document.ILineManager.LineCountChanged">
            <summary>
            Is fired when lines are inserted or removed
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.LineManagerEventArgs.Document">
            <returns>
            always a valid Document which is related to the Event.
            </returns>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.LineManagerEventArgs.LineStart">
            <returns>
            -1 if no offset was specified for this event
            </returns>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.LineManagerEventArgs.LinesMoved">
            <returns>
            -1 if no length was specified for this event
            </returns>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.LineSegment.ToString">
            <summary>
            Converts a <see cref="T:Netron.Neon.TextEditor.Document.LineSegment"/> instance to string (for debug purposes)
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.LineSegment.GetRegString(System.Char[],System.Int32,Netron.Neon.TextEditor.Document.IDocument)">
            <summary>
            get the string, which matches the regular expression expr,
            in string s2 at index
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.LineSegment.MatchExpr(System.Char[],System.Int32,Netron.Neon.TextEditor.Document.IDocument)">
            <summary>
            returns true, if the get the string s2 at index matches the expression expr
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.MarkerStrategy">
            <summary>
            Description of MarkerStrategy.	
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.TextMarker">
            <summary>
            Description of TextMarker.	
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.DefaultSelection">
            <summary>
            Default implementation of the <see cref="T:Netron.Neon.TextEditor.Document.ISelection"/> interface.
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.DefaultSelection.IsEmpty">
            <value>
            Returns true, if the selection is empty
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.DefaultSelection.IsRectangularSelection">
            <value>
            Returns true, if the selection is rectangular
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.DefaultSelection.SelectedText">
            <value>
            The text which is selected by this selection.
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.DefaultSelection.#ctor(Netron.Neon.TextEditor.Document.IDocument,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Document.DefaultSelection"/>
            </summary>	
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.DefaultSelection.ToString">
            <summary>
            Converts a <see cref="T:Netron.Neon.TextEditor.Document.DefaultSelection"/> instance to string (for debug purposes)
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.ISelection">
            <summary>
            An interface representing a portion of the current selection.
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.ISelection.IsRectangularSelection">
            <value>
            Returns true, if the selection is rectangular
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.ISelection.IsEmpty">
            <value>
            Returns true, if the selection is empty
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.ISelection.SelectedText">
            <value>
            The text which is selected by this selection.
            </value>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.SelectionCollection">
            <summary>
                <para>
                  A collection that stores <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/> objects.
               </para>
            </summary>
            <seealso cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionCollection.#ctor">
            <summary>
                <para>
                  Initializes a new instance of <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/>.
               </para>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionCollection.#ctor(Netron.Neon.TextEditor.Document.SelectionCollection)">
            <summary>
                <para>
                  Initializes a new instance of <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/> based on another <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/>.
               </para>
            </summary>
            <param name='value'>
                  A <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/> from which the contents are copied
            </param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionCollection.#ctor(Netron.Neon.TextEditor.Document.ISelection[])">
            <summary>
                <para>
                  Initializes a new instance of <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/> containing any array of <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/> objects.
               </para>
            </summary>
            <param name='value'>
                  A array of <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/> objects with which to intialize the collection
            </param>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.SelectionCollection.Item(System.Int32)">
            <summary>
            <para>Represents the entry at the specified index of the <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/>.</para>
            </summary>
            <param name='index'><para>The zero-based index of the entry to locate in the collection.</para></param>
            <value>
               <para> The entry at the specified index of the collection.</para>
            </value>
            <exception cref='T:System.ArgumentOutOfRangeException'><paramref name='index'/> is outside the valid range of indexes for the collection.</exception>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionCollection.Add(Netron.Neon.TextEditor.Document.ISelection)">
            <summary>
               <para>Adds a <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/> with the specified value to the
               <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/> .</para>
            </summary>
            <param name='value'>The <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/> to add.</param>
            <returns>
               <para>The index at which the new element was inserted.</para>
            </returns>
            <seealso cref='M:Netron.Neon.TextEditor.Document.SelectionCollection.AddRange(Netron.Neon.TextEditor.Document.ISelection[])'/>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionCollection.AddRange(Netron.Neon.TextEditor.Document.ISelection[])">
            <summary>
            <para>Copies the elements of an array to the end of the <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/>.</para>
            </summary>
            <param name='value'>
               An array of type <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/> containing the objects to add to the collection.
            </param>
            <returns>
              <para>None.</para>
            </returns>
            <seealso cref='M:Netron.Neon.TextEditor.Document.SelectionCollection.Add(Netron.Neon.TextEditor.Document.ISelection)'/>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionCollection.AddRange(Netron.Neon.TextEditor.Document.SelectionCollection)">
            <summary>
                <para>
                  Adds the contents of another <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/> to the end of the collection.
               </para>
            </summary>
            <param name='value'>
               A <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/> containing the objects to add to the collection.
            </param>
            <returns>
              <para>None.</para>
            </returns>
            <seealso cref='M:Netron.Neon.TextEditor.Document.SelectionCollection.Add(Netron.Neon.TextEditor.Document.ISelection)'/>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionCollection.Contains(Netron.Neon.TextEditor.Document.ISelection)">
            <summary>
            <para>Gets a value indicating whether the
               <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/> contains the specified <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/>.</para>
            </summary>
            <param name='value'>The <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/> to locate.</param>
            <returns>
            <para><see langword='true'/> if the <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/> is contained in the collection;
              otherwise, <see langword='false'/>.</para>
            </returns>
            <seealso cref='M:Netron.Neon.TextEditor.Document.SelectionCollection.IndexOf(Netron.Neon.TextEditor.Document.ISelection)'/>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionCollection.CopyTo(Netron.Neon.TextEditor.Document.ISelection[],System.Int32)">
            <summary>
            <para>Copies the <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/> values to a one-dimensional <see cref='T:System.Array'/> instance at the
               specified index.</para>
            </summary>
            <param name='array'><para>The one-dimensional <see cref='T:System.Array'/> that is the destination of the values copied from <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/> .</para></param>
            <param name='index'>The index in <paramref name='array'/> where copying begins.</param>
            <returns>
              <para>None.</para>
            </returns>
            <exception cref='T:System.ArgumentException'><para><paramref name='array'/> is multidimensional.</para> <para>-or-</para> <para>The number of elements in the <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/> is greater than the available space between <paramref name='arrayIndex'/> and the end of <paramref name='array'/>.</para></exception>
            <exception cref='T:System.ArgumentNullException'><paramref name='array'/> is <see langword='null'/>. </exception>
            <exception cref='T:System.ArgumentOutOfRangeException'><paramref name='arrayIndex'/> is less than <paramref name='array'/>'s lowbound. </exception>
            <seealso cref='T:System.Array'/>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionCollection.IndexOf(Netron.Neon.TextEditor.Document.ISelection)">
            <summary>
               <para>Returns the index of a <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/> in
                  the <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/> .</para>
            </summary>
            <param name='value'>The <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/> to locate.</param>
            <returns>
            <para>The index of the <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/> of <paramref name='value'/> in the
            <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/>, if found; otherwise, -1.</para>
            </returns>
            <seealso cref='M:Netron.Neon.TextEditor.Document.SelectionCollection.Contains(Netron.Neon.TextEditor.Document.ISelection)'/>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionCollection.Insert(System.Int32,Netron.Neon.TextEditor.Document.ISelection)">
            <summary>
            <para>Inserts a <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/> into the <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/> at the specified index.</para>
            </summary>
            <param name='index'>The zero-based index where <paramref name='value'/> should be inserted.</param>
            <param name=' value'>The <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/> to insert.</param>
            <returns><para>None.</para></returns>
            <seealso cref='M:Netron.Neon.TextEditor.Document.SelectionCollection.Add(Netron.Neon.TextEditor.Document.ISelection)'/>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionCollection.GetEnumerator">
            <summary>
               <para>Returns an enumerator that can iterate through
                  the <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/> .</para>
            </summary>
            <returns><para>None.</para></returns>
            <seealso cref='T:System.Collections.IEnumerator'/>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionCollection.Remove(Netron.Neon.TextEditor.Document.ISelection)">
            <summary>
               <para> Removes a specific <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/> from the
               <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/> .</para>
            </summary>
            <param name='value'>The <see cref='T:Netron.Neon.TextEditor.Document.ISelection'/> to remove from the <see cref='T:Netron.Neon.TextEditor.Document.SelectionCollection'/> .</param>
            <returns><para>None.</para></returns>
            <exception cref='T:System.ArgumentException'><paramref name='value'/> is not found in the Collection. </exception>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.SelectionCollection.ISelectionEnumerator">
            <summary>
            used internally
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionCollection.ISelectionEnumerator.#ctor(Netron.Neon.TextEditor.Document.SelectionCollection)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Document.SelectionCollection.ISelectionEnumerator"/>
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.SelectionCollection.ISelectionEnumerator.Current">
            <remarks>
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionCollection.ISelectionEnumerator.MoveNext">
            <remarks>
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionCollection.ISelectionEnumerator.Reset">
            <remarks>
            </remarks>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.SelectionManager">
            <summary>
            This class manages the selections in a document.
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.SelectionManager.SelectionCollection">
            <value>
            A collection containing all selections.
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.SelectionManager.HasSomethingSelected">
            <value>
            true if the <see cref="P:Netron.Neon.TextEditor.Document.SelectionManager.SelectionCollection"/> is not empty, false otherwise.
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.SelectionManager.SelectedText">
            <value>
            The text that is currently selected.
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionManager.#ctor(Netron.Neon.TextEditor.Document.IDocument)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Document.SelectionManager"/>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionManager.SetSelection(Netron.Neon.TextEditor.Document.ISelection)">
            <remarks>
            Clears the selection and sets a new selection
            using the given <see cref="T:Netron.Neon.TextEditor.Document.ISelection"/> object.
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionManager.ClearSelection">
            <remarks>
            Clears the selection.
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionManager.RemoveSelectedText">
            <remarks>
            Removes the selected text from the buffer and clears
            the selection.
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionManager.IsSelected(System.Int32)">
            <remarks>
            Returns true if the given offset points to a section which is
            selected.
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionManager.GetSelectionAt(System.Int32)">
            <remarks>
            Returns a <see cref="T:Netron.Neon.TextEditor.Document.ISelection"/> object giving the selection in which
            the offset points to.
            </remarks>
            <returns>
            <code>null</code> if the offset doesn't point to a selection
            </returns>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionManager.Insert(System.Int32,System.String)">
            <remarks>
            Used internally, do not call.
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionManager.Remove(System.Int32,System.Int32)">
            <remarks>
            Used internally, do not call.
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.SelectionManager.Replace(System.Int32,System.Int32,System.String)">
            <remarks>
            Used internally, do not call.
            </remarks>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.ITextBufferStrategy">
            <summary>
            Interface to describe a sequence of characters that can be edited. 	
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Document.ITextBufferStrategy.Length">
            <value>
            The current length of the sequence of characters that can be edited.
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ITextBufferStrategy.Insert(System.Int32,System.String)">
            <summary>
            Inserts a string of characters into the sequence.
            </summary>
            <param name="offset">
            offset where to insert the string.
            </param>
            <param name="text">
            text to be inserted.
            </param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ITextBufferStrategy.Remove(System.Int32,System.Int32)">
            <summary>
            Removes some portion of the sequence.
            </summary>
            <param name="offset">
            offset of the remove.
            </param>
            <param name="length">
            number of characters to remove.
            </param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ITextBufferStrategy.Replace(System.Int32,System.Int32,System.String)">
            <summary>
            Replace some portion of the sequence.
            </summary>
            <param name="offset">
            offset.
            </param>
            <param name="length">
            number of characters to replace.
            </param>
            <param name="text">
            text to be replaced with.
            </param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ITextBufferStrategy.GetText(System.Int32,System.Int32)">
            <summary>
            Fetches a string of characters contained in the sequence.
            </summary>
            <param name="offset">
            Offset into the sequence to fetch
            </param>
            <param name="length">
            number of characters to copy.
            </param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ITextBufferStrategy.GetCharAt(System.Int32)">
            <summary>
            Returns a specific char of the sequence.
            </summary>
            <param name="offset">
            Offset of the char to get.
            </param>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.ITextBufferStrategy.SetContent(System.String)">
            <summary>
            This method sets the stored content.
            </summary>
            <param name="text">
            The string that represents the character sequence.
            </param>
        </member>
        <member name="T:Netron.Neon.TextEditor.Document.StringTextBufferStrategy">
            <summary>
            Simple implementation of the ITextBuffer interface implemented using a
            string.
            Only for fall-back purposes.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.TextUtilities.LeadingWhiteSpaceToTabs(System.String,System.Int32)">
            <remarks>
            This function takes a string and converts the whitespace in front of
            it to tabs. If the length of the whitespace at the start of the string
            was not a whole number of tabs then there will still be some spaces just
            before the text starts.
            the output string will be of the form:
            1. zero or more tabs
            2. zero or more spaces (less than tabIndent)
            3. the rest of the line
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.TextUtilities.GetExpressionBeforeOffset(Netron.Neon.TextEditor.TextArea,System.Int32)">
            <remarks>
            This method returns the expression before a specified offset.
            That method is used in code completion to determine the expression given
            to the parser for type resolve.
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.TextUtilities.IsEmptyLine(Netron.Neon.TextEditor.Document.IDocument,System.Int32)">
            <remarks>
            Returns true, if the line lineNumber is empty or filled with whitespaces.
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Document.TextUtilities.IsEmptyLine(Netron.Neon.TextEditor.Document.IDocument,Netron.Neon.TextEditor.Document.LineSegment)">
            <remarks>
            Returns true, if the line lineNumber is empty or filled with whitespaces.
            </remarks>
        </member>
        <member name="T:Netron.Neon.TextEditor.AbstractMargin">
            <summary>
            This class views the line numbers and folding markers.
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.BrushRegistry">
            <summary>
            Contains brushes/pens for the text editor to speed up drawing. Re-Creation of brushes and pens
            seems too costly.
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.CaretMode">
            <summary>
            In this enumeration are all caret modes listed.
            </summary>
        </member>
        <member name="F:Netron.Neon.TextEditor.CaretMode.InsertMode">
            <summary>
            If the caret is in insert mode typed characters will be
            inserted at the caret position
            </summary>
        </member>
        <member name="F:Netron.Neon.TextEditor.CaretMode.OverwriteMode">
            <summary>
            If the caret is in overwirte mode typed characters will 
            overwrite the character at the caret position
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Caret.DesiredColumn">
            <value>
            The 'prefered' xPos in which the caret moves, when it is moved
            up/down.
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Caret.CaretMode">
            <value>
            The current caret mode.
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.Caret.ValidateCaretPos">
            <remarks>
            If the caret position is outside the document text bounds
            it is set to the correct position by calling ValidateCaretPos.
            </remarks>
        </member>
        <member name="E:Netron.Neon.TextEditor.Caret.PositionChanged">
            <remarks>
            Is called each time the caret is moved.
            </remarks>
        </member>
        <member name="E:Netron.Neon.TextEditor.Caret.CaretModeChanged">
            <remarks>
            Is called each time the CaretMode has changed.
            </remarks>
        </member>
        <member name="T:Netron.Neon.TextEditor.Gui.CompletionWindow.AbstractCompletionWindow">
            <summary>
            Description of AbstractCompletionWindow.	
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Gui.CompletionWindow.CodeCompletionListView">
            <summary>
            Description of CodeCompletionListView.	
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.FoldMargin">
            <summary>
            This class views the line numbers and folding markers.
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.GutterMargin">
            <summary>
            This class views the line numbers and folding markers.
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.HRuler">
            <summary>
            Description of HRuler.	
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.IconBarMargin">
            <summary>
            This class views the line numbers and folding markers.
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Ime">
            <summary>
            Used internally, not for own use.
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.TextArea">
            <summary>
            This class paints the textarea.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Netron.Neon.TextEditor.TextArea.HandleKeyPress(System.Char)" -->
        <member name="M:Netron.Neon.TextEditor.TextArea.ExecuteDialogKey(System.Windows.Forms.Keys)">
            <summary>
            This method executes a dialog key
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.TextArea.InsertChar(System.Char)">
            <remarks>
            Inserts a single character at the caret position
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.TextArea.InsertString(System.String)">
            <remarks>
            Inserts a whole string at the caret position
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.TextArea.ReplaceChar(System.Char)">
            <remarks>
            Replaces a char at the caret position
            </remarks>
        </member>
        <member name="T:Netron.Neon.TextEditor.TextAreaControl">
            <summary>
            This class paints the textarea.
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.TextAreaMouseHandler">
            <summary>
            This class handles all mouse stuff for a textArea.
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.TextAreaUpdateType">
            <summary>
            This enum describes all implemented request types
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.TextAreaUpdate">
            <summary>
            This class is used to request an update of the textarea
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.TextAreaUpdate.#ctor(Netron.Neon.TextEditor.TextAreaUpdateType)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.TextAreaUpdate"/>
            </summary>	
        </member>
        <member name="M:Netron.Neon.TextEditor.TextAreaUpdate.#ctor(Netron.Neon.TextEditor.TextAreaUpdateType,System.Drawing.Point)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.TextAreaUpdate"/>
            </summary>	
        </member>
        <member name="M:Netron.Neon.TextEditor.TextAreaUpdate.#ctor(Netron.Neon.TextEditor.TextAreaUpdateType,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.TextAreaUpdate"/>
            </summary>	
        </member>
        <member name="M:Netron.Neon.TextEditor.TextAreaUpdate.#ctor(Netron.Neon.TextEditor.TextAreaUpdateType,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.TextAreaUpdate"/>
            </summary>	
        </member>
        <member name="T:Netron.Neon.TextEditor.TextEditorControl">
            <summary>
            This class is used for a basic text area control
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.TextEditorControlBase">
            <summary>
            This class is used for a basic text area control
            </summary>
        </member>
        <member name="F:Netron.Neon.TextEditor.TextEditorControlBase.editactions">
            <summary>
            This hashtable contains all editor keys, where
            the key is the key combination and the value the
            action.
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.Encoding">
            <value>
            Current file's character encoding
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.FileName">
            <value>
            The current file name
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.IsUpdating">
            <value>
            true, if the textarea is updating it's status, while
            it updates it status no redraw operation occurs.
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.Document">
            <value>
            The current document
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.IsReadOnly">
            <value>
            If set to true the contents can't be altered.
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.DefaultSize">
            <value>
            supposedly this is the way to do it according to .NET docs,
            as opposed to setting the size in the constructor
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.ShowSpaces">
            <value>
            If true spaces are shown in the textarea
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.UseAntiAliasFont">
            <value>
            If true antialiased fonts are used inside the textarea
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.ShowTabs">
            <value>
            If true tabs are shown in the textarea
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.ShowEOLMarkers">
            <value>
            If true EOL markers are shown in the textarea
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.ShowHRuler">
            <value>
            If true the horizontal ruler is shown in the textarea
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.ShowVRuler">
            <value>
            If true the vertical ruler is shown in the textarea
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.VRulerRow">
            <value>
            The row in which the vertical ruler is displayed
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.ShowLineNumbers">
            <value>
            If true line numbers are shown in the textarea
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.ShowInvalidLines">
            <value>
            If true invalid lines are marked in the textarea
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.EnableFolding">
            <value>
            If true folding is enabled in the textarea
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.TabIndent">
            <value>
            The width in spaces of a tab character
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.LineViewerStyle">
            <value>
            The line viewer style
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.IndentStyle">
            <value>
            The indent style
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.ConvertTabsToSpaces">
            <value>
            if true spaces are converted to tabs
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.CreateBackupCopy">
            <value>
            if true spaces are converted to tabs
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.HideMouseCursor">
            <value>
            if true spaces are converted to tabs
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.AllowCaretBeyondEOL">
            <value>
            if true spaces are converted to tabs
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.BracketMatchingStyle">
            <value>
            if true spaces are converted to tabs
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextEditorControlBase.Font">
            <value>
            The base font of the text area. No bold or italic fonts
            can be used because bold/italic is reserved for highlighting
            purposes.
            </value>
        </member>
        <member name="M:Netron.Neon.TextEditor.TextEditorControlBase.BeginUpdate">
            <remarks>
            Call this method before a long update operation this
            'locks' the text area so that no screen update occurs.
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.TextEditorControlBase.EndUpdate">
            <remarks>
            Call this method to 'unlock' the text area. After this call
            screen update can occur. But no automatical refresh occurs you
            have to commit the updates in the queue.
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.TextEditorControlBase.LoadFile(System.String,System.Boolean)">
            <remarks>
            Loads a file given by fileName
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.TextEditorControlBase.SaveFile(System.String)">
            <remarks>
            Saves a file given by fileName
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.TextEditorControlBase.Refresh">
            <remarks>
            Overwritten refresh method that locks if the control is in
            an update cycle.
            </remarks>
        </member>
        <member name="T:Netron.Neon.TextEditor.TextView">
            <summary>
            This class paints the textarea.
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.TextView.FirstVisibleLine">
            <summary>Gets the first visible <b>logical</b> line.</summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.TextView.GetMarkerBrushAt(System.Int32,System.Int32)">
            <summary>
            Get the marker brush (for solid block markers) at a given position.
            </summary>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>The Brush or null when no marker was found.</returns>
        </member>
        <member name="M:Netron.Neon.TextEditor.TextView.GetLogicalPosition(System.Int32,System.Int32)">
            <summary>
            returns line/column for a visual point position
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.TextView.GetLogicalLine(System.Drawing.Point)">
            <summary>
            returns logical line number for a visual point
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.TextView.GetFoldMarkerFromPosition(System.Int32,System.Int32)">
            <summary>
            returns line/column for a visual point position
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Undo.IUndoableOperation">
            <summary>
            This Interface describes a the basic Undo/Redo operation
            all Undo Operations must implement this interface.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.IUndoableOperation.Undo">
            <summary>
            Undo the last operation
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.IUndoableOperation.Redo">
            <summary>
            Redo the last operation
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Undo.UndoableDelete">
            <summary>
            This class is for the undo of Document insert operations
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoableDelete.#ctor(Netron.Neon.TextEditor.Document.IDocument,System.Int32,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Undo.UndoableDelete"/>
            </summary>	
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoableDelete.Undo">
            <remarks>
            Undo last operation
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoableDelete.Redo">
            <remarks>
            Redo last undone operation
            </remarks>
        </member>
        <member name="T:Netron.Neon.TextEditor.Undo.UndoableInsert">
            <summary>
            This class is for the undo of Document insert operations
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoableInsert.#ctor(Netron.Neon.TextEditor.Document.IDocument,System.Int32,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Undo.UndoableInsert"/>
            </summary>	
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoableInsert.Undo">
            <remarks>
            Undo last operation
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoableInsert.Redo">
            <remarks>
            Redo last undone operation
            </remarks>
        </member>
        <member name="T:Netron.Neon.TextEditor.Undo.UndoableReplace">
            <summary>
            This class is for the undo of Document insert operations
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoableReplace.#ctor(Netron.Neon.TextEditor.Document.IDocument,System.Int32,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Undo.UndoableReplace"/>
            </summary>	
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoableReplace.Undo">
            <remarks>
            Undo last operation
            </remarks>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoableReplace.Redo">
            <remarks>
            Redo last undone operation
            </remarks>
        </member>
        <member name="T:Netron.Neon.TextEditor.Undo.UndoQueue">
            <summary>
            This class stacks the last x operations from the undostack and makes
            one undo/redo operation from it.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoQueue.#ctor(Netron.Neon.TextEditor.Undo.UndoStack,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Undo.UndoStack">
            <summary>
            This class implements an undo stack
            </summary>
        </member>
        <member name="E:Netron.Neon.TextEditor.Undo.UndoStack.ActionUndone">
            <summary>
            </summary>
        </member>
        <member name="E:Netron.Neon.TextEditor.Undo.UndoStack.ActionRedone">
            <summary>
            </summary>
        </member>
        <member name="F:Netron.Neon.TextEditor.Undo.UndoStack.AcceptChanges">
            <summary>
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Undo.UndoStack._UndoStack">
            <summary>
            This property is EXCLUSIVELY for the UndoQueue class, don't USE it
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Undo.UndoStack.CanUndo">
            <summary>
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Undo.UndoStack.CanRedo">
            <summary>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoStack.UndoLast(System.Int32)">
            <summary>
            You call this method to pool the last x operations from the undo stack
            to make 1 operation from it.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoStack.Undo">
            <summary>
            Call this method to undo the last operation on the stack
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoStack.Redo">
            <summary>
            Call this method to redo the last undone operation
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoStack.Push(Netron.Neon.TextEditor.Undo.IUndoableOperation)">
            <summary>
            Call this method to push an UndoableOperation on the undostack, the redostack
            will be cleared, if you use this method.
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoStack.ClearRedoStack">
            <summary>
            Call this method, if you want to clear the redo stack
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoStack.ClearAll">
            <summary>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoStack.OnActionUndone">
            <summary>
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Undo.UndoStack.OnActionRedone">
            <summary>
            </summary>
        </member>
        <member name="T:Netron.Neon.TextEditor.Util.LookupTable">
            <summary>
            This class implements a keyword map. It implements a digital search trees (tries) to find
            a word.
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Util.LookupTable.Count">
            <value>
            The number of elements in the table
            </value>
        </member>
        <member name="P:Netron.Neon.TextEditor.Util.LookupTable.Item(Netron.Neon.TextEditor.Document.IDocument,Netron.Neon.TextEditor.Document.LineSegment,System.Int32,System.Int32)">
            <summary>
            Get the object, which was inserted under the keyword (line, at offset, with length length),
            returns null, if no such keyword was inserted.
            </summary>
        </member>
        <member name="P:Netron.Neon.TextEditor.Util.LookupTable.Item(System.String)">
            <summary>
            Inserts an object in the tree, under keyword
            </summary>
        </member>
        <member name="M:Netron.Neon.TextEditor.Util.LookupTable.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Netron.Neon.TextEditor.Util.LookupTable"/>
            </summary>
        </member>
        <member name="T:Netron.Neon.NTaskCollection">
            <summary>
            Strongly typed collection of tasks
            </summary>
        </member>
        <member name="M:Netron.Neon.NTaskCollection.Add(Netron.Neon.NTask)">
            <summary>
            Adds a task to the collection
            </summary>
            <param name="task">a NTask object</param>
            <returns>the index number in the list</returns>
        </member>
        <member name="M:Netron.Neon.NTaskCollection.AddRange(Netron.Neon.NTaskCollection)">
            <summary>
            Adds a range of tasks to the collection
            </summary>
            <param name="tasks"></param>
        </member>
        <member name="T:Netron.Neon.ChannelNotification">
            <summary>
            Channel info passed by the output control
            </summary>
        </member>
        <member name="T:Netron.Neon.StringNotification">
            <summary>
            General purpose string delegate
            </summary>
        </member>
        <member name="T:Netron.Neon.PropsInfo">
            <summary>
            Passes the object to be shown in the propsgrid
            </summary>
        </member>
        <member name="T:Netron.Neon.URLHandler">
            <summary>
            Passes URL info
            </summary>
        </member>
        <member name="T:Netron.Neon.SelectedTabPageChangeEventHandler">
            <summary>
            Passes tab info
            </summary>
        </member>
        <member name="T:Netron.Neon.TaskInfo">
            <summary>
            Passes tak info
            </summary>
        </member>
        <member name="T:Netron.Neon.BaseServices">
            <summary>
            Enumerates the base services
            </summary>
        </member>
        <member name="F:Netron.Neon.BaseServices.BrowserService">
            <summary>
            the browser service
            </summary>
        </member>
        <member name="F:Netron.Neon.BaseServices.OutputService">
            <summary>
            the output service
            </summary>
        </member>
        <member name="F:Netron.Neon.BaseServices.HelpService">
            <summary>
            the help service
            </summary>
        </member>
        <member name="F:Netron.Neon.BaseServices.ExceptionHandlerService">
            <summary>
            the exception handler service
            </summary>
        </member>
        <member name="F:Netron.Neon.BaseServices.PropertyGridService">
            <summary>
            the property grid
            </summary>
        </member>
        <member name="F:Netron.Neon.BaseServices.GraphService">
            <summary>
            The graph service
            </summary>
        </member>
        <member name="F:Netron.Neon.BaseServices.HTMLService">
            <summary>
            The HTML service
            </summary>
        </member>
        <member name="F:Netron.Neon.BaseServices.FavoritesService">
            <summary>
            The favorites service
            </summary>
        </member>
        <member name="F:Netron.Neon.BaseServices.NAFScriptService">
            <summary>
            The NAF sripting service
            </summary>
        </member>
        <member name="F:Netron.Neon.BaseServices.TasksService">
            <summary>
            The tasks service
            </summary>
        </member>
        <member name="T:Netron.Neon.NAFPluginTypes">
            <summary>
            List of plugin types used throughout the framework
            </summary>
        </member>
        <member name="F:Netron.Neon.NAFPluginTypes.Base">
            <summary>
            the base plugin
            </summary>
        </member>
        <member name="F:Netron.Neon.NAFPluginTypes.Application">
            <summary>
            an application plugin
            </summary>
        </member>
        <member name="F:Netron.Neon.NAFPluginTypes.HostService">
            <summary>
            a hostservice plugin
            </summary>
        </member>
        <member name="F:Netron.Neon.NAFPluginTypes.Unknown">
            <summary>
            an unknown plugin type
            </summary>
        </member>
        <member name="T:Netron.Neon.NAFDockState">
            <summary>
            The different docking states of a NAFPanel
            </summary>
        </member>
        <member name="F:Netron.Neon.NAFDockState.Bottom">
            <summary>
            Dock at the bottom of the screen
            </summary>
        </member>
        <member name="F:Netron.Neon.NAFDockState.Fill">
            <summary>
            Fill the screen as much as possible
            </summary>
        </member>
        <member name="F:Netron.Neon.NAFDockState.Left">
            <summary>
            Dock at the left of the screen
            </summary>
        </member>
        <member name="F:Netron.Neon.NAFDockState.Right">
            <summary>
            Dock at the right of the screen
            </summary>
        </member>
        <member name="F:Netron.Neon.NAFDockState.Top">
            <summary>
            Dock at the bottom of the screen
            </summary>
        </member>
        <member name="F:Netron.Neon.NAFDockState.None">
            <summary>
            Don't dock (floating window)
            </summary>
        </member>
        <member name="T:Netron.Neon.HelpLocations">
            <summary>
            Where the help resides
            </summary>
        </member>
        <member name="F:Netron.Neon.HelpLocations.Remote">
            <summary>
            Help accessed over http://
            </summary>
        </member>
        <member name="F:Netron.Neon.HelpLocations.Local">
            <summary>
            Help accessed over file
            </summary>
        </member>
        <member name="T:Netron.Neon.HelpTypes">
            <summary>
            The forms in which help resources can be stored
            </summary>
        </member>
        <member name="F:Netron.Neon.HelpTypes.Flat">
            <summary>
            flat file resource
            </summary>
        </member>
        <member name="F:Netron.Neon.HelpTypes.Assembly">
            <summary>
            compiled assembly type resource
            </summary>
        </member>
        <member name="T:Netron.Neon.INOutput">
            <summary>
            Interface a NAF outputter
            </summary>
        </member>
        <member name="M:Netron.Neon.INOutput.ClearAll">
            <summary>
            Clears the default channel
            </summary>
        </member>
        <member name="M:Netron.Neon.INOutput.WriteLine(System.String)">
            <summary>
            Write a line to the output in the default channel
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Netron.Neon.INElement">
            <summary>
            Describes the interface of an element participating
             in the mediator pattern of the framework
            </summary>
        </member>
        <member name="P:Netron.Neon.INElement.Root">
            <summary>
            Gets or sets the root of the mediator pattern
            </summary>
        </member>
        <member name="T:Netron.Neon.INUIElement">
            <summary>
            Describes the interface of an element participating
             in the UI
            </summary>
        </member>
        <member name="P:Netron.Neon.INUIElement.Text">
            <summary>
            Gets or sets the text
            </summary>
        </member>
        <member name="P:Netron.Neon.INUIElement.DarkColor">
            <summary>
            Gets or sets the darker color of the gradient
            </summary>
        </member>
        <member name="P:Netron.Neon.INUIElement.LightColor">
            <summary>
            Gets or set the lighter color of the gradient
            </summary>
        </member>
        <member name="T:Netron.Neon.INAFFavorites">
            <summary>
            Interface of the favorites service 
            </summary>
        </member>
        <member name="T:Netron.Neon.INUIPropertyGrid">
            <summary>
            The specs of a property grid plugin
            </summary>
        </member>
        <member name="P:Netron.Neon.INUIPropertyGrid.SelectedObject">
            <summary>
            Gets or sets the object whose properties will be displayed
            </summary>
        </member>
        <member name="T:Netron.Neon.INUITasks">
            <summary>
            Interface a NAF tasks
            </summary>
        </member>
        <member name="M:Netron.Neon.INUITasks.EditColumn(System.Int32)">
            <summary>
            Sets the given column in edit mode
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Netron.Neon.INUITasks.NewTask">
            <summary>
            Adds a new task and sets it to edit mode
            </summary>
        </member>
        <member name="M:Netron.Neon.INUITasks.AddTask(Netron.Neon.NTask)">
            <summary>
            Add a task
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Netron.Neon.INUITasks.GetTasks">
            <summary>
            Gets all tasks
            </summary>
        </member>
        <member name="M:Netron.Neon.INUITasks.RemoveTask(System.Int32)">
            <summary>
            Removes an item at the specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Netron.Neon.INUITasks.GetTask(System.Int32)">
            <summary>
            Retrieves a task item from the list
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.Neon.INUITextEditor">
            <summary>
            Interface a NAF outputter
            </summary>
        </member>
        <member name="M:Netron.Neon.INUITextEditor.WriteLine(System.String)">
            <summary>
            Write a line to the end of the editor
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Netron.Neon.INUITitleBar">
            <summary>
            Describes the interface of the title bar
            </summary>
        </member>
        <member name="T:Netron.Neon.LogFileTraceListener">
            <summary>
            Custom trace listener logging to a file
            </summary>
        </member>
        <member name="M:Netron.Neon.LogFileTraceListener.#ctor(System.IO.Stream,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="stream"></param>
            <param name="name"></param>
        </member>
        <member name="M:Netron.Neon.LogFileTraceListener.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Netron.Neon.LogFileTraceListener.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="fileName"></param>
            <param name="name"></param>
        </member>
        <member name="M:Netron.Neon.LogFileTraceListener.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Netron.Neon.LogFileTraceListener.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
        </member>
        <member name="M:Netron.Neon.LogFileTraceListener.#ctor(System.IO.TextWriter)">
            <summary>
            Constructor
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Netron.Neon.LogFileTraceListener.Write(System.String)">
            <summary>
            Write a message to the stream
            </summary>
            <param name="message">the sstring to be written</param>
        </member>
        <member name="M:Netron.Neon.LogFileTraceListener.WriteLine(System.String)">
            <summary>
            Write a line of message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Netron.Neon.LogFileTraceListener.getPreambleMessage">
            <summary>
            Gets the type and method name wherein the trace call is
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.Neon.CtrlHelper.GetNonTransparentBackColor(System.Windows.Forms.Control)">
            <summary>
            this function returns the first non-transparent color of a control's parent(s)
            loops through all parents to find the first non transparent color
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.Neon.CtrlHelper.CheckedRectangleF(System.Single,System.Single,System.Single,System.Single)">
            <summary>
             this function returns a checked rectangle (width and height always > 1
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.Neon.CtrlHelper.CheckedRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            this function returns a checked rectangle (width and height always > 1 
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.Neon.NeonBaseList.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overrides the method to invalidate the control when the user scrolls the diagram
            
            </summary>
            <param name="m"></param>
            <remarks>Not possible with the available overridable methods of .Net as far as I know</remarks>
        </member>
        <member name="T:Netron.Neon.AxWebBrowser">
            <summary>
            Wrapper around the IE browser activeX COM with a lot of interop
            http://www.rendelmann.info/blog/
            http://www.codeproject.com/books/0764549146_8.asp?print=true
            http://www.icsharpcode.net/
            </summary>
        </member>
        <member name="E:Netron.Neon.AxWebBrowser.NewWindow">
            <summary>
            </summary>
        </member>
        <member name="T:Netron.Neon.AxWebBrowser.BrowserNewWindowEvent">
            <summary>
            </summary>
        </member>
        <member name="P:Netron.Neon.AxWebBrowser.Html">
            <summary>
            Set/Get HTML.
            </summary>
        </member>
        <member name="M:Netron.Neon.AxWebBrowser.SelfNavigateComplete(System.Object,Netron.Neon.DWebBrowserEvents2_NavigateComplete2Event)">
            <summary>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.Neon.AxWebBrowser.#cctor">
            <summary>
            Static ctor
            </summary>
        </member>
        <member name="E:Netron.Neon.AxWebBrowser.TranslateUrl">
            <summary>
            </summary>
        </member>
        <member name="M:Netron.Neon.AxWebBrowser.RaiseOnTranslateUrl(Netron.Neon.DWebBrowserEvents2_TranslateUrlEventArgs)">
            <summary>
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Netron.Neon.AxWebBrowser.TranslateAccelerator">
            <summary>
            </summary>
        </member>
        <member name="M:Netron.Neon.AxWebBrowser.RaiseOnTranslateAccelerator(System.Windows.Forms.KeyEventArgs)">
            <summary>
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Netron.Neon.AxWebBrowser.Border3d">
            <summary>
            Set/Get a bool to cotnrol the visual style of the boder
            </summary>
        </member>
        <member name="P:Netron.Neon.AxWebBrowser.FlatScrollBars">
            <summary>
            Set/Get a bool to control the style of the scrollbars
            </summary>
        </member>
        <member name="P:Netron.Neon.AxWebBrowser.AllowInPlaceNavigation">
            <summary>
            Set/Get a bool to allow in place navigation
            </summary>
        </member>
        <member name="M:Netron.Neon.AxWebBrowser.RaiseOnShowContextMenu(Netron.Neon.DWebBrowserEvents2_MenuCancelEventArgs)">
            <summary>
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Netron.Neon.AxWebBrowser.ShowContextMenu">
            <summary>
            </summary>
        </member>
        <member name="P:Netron.Neon.AxWebBrowser.ScriptEnabled">
            <summary>
            Set/Get a bool to allow exec. of JavaScript
            </summary>
        </member>
        <member name="P:Netron.Neon.AxWebBrowser.ActiveXEnabled">
            <summary>
            Set/Get a bool to allow to excecute ActiveX controls
            </summary>
        </member>
        <member name="P:Netron.Neon.AxWebBrowser.JavaEnabled">
            <summary>
            Set/Get a bool to allow Java applets
            </summary>
        </member>
        <member name="P:Netron.Neon.AxWebBrowser.BackroundSoundEnabled">
            <summary>
            Set/Get a bool to control the playback of background sound
            </summary>
        </member>
        <member name="P:Netron.Neon.AxWebBrowser.ImagesDownloadEnabled">
            <summary>
            Set/Get a bool to control the display of any images
            </summary>
        </member>
        <member name="P:Netron.Neon.AxWebBrowser.VideoEnabled">
            <summary>
            Set/Get a bool to control the display of embedded video plugins
            </summary>
        </member>
        <member name="P:Netron.Neon.AxWebBrowser.ScriptObject">
            <summary>
            Set/Get the script object to be used from within JavaScript via 
            <c>window.getExternal</c> call
            </summary>
        </member>
        <member name="P:Netron.Neon.AxWebBrowser.ScrollBarsEnabled">
            <summary>
            Set/Get a bool that control the scrollbar dislpay
            </summary>
        </member>
        <member name="P:Netron.Neon.AxWebBrowser.LowSecurity">
            <summary>
            Get a bool that informs about low security browser state.
            Win98/Me does not support all we need and causes exceptions.
            </summary>
        </member>
        <member name="P:Netron.Neon.AxWebBrowser.AnyBeforeNavigateEventListener">
            <summary>
            Enables the parent to test, if there is already a listener attached to the
            BeforeNavigate event. Without that, the parent isn't able to test, because
            delegates are only allowed to have += and -= operators.
            </summary>
        </member>
        <member name="T:Netron.Neon.DWebBrowserEvents2_MenuCancelEventHandler">
            <summary>
            </summary>
        </member>
        <member name="T:Netron.Neon.DWebBrowserEvents2_MenuCancelEventArgs">
            <summary>
            </summary>
        </member>
        <member name="T:Netron.Neon.DWebBrowserEvents2_TranslateUrlEventArgs">
            <summary>
            </summary>
        </member>
        <member name="T:Netron.Neon.BrowserTranslateUrlEventHandler">
            <summary>
            </summary>
        </member>
        <member name="M:Netron.Neon.IHTMLDocument2.Write(System.Object[])">
            <summary>
            Write complete html doc content including markup. 
            </summary>
            <param name="psarray">object[] containing the string(s)</param>
            <example>
            <code>
              IHTMLDocument2 document = control.GetDocument();
              if (document != null) {
                 document.Open("", null, null, null);
                 object[] a = new object[]{"<html><body>Hello world</body></html>"};
                 document.DummyWrite(a);
                 document.Close();
              }
            </code>
            </example>
        </member>
        <member name="T:Netron.Neon.DocHostUIHandler">
            <summary>
            Summary description for DocHostUIHandler.
            More infos: http://www.codeproject.com/books/0764549146_8.asp?print=true
            </summary>
        </member>
        <member name="M:Netron.Neon.DocHostUIHandler.ShowContextMenu(System.Int32,Netron.Neon.Interop.POINT,System.Object,System.Object)">
            <summary>
            Read http://www.codeproject.com/miscctrl/WBCArticle.asp for further details
            </summary>
            <param name="dwID"></param>
            <param name="pt"></param>
            <param name="pcmdtReserved"></param>
            <param name="pdispReserved"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.Neon.DocHostUIHandler.TranslateAccelerator(Netron.Neon.Interop.COMMSG,System.Guid@,System.Int32)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="group"></param>
            <param name="nCmdID"></param>
            <returns></returns>
            <remarks>
            Main Accelerator Keys Supported by MsHtml 
            Accelerator |  Description  
            Ctrl-N | Opens the current HTML document in a new WebBrowser window.
            Crtl-P | Displays a Print dialog box for printing the HTML document.
            Ctrl-A | Selects the entire contents of the HTML document.
            Crtl-F | Displays a Find dialog box for searching the HTML document.
            F5, Ctrl-F5 | Refreshes the currently loaded HTML document.
            </remarks>
        </member>
        <member name="T:Netron.Neon.Interop">
            <summary>
            Implements various utility methods for COM interoperability.
            </summary>
        </member>
        <member name="M:Netron.Neon.Interop.GetAssemblyForTypeLib(System.String)">
            <summary>
            Gets an assembly used to interop with the objects defined in the type
            library.
            </summary>
            <param name="typeLibraryName">
            	Name of the type library such as SHDocVw.dll
            </param>
            <returns>
            	Returns the assembly if found/created otherwise null.
            </returns>
        </member>
        <member name="T:Netron.Neon.Interop.IDocHostUIHandler">
            <summary>
            http://msdn.microsoft.com/workshop/browser/hosting/reference/ifaces/idochostuihandler/idochostuihandler.asp
            </summary>
        </member>
        <member name="T:Netron.Neon.Interop.ConversionEventHandler">
            <summary>
            ConversionEventHandler
            </summary>
        </member>
        <member name="M:Netron.Neon.IShellUIHelper.AddFavorite(System.String,System.String)">
            <summary>
            Add a url to the favorites (dialog is displayed).
            </summary>
            <param name="url">must be a valid Url (including url protocol, etc.)</param>
            <param name="title">suggested title for the new entry</param>
        </member>
        <member name="M:Netron.Neon.IShellUIHelper.ImportExportFavorites(System.Boolean,System.String)">
            <summary>
            Handles the importing and exporting of Microsoft® Internet Explorer favorites.
            </summary>
            <param name="fImport">Bool that specifies one of the following possible values. 
            True, if Import is requested. False, if Export is requested.</param>
            <param name="strImpExpPath">String, that specifies the location (URL) to import
             or export, depending on fImport. If a value is an empty string, a file dialog box is opened.
             </param>
             <remarks>See also http://msdn.microsoft.com/workshop/browser/external/reference/ifaces/ishelluihelper/importexportfavorites.asp?frame=true</remarks>
        </member>
        <member name="M:Netron.Neon.IShellUIHelper.ShowBrowserUI(System.String,System.Object)">
             <summary>
             Opens the specified browser dialog box.
             </summary>
             <param name="bstrName">String that specifies a browser dialog box, using one of the following values. 
             'LanguageDialog' -- Opens the Language Preference dialog box.
             'OrganizeFavorites' -- Opens the Organize NFavorites dialog box.
             'PrivacySettings' -- Microsoft® Internet Explorer 6 and later. Opens the Privacy Preferences dialog box.
             'ProgramAccessAndDefaults' -- Microsoft Windows® XP Service Pack 1 (SP1) and later. Opens the Set Program Access and Defaults dialog box.
            </param>
             <param name="pvarIn">Pointer to a VARIANT that is specific to the UI.</param>
             <returns>Pointer to a VARIANT that is specific to the UI</returns>
             <remarks>See also http://msdn.microsoft.com/library/default.asp?url=/workshop/browser/external/reference/ifaces/ishelluihelper/showbrowserui.asp</remarks>
        </member>
        <member name="T:Netron.Neon.NBrowser">
            <summary>
            Browser user control
            Originally from IC#
            It contains a browser toolbar on top which can be disabled
            </summary>
        </member>
        <member name="T:Netron.Neon.NButton">
            <summary>
            Rounded flat button
            </summary>
        </member>
        <member name="F:Netron.Neon.NButton.Rounding.None">
            <summary>
            No rounding
            </summary>
        </member>
        <member name="F:Netron.Neon.NButton.Rounding.Up">
            <summary>
            The upper corners are rounded off
            </summary>
        </member>
        <member name="F:Netron.Neon.NButton.Rounding.Down">
            <summary>
            The lower corners are rounded off
            </summary>
        </member>
        <member name="F:Netron.Neon.NButton.bellShaped">
            <summary>
            whether the gradient is bell-shaped
            </summary>
        </member>
        <member name="F:Netron.Neon.NButton.bellCenter">
            <summary>
            the center of the bell, between 0 and 1
            </summary>
        </member>
        <member name="F:Netron.Neon.NButton.bellFalloff">
            <summary>
            the falloff of the bell, between 0 and 1
            </summary>
        </member>
        <member name="F:Netron.Neon.NButton.gradientAngle">
            <summary>
            the angle of the gradient
            </summary>
        </member>
        <member name="P:Netron.Neon.NButton.BellCenter">
            <summary>
            The center of the bell-shaped gradient is a floating value between 0 and 1.
            </summary>
        </member>
        <member name="P:Netron.Neon.NButton.BellFalloff">
            <summary>
            The fall-off of the  bell-shaped gradient is a floating value between 0 and 1.
            </summary>
        </member>
        <member name="P:Netron.Neon.NButton.BellShaped">
            <summary>
            Whether the gradient is bell-shaped
            </summary>
        </member>
        <member name="P:Netron.Neon.NButton.GradientAngle">
            <summary>
            The gradient angle
            </summary>
        </member>
        <member name="P:Netron.Neon.NButton.Root">
            <summary>
            Gets or sets the root of the mediator
            </summary>
        </member>
        <member name="M:Netron.Neon.NButton.SetBrush">
            <summary>
            Sets the background brush
            </summary>
        </member>
        <member name="M:Netron.Neon.NButton.SetColorScheme(Netron.Neon.UIColorScheme)">
            <summary>
            Sets the color scheme
            </summary>
            <param name="scheme"></param>
        </member>
        <member name="M:Netron.Neon.NButton.SetStyle(Netron.Neon.UIStyle)">
            <summary>
            Sets the UI style
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Netron.Neon.NButton.OnResize(System.EventArgs)">
            <summary>
            Handles the resize event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.Neon.NButton.SetPoints">
            <summary>
            Sets the points for drawing the corners
            </summary>
        </member>
        <member name="M:Netron.Neon.NButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the button
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Netron.Neon.NChartingControl">
            <summary>
            Neon's simple charting control
            </summary>
        </member>
        <member name="F:Netron.Neon.NChartingControl.bag">
            <summary>
            the props bag for the propsgrid
            </summary>
        </member>
        <member name="T:Netron.Neon.NChartingControl.ChartInfo">
            <summary>
            used by the data request event
            </summary>
        </member>
        <member name="E:Netron.Neon.NChartingControl.OnDataRequest">
            <summary>
            gives a signal that new data is requested before drawing
            Goes hand in hand with the Data property
            </summary>
        </member>
        <member name="F:Netron.Neon.NChartingControl.list">
            <summary>
            the data drawn
            </summary>
        </member>
        <member name="F:Netron.Neon.NChartingControl.lines">
            <summary>
            the lines collection
            </summary>
        </member>
        <member name="F:Netron.Neon.NChartingControl.capacity">
            <summary>
            capacity of the history
            </summary>
        </member>
        <member name="F:Netron.Neon.NChartingControl.scalingFactor">
            <summary>
            the global scaling factor
            </summary>
        </member>
        <member name="F:Netron.Neon.NChartingControl.data">
            <summary>
            the last data set
            </summary>
        </member>
        <member name="F:Netron.Neon.NChartingControl.mVerticalLines">
            <summary>
            whether to show v-lines
            </summary>
        </member>
        <member name="F:Netron.Neon.NChartingControl.mHorizontalLines">
            <summary>
            whether to show h-lines
            </summary>
        </member>
        <member name="F:Netron.Neon.NChartingControl.mHorizontalSpacing">
            <summary>
            the h-spacing
            </summary>
        </member>
        <member name="F:Netron.Neon.NChartingControl.mVerticalSpacing">
            <summary>
            the v-spacing
            </summary>
        </member>
        <member name="F:Netron.Neon.NChartingControl.timer">
            <summary>
            the timer controlling the pulse of the drawing
            </summary>
        </member>
        <member name="F:Netron.Neon.NChartingControl.mGridPen">
            <summary>
            the pen for drawing the grid
            </summary>
        </member>
        <member name="F:Netron.Neon.NChartingControl.gridColor">
            <summary>
            the grid's color
            </summary>
        </member>
        <member name="F:Netron.Neon.NChartingControl.plotPoints">
            <summary>
            the number of points to be plotted
            </summary>
        </member>
        <member name="F:Netron.Neon.NChartingControl.plotPen">
            <summary>
            the pen used to plot the lines, is set in the OnPaint by the Lines collection
            </summary>
        </member>
        <member name="F:Netron.Neon.NChartingControl.showLegend">
            <summary>
            whether to show the legend of the lines
            </summary>
        </member>
        <member name="M:Netron.Neon.NChartingControl.Clear">
            <summary>
            Resets the data
            </summary>
        </member>
        <member name="M:Netron.Neon.NChartingControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.Neon.NChartingControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Netron.Neon.ChartLine">
            <summary>
            A line representing data evolution in the chart control	/// 
            </summary>
        </member>
        <member name="T:Netron.Neon.ChartLines">
            <summary>
            A STC of chart lines
            </summary>
        </member>
        <member name="T:Netron.Neon.DataList">
            <summary>
            STC of float array with a constraint capacity
            </summary>
        </member>
        <member name="T:Netron.Neon.CSContent">
            <summary>
            Summary description for CSContent.
            </summary>
        </member>
        <member name="F:Netron.Neon.CSContent.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Netron.Neon.CSContent.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.Neon.CSContent.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Netron.Neon.CSResults">
            <summary>
            Summary description for CSResults.
            </summary>
        </member>
        <member name="F:Netron.Neon.CSResults.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Netron.Neon.CSResults.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.Neon.CSResults.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Netron.Neon.CSSearch">
            <summary>
            Simple scrollable textbox for line-by-line output
            </summary>
        </member>
        <member name="M:Netron.Neon.CSSearch.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.Neon.CSSearch.InitializeComponent">
            <summary>
            Windows designer initialization
            </summary>
        </member>
        <member name="T:Netron.Neon.NAFPluginHelp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Netron.Neon.NAFPluginHelp.location">
            <summary>
            remote or local help
            </summary>
        </member>
        <member name="F:Netron.Neon.NAFPluginHelp.address">
            <summary>
            where to find the resources
            </summary>
        </member>
        <member name="F:Netron.Neon.NAFPluginHelp.helpName">
            <summary>
            the name as used in the address
            </summary>
        </member>
        <member name="F:Netron.Neon.NAFPluginHelp.helpType">
            <summary>
            whether flat or assembly resources
            </summary>
        </member>
        <member name="P:Netron.Neon.NAFPluginHelp.Location">
            <summary>
            Gets or sets the resource location type (remote/local)
            </summary>
        </member>
        <member name="P:Netron.Neon.NAFPluginHelp.Address">
            <summary>
            Gets or sets the address of the resource
            </summary>
        </member>
        <member name="P:Netron.Neon.NAFPluginHelp.HelpName">
            <summary>
            Gets or sets the name of the help as it will be accessed
            in the browser address
            </summary>
        </member>
        <member name="P:Netron.Neon.NAFPluginHelp.HelpType">
            <summary>
            Gets or sets the type of resource (assembly/flat...)
            </summary>
        </member>
        <member name="T:Netron.Neon.IniFile">
            <summary>
            Create a New INI file to store or load data
            </summary>
        </member>
        <member name="M:Netron.Neon.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <PARAM name="INIPath"></PARAM>
        </member>
        <member name="M:Netron.Neon.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            </summary>
            <PARAM name="Section"></PARAM>
            Section name
            <PARAM name="Key"></PARAM>
            Key Name
            <PARAM name="Value"></PARAM>
            Value Name
        </member>
        <member name="M:Netron.Neon.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            Read Data Value From the Ini File
            </summary>
            <PARAM name="Section"></PARAM>
            <PARAM name="Key"></PARAM>
            <PARAM name="Path"></PARAM>
            <returns></returns>
        </member>
        <member name="T:Netron.Neon.NFavorites">
            <summary>
            Displays the favorites of the current user
            </summary>
        </member>
        <member name="M:Netron.Neon.NFavorites.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Netron.Neon.NFavorites.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.Neon.NFavorites.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Netron.Neon.NFavorites.CurrentURL">
            <summary>
            Returns the currently (or last) selected URL.
            </summary>
        </member>
        <member name="P:Netron.Neon.NFavorites.CurrentURLName">
            <summary>
            Returns the currently (or last) selected URL Name.
            </summary>
        </member>
        <member name="P:Netron.Neon.NFavorites.CurrentFolder">
            <summary>
            Returns the currently selected folder.
            </summary>
        </member>
        <member name="P:Netron.Neon.NFavorites.FavoritesPath">
            <summary>
            Returns/sets the Internet Explorer favorites path for the current user.
            </summary>
        </member>
        <member name="M:Netron.Neon.NFavorites._GetFavoritesPath">
            <summary>
            Gets the Internet Explorer NFavorites path for the current user 
            from the Windows Registry.
            </summary>
        </member>
        <member name="M:Netron.Neon.NFavorites._InitFileSystemWatcher">
            <summary>
            Sets up a FileSystemWatcher object to monitor the current user's
            NFavorites folder.  If any changes are made to the NFavorites, the
            list will be refreshed.
            </summary>
        </member>
        <member name="M:Netron.Neon.NFavorites._RefreshFavorites">
            <summary>
            This is the main method for loading the favorites list.
            </summary>
        </member>
        <member name="M:Netron.Neon.NFavorites._LoadFavoritesFromFolder(System.IO.DirectoryInfo,System.Windows.Forms.TreeNode)">
            <summary>
            Load each sub-folder's favorites.  This method is called recursivley for
            each sub-directory.
            </summary>
            <param name="aobjDirInfo">Directory information for the directory being processed.</param>
            <param name="aobjNode">The current TreeView Node being processed</param>
        </member>
        <member name="M:Netron.Neon.NFavorites._LoadFavoritesFromPath(System.String,System.Windows.Forms.TreeNode)">
            <summary>
            Loads the favorites from the specified path.
            </summary>
            <param name="astrPath">The path to read the favorites (URL links)
            from.</param>
            <param name="aobjNode">The TreeView node the favorites should
            be placed in.</param>
        </member>
        <member name="M:Netron.Neon.NFavorites._CollapseSiblings(System.Windows.Forms.TreeNode)">
            <summary>
            Collapses all siblings nodes.
            </summary>
            <param name="aobjNode">The node whose siblings will be collapsed.</param>
        </member>
        <member name="M:Netron.Neon.NFavorites.FSW_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            This event handler is called when a file/folder has been modified.
            </summary>
        </member>
        <member name="M:Netron.Neon.NFavorites.FSW_OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            This event handler is called when a file/folder has been renamed.
            </summary>
        </member>
        <member name="M:Netron.Neon.NFavorites.FSW_Reload(System.Object,System.EventArgs)">
            <summary>
            This event is called when the favorites list needs to be refreshed.
            </summary>
        </member>
        <member name="M:Netron.Neon.NFavorites.tvFavorites_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Change the cursor to a hand for URL links or to an arrow for folders.
            </summary>
        </member>
        <member name="M:Netron.Neon.NFavorites.tvFavorites_Click(System.Object,System.EventArgs)">
            <summary>
            Processes node clicks and expands or collapses nodes accordingly.
            </summary>
        </member>
        <member name="M:Netron.Neon.NFavorites.tvFavorites_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Stores the current position of the mouse when it is clicked for future use.
            </summary>
        </member>
        <member name="T:Netron.Neon.FolderBrowser">
            <summary>
            Class to wrap the Shell32 function SHBrowseForFolder
            allowing the user to select a folder. 
            </summary>
        </member>
        <member name="M:Netron.Neon.FolderBrowser.#ctor(System.Windows.Forms.Form)">
            <summary>
            Default constructor browses from My Computer
            </summary>
        </member>
        <member name="M:Netron.Neon.FolderBrowser.#ctor(System.Windows.Forms.Form,System.Int32)">
            <summary>
            Constructor to browse from a special folder location
            </summary>
        </member>
        <member name="M:Netron.Neon.FolderBrowser.#ctor(System.Windows.Forms.Form,System.String)">
            <summary>
            Constructor to browse from a given FS path
            </summary>
        </member>
        <member name="P:Netron.Neon.FolderBrowser.Caption">
            <summary>
            Set/Get the caption text
            </summary>
        </member>
        <member name="P:Netron.Neon.FolderBrowser.Title">
            <summary>
            Although called a title in the SHBrowseForFolder
            documentation, this refers to the text displayed
            in the dialog below the caption bar.
            </summary>
        </member>
        <member name="M:Netron.Neon.FolderBrowser.BrowseForFolder">
            <summary>
            It all comes down to this worker method which
            browses based on a pidl.
            </summary>
        </member>
        <member name="T:Netron.Neon.NMenuItem">
            <summary>
            Summary description for NMenuItem.
            http://homepage.ntlworld.com/mdaudi100/alternate/menus.html
            </summary>
        </member>
        <member name="F:Netron.Neon.NMenuItem.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Netron.Neon.NMenuItem.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.Neon.NMenuItem.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Netron.Neon.NOutput">
            <summary>
            Simple scrollable textbox for line-by-line output
            </summary>
        </member>
        <member name="P:Netron.Neon.NOutput.Current">
            <summary>
            Gets or sets the current channel
            </summary>
        </member>
        <member name="M:Netron.Neon.NOutput.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Netron.Neon.NOutput.AddChannel(System.String)">
            <summary>
            Adds a new channel and sets this new one to the current
            </summary>
            <param name="channelName">the name of the new channel</param>
        </member>
        <member name="M:Netron.Neon.NOutput.InitializeComponent">
            <summary>
            Windows designer initialization
            </summary>
        </member>
        <member name="M:Netron.Neon.NOutput.ClearAll">
            <summary>
            Clears the default channel. If you want to clear another channel, use the Channels property.
            </summary>
        </member>
        <member name="M:Netron.Neon.NOutput.WriteLine(System.String)">
            <summary>
            Writes a message to the default channel
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Netron.Neon.NOutput.WriteLine(System.String,System.String)">
            <summary>
            Writes a messages to the given channes
            </summary>
            <param name="channel"></param>
            <param name="message"></param>
        </member>
        <member name="M:Netron.Neon.NOutput.channel_OnClear(System.String)">
            <summary>
            Handles the ClearAll event of one of the channels
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Netron.Neon.OutputChannel">
            <summary>
            The output channel is a buffer of string data
            </summary>
        </member>
        <member name="E:Netron.Neon.OutputChannel.OnNewOutput">
            <summary>
            Notifies the outside that a new message has been posted in this 
            output channes
            </summary>
        </member>
        <member name="E:Netron.Neon.OutputChannel.OnClear">
            <summary>
            Notifies the outside that the channel got cleared
            </summary>
        </member>
        <member name="F:Netron.Neon.OutputChannel.name">
            <summary>
            the name of the channel
            </summary>
        </member>
        <member name="F:Netron.Neon.OutputChannel.content">
            <summary>
            the actual string buffer
            </summary>
        </member>
        <member name="P:Netron.Neon.OutputChannel.Name">
            <summary>
            Gets the name of the output channel
            </summary>
        </member>
        <member name="P:Netron.Neon.OutputChannel.Content">
            <summary>
            Gets the content of the channel
            </summary>
        </member>
        <member name="M:Netron.Neon.OutputChannel.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="name">the name of the channel</param>
        </member>
        <member name="M:Netron.Neon.OutputChannel.WriteLine(System.String)">
            <summary>
            Write a message to the output
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Netron.Neon.OutputChannel.WriteLine(System.String,System.String)">
            <summary>
            Write a line of message with a marked preamble
            </summary>
            <param name="message"></param>
            <param name="preamble"></param>
        </member>
        <member name="M:Netron.Neon.OutputChannel.ClearAll">
            <summary>
            Clears the content of this channel
            </summary>
        </member>
        <member name="M:Netron.Neon.OutputChannel.RaiseOnClear">
            <summary>
            Raises the OnClear event
            </summary>
        </member>
        <member name="M:Netron.Neon.OutputChannel.RaiseOnNewMessage(System.String)">
            <summary>
            Raises the OnNewMessage event
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Netron.Neon.OutputChannelCollection">
            <summary>
            STC of OutputChannel
            </summary>
        </member>
        <member name="T:Netron.Neon.PopupForm">
            <summary>
            The PopupForm is a generalized menu
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupForm.components">
            <summary>
            required by VS
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupForm.root">
            <summary>
            access to the root
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupForm.lightColor">
            <summary>
            part of the color scheme
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupForm.darkColor">
            <summary>
            part of the color scheme
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupForm.backBrush">
            <summary>
            the brush for the background
            </summary>
        </member>
        <member name="P:Netron.Neon.PopupForm.DarkColor">
            <summary>
            Gets or sets the darker color of the gradient
            </summary>
        </member>
        <member name="P:Netron.Neon.PopupForm.LightColor">
            <summary>
            Gets or sets the lighter color of the gradient
            </summary>
        </member>
        <member name="P:Netron.Neon.PopupForm.Root">
            <summary>
            Gets or sets the root of the mediator
            </summary>
        </member>
        <member name="M:Netron.Neon.PopupForm.SetBrush">
            <summary>
            Sets the brush in function of the style and scheme
            </summary>
        </member>
        <member name="M:Netron.Neon.PopupForm.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.Neon.PopupForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.Neon.PopupForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Netron.Neon.PopupForm.SetStyle(Netron.Neon.UIStyle)">
            <summary>
            Sets the UI style
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Netron.Neon.PopupForm.SetColorScheme(Netron.Neon.UIColorScheme)">
            <summary>
            Sets the Color scheme
            </summary>
            <param name="scheme"></param>
        </member>
        <member name="T:Netron.Neon.PopupClosedEventArgs">
            <summary>
            Contains event information for a <see cref="!:PopupClosed"/> event.
            http://www.vbaccelerator.com/home/NET/Code/Controls/Popup_Windows/Popup_Windows/article.asp
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupClosedEventArgs.popup">
            <summary>
            The popup form.
            </summary>
        </member>
        <member name="P:Netron.Neon.PopupClosedEventArgs.Popup">
            <summary>
            Gets the popup form which is being closed.
            </summary>
        </member>
        <member name="M:Netron.Neon.PopupClosedEventArgs.#ctor(System.Windows.Forms.Form)">
            <summary>
            Constructs a new instance of this class for the specified
            popup form.
            </summary>
            <param name="popup">Popup Form which is being closed.</param>
        </member>
        <member name="T:Netron.Neon.PopupCancelEventArgs">
            <summary>
            Arguments to a <see cref="!:PopupCancelEvent"/>.  Provides a
            reference to the popup form that is to be closed and 
            allows the operation to be cancelled.
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupCancelEventArgs.cancel">
            <summary>
            Whether to cancel the operation
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupCancelEventArgs.location">
            <summary>
            Mouse down location
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupCancelEventArgs.popup">
            <summary>
            Popup form.
            </summary>
        </member>
        <member name="M:Netron.Neon.PopupCancelEventArgs.#ctor(System.Windows.Forms.Form,System.Drawing.Point)">
            <summary>
            Constructs a new instance of this class.
            </summary>
            <param name="popup">The popup form</param>
            <param name="location">The mouse location, if any, where the
            mouse event that would cancel the popup occured.</param>
        </member>
        <member name="P:Netron.Neon.PopupCancelEventArgs.Popup">
            <summary>
            Gets the popup form
            </summary>
        </member>
        <member name="P:Netron.Neon.PopupCancelEventArgs.CursorLocation">
            <summary>
            Gets the location that the mouse down which would cancel this 
            popup occurred
            </summary>
        </member>
        <member name="P:Netron.Neon.PopupCancelEventArgs.Cancel">
            <summary>
            Gets/sets whether to cancel closing the form. Set to
            <c>true</c> to prevent the popup from being closed.
            </summary>
        </member>
        <member name="T:Netron.Neon.PopupClosedEventHandler">
            <summary>
            Represents the method which responds to a <see cref="!:PopupClosed"/> event.
            </summary>
        </member>
        <member name="T:Netron.Neon.PopupCancelEventHandler">
            <summary>
            Represents the method which responds to a <see cref="!:PopupCancel"/> event.
            </summary>
        </member>
        <member name="T:Netron.Neon.PopupWindowHelper">
            <summary>
            A class to assist in creating popup windows like Combo Box drop-downs and Menus.
            This class includes functionality to keep the title bar of the popup owner form
            active whilst the popup is displayed, and to automatically cancel the popup
            whenever the user clicks outside the popup window or shifts focus to another 
            application.
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupWindowHelper.popClosedHandler">
            <summary>
            Event Handler to detect when the popup window is closed
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupWindowHelper.filter">
            <summary>
            Message filter to detect mouse clicks anywhere in the application
            whilst the popup window is being displayed.
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupWindowHelper.popup">
            <summary>
            The popup form that is being shown.
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupWindowHelper.owner">
            <summary>
            The owner of the popup form that is being shown:
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupWindowHelper.popupShowing">
            <summary>
            Whether the popup is showing or not.
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupWindowHelper.skipClose">
            <summary>
            Whether the popup has been cancelled, notified by PopupCancel,
            rather than closed.
            </summary>
        </member>
        <member name="E:Netron.Neon.PopupWindowHelper.PopupClosed">
            <summary>
            Raised when the popup form is closed.
            </summary>
        </member>
        <member name="E:Netron.Neon.PopupWindowHelper.PopupCancel">
            <summary>
            Raised when the Popup Window is about to be cancelled.  The
            <see cref="P:Netron.Neon.PopupCancelEventArgs.Cancel"/> property can be
            set to <c>true</c> to prevent the form from being cancelled.
            </summary>
        </member>
        <member name="M:Netron.Neon.PopupWindowHelper.ShowPopup(System.Windows.Forms.Form,System.Windows.Forms.Form,System.Drawing.Point)">
            <summary>
            Shows the specified Form as a popup window, keeping the
            Owner's title bar active and preparing to cancel the popup
            should the user click anywhere outside the popup window.
            <para>Typical code to use this message is as follows:</para>
            <code>
               frmPopup popup = new frmPopup();
               Point location = this.PointToScreen(new Point(button1.Left, button1.Bottom));
               popupHelper.ShowPopup(this, popup, location);
            </code>
            <para>Put as much initialisation code as possible
            into the popup form's constructor, rather than the <see cref="!:System.Windows.Forms.Load"/>
            event as this will improve visual appearance.</para>
            </summary>
            <param name="owner">Main form which owns the popup</param>
            <param name="popup">Window to show as a popup</param>
            <param name="location">Location relative to the screen to show the popup at.</param>
        </member>
        <member name="M:Netron.Neon.PopupWindowHelper.popup_Closed(System.Object,System.EventArgs)">
            <summary>
            Responds to the <see cref="E:System.Windows.Forms.Form.Closed"/>
            event from the popup form.
            </summary>
            <param name="sender">Popup form that has been closed.</param>
            <param name="e">Not used.</param>
        </member>
        <member name="M:Netron.Neon.PopupWindowHelper.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Subclasses the owning form's existing Window Procedure to enables the 
            title bar to remain active when a popup is show, and to detect if
            the user clicks onto another application whilst the popup is visible.
            </summary>
            <param name="m">Window Procedure Message</param>
        </member>
        <member name="M:Netron.Neon.PopupWindowHelper.ClosePopup">
            <summary>
            Called when the popup is being hidden.
            </summary>
        </member>
        <member name="M:Netron.Neon.PopupWindowHelper.OnPopupClosed(Netron.Neon.PopupClosedEventArgs)">
            <summary>
            Raises the <see cref="E:Netron.Neon.PopupWindowHelper.PopupClosed"/> event.
            </summary>
            <param name="e"><see cref="T:Netron.Neon.PopupClosedEventArgs"/> describing the
            popup form that is being closed.</param>
        </member>
        <member name="M:Netron.Neon.PopupWindowHelper.OnPopupCancel(Netron.Neon.PopupCancelEventArgs)">
            <summary>
            Raises the <see cref="E:Netron.Neon.PopupWindowHelper.PopupCancel"/> event.
            </summary>
            <param name="e"><see cref="T:Netron.Neon.PopupCancelEventArgs"/> describing the
            popup form that about to be cancelled.</param>
        </member>
        <member name="M:Netron.Neon.PopupWindowHelper.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>Use the <see cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)"/>
            method to attach this class to the form you want to show popups from.</remarks>
        </member>
        <member name="T:Netron.Neon.PopupWindowHelperMessageFilter">
            <summary>
            A Message Loop filter which detect mouse events whilst the popup form is shown
            and notifies the owning <see cref="T:Netron.Neon.PopupWindowHelper"/> class when a mouse
            click outside the popup occurs.
            </summary>
        </member>
        <member name="E:Netron.Neon.PopupWindowHelperMessageFilter.PopupCancel">
            <summary>
            Raised when the Popup Window is about to be cancelled.  The
            <see cref="P:Netron.Neon.PopupCancelEventArgs.Cancel"/> property can be
            set to <c>true</c> to prevent the form from being cancelled.
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupWindowHelperMessageFilter.popup">
            <summary>
            The popup form
            </summary>
        </member>
        <member name="F:Netron.Neon.PopupWindowHelperMessageFilter.owner">
            <summary>
            The owning <see cref="T:Netron.Neon.PopupWindowHelper"/> object.
            </summary>
        </member>
        <member name="M:Netron.Neon.PopupWindowHelperMessageFilter.#ctor(Netron.Neon.PopupWindowHelper)">
            <summary>
            Constructs a new instance of this class and sets the owning
            object.
            </summary>
            <param name="owner">The <see cref="T:Netron.Neon.PopupWindowHelper"/> object
            which owns this class.</param>
        </member>
        <member name="P:Netron.Neon.PopupWindowHelperMessageFilter.Popup">
            <summary>
            Gets/sets the popup form which is being displayed.
            </summary>
        </member>
        <member name="M:Netron.Neon.PopupWindowHelperMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Checks the message loop for mouse messages whilst the popup
            window is displayed.  If one is detected the position is
            checked to see if it is outside the form, and the owner
            is notified if so.
            </summary>
            <param name="m">Windows Message about to be processed by the
            message loop</param>
            <returns><c>true</c> to filter the message, <c>false</c> otherwise.
            This implementation always returns <c>false</c>.</returns>
        </member>
        <member name="M:Netron.Neon.PopupWindowHelperMessageFilter.OnMouseDown">
            <summary>
            Checks the mouse location and calls the OnCancelPopup method
            if the mouse is outside the popup form.		
            </summary>
        </member>
        <member name="M:Netron.Neon.PopupWindowHelperMessageFilter.OnCancelPopup(Netron.Neon.PopupCancelEventArgs)">
            <summary>
            Raises the <see cref="E:Netron.Neon.PopupWindowHelperMessageFilter.PopupCancel"/> event.
            </summary>
            <param name="e">The <see cref="T:Netron.Neon.PopupCancelEventArgs"/> associated 
            with the cancel event.</param>
        </member>
        <member name="T:Netron.Neon.NRichTextBox">
            <summary>
            Taken from Khendys Gordon's article;
            http://www.codeproject.com/cs/miscctrl/csexrichtextbox.asp
            
            This class adds the following functionality to RichTextBox:
            
            1.	Allows plain text to be inserted or appended programmatically to RTF
            	content.
            2.	Allows the font, text color, and highlight color of plain text to be
            	specified when inserting or appending text as RTF.
            3.	Allows images to be inserted programmatically, or with interaction from
            	the user.
            </summary>
            <remarks>
            Many solutions to the problem of programmatically inserting images
            into a RichTextBox use the clipboard or hard code the RTF for
            the image in the program.  This class is an attempt to make the process of
            inserting images at runtime more flexible without the overhead of maintaining
            the clipboard or the use of huge, cumbersome strings.
            
            RTF Specification v1.6 was used and is referred to many times in this document.
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnrtfspec/html/rtfspec.asp
            
            For information about the RichEdit (Unmanaged RichTextBox) ...
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/commctls/richedit/richeditcontrols/aboutricheditcontrols.asp
            </remarks>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.#ctor">
            <summary>
            Initializes the text colors, creates dictionaries for RTF colors and
            font families, and stores the horizontal and vertical resolution of
            the RichTextBox's graphics context.
            </summary>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.#ctor(Netron.Neon.RtfColor)">
            <summary>
            Calls the default constructor then sets the text color.
            </summary>
            <param name="_textColor"></param>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.#ctor(Netron.Neon.RtfColor,Netron.Neon.RtfColor)">
            <summary>
            Calls the default constructor then sets te text and highlight colors.
            </summary>
            <param name="_textColor"></param>
            <param name="_highlightColor"></param>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.AppendRtf(System.String)">
            <summary>
            Assumes the string passed as a paramter is valid RTF text and attempts
            to append it as RTF to the content of the control.
            </summary>
            <param name="_rtf"></param>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.InsertRtf(System.String)">
            <summary>
            Assumes that the string passed as a parameter is valid RTF text and
            attempts to insert it as RTF into the content of the control.
            </summary>
            <remarks>
            NOTE: The text is inserted wherever the caret is at the time of the call,
            and if any text is selected, that text is replaced.
            </remarks>
            <param name="_rtf"></param>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.AppendTextAsRtf(System.String)">
            <summary>
            Appends the text using the current font, text, and highlight colors.
            </summary>
            <param name="_text"></param>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.AppendTextAsRtf(System.String,System.Drawing.Font)">
            <summary>
            Appends the text using the given font, and current text and highlight
            colors.
            </summary>
            <param name="_text"></param>
            <param name="_font"></param>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.AppendTextAsRtf(System.String,System.Drawing.Font,Netron.Neon.RtfColor)">
            <summary>
            Appends the text using the given font and text color, and the current
            highlight color.
            </summary>
            <param name="_text"></param>
            <param name="_font"></param>
            <param name="_color"></param>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.AppendTextAsRtf(System.String,System.Drawing.Font,Netron.Neon.RtfColor,Netron.Neon.RtfColor)">
            <summary>
            Appends the text using the given font, text, and highlight colors.  Simply
            moves the caret to the end of the RichTextBox's text and makes a call to
            insert.
            </summary>
            <param name="_text"></param>
            <param name="_font"></param>
            <param name="_textColor"></param>
            <param name="_backColor"></param>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.InsertTextAsRtf(System.String)">
            <summary>
            Inserts the text using the current font, text, and highlight colors.
            </summary>
            <param name="_text"></param>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.InsertTextAsRtf(System.String,System.Drawing.Font)">
            <summary>
            Inserts the text using the given font, and current text and highlight
            colors.
            </summary>
            <param name="_text"></param>
            <param name="_font"></param>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.InsertTextAsRtf(System.String,System.Drawing.Font,Netron.Neon.RtfColor)">
            <summary>
            Inserts the text using the given font and text color, and the current
            highlight color.
            </summary>
            <param name="_text"></param>
            <param name="_font"></param>
            <param name="_color"></param>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.InsertTextAsRtf(System.String,System.Drawing.Font,Netron.Neon.RtfColor,Netron.Neon.RtfColor)">
            <summary>
            Inserts the text using the given font, text, and highlight colors.  The
            text is wrapped in RTF codes so that the specified formatting is kept.
            You can only assign valid RTF to the RichTextBox.Rtf property, else
            an exception is thrown.  The RTF string should follow this format ...
            
            {\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{[FONTS]}{\colortbl ;[COLORS]}}
            \viewkind4\uc1\pard\cf1\f0\fs20 [DOCUMENT AREA] }
            
            </summary>
            <remarks>
            NOTE: The text is inserted wherever the caret is at the time of the call,
            and if any text is selected, that text is replaced.
            </remarks>
            <param name="_text"></param>
            <param name="_font"></param>
            <param name="_color"></param>
            <param name="_color"></param>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.GetDocumentArea(System.String,System.Drawing.Font)">
             <summary>
             Creates the Document Area of the RTF being inserted. The document area
             (in this case) consists of the text being added as RTF and all the
             formatting specified in the Font object passed in. This should have the
             form ...
             
             \viewkind4\uc1\pard\cf1\f0\fs20 [DOCUMENT AREA] }
            
             </summary>
             <param name="_text"></param>
             <param name="_font"></param>
             <returns>
             The document area as a string.
             </returns>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.InsertImage(System.Drawing.Image)">
            <summary>
            Inserts an image into the RichTextBox.  The image is wrapped in a Windows
            Format Metafile, because although Microsoft discourages the use of a WMF,
            the RichTextBox (and even MS Word), wraps an image in a WMF before inserting
            the image into a document.  The WMF is attached in HEX format (a string of
            HEX numbers).
            
            The RTF Specification v1.6 says that you should be able to insert bitmaps,
            .jpegs, .gifs, .pngs, and Enhanced Metafiles (.emf) directly into an RTF
            document without the WMF wrapper. This works fine with MS Word,
            however, when you don't wrap images in a WMF, WordPad and
            RichTextBoxes simply ignore them.  Both use the riched20.dll or msfted.dll.
            </summary>
            <remarks>
            NOTE: The image is inserted wherever the caret is at the time of the call,
            and if any text is selected, that text is replaced.
            </remarks>
            <param name="_image"></param>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.GetImagePrefix(System.Drawing.Image)">
            <summary>
            Creates the RTF control string that describes the image being inserted.
            This description (in this case) specifies that the image is an
            MM_ANISOTROPIC metafile, meaning that both X and Y axes can be scaled
            independently.  The control string also gives the images current dimensions,
            and its target dimensions, so if you want to control the size of the
            image being inserted, this would be the place to do it. The prefix should
            have the form ...
            
            {\pict\wmetafile8\picw[A]\pich[B]\picwgoal[C]\pichgoal[D]
            
            where ...
            
            A	= current width of the metafile in hundredths of millimeters (0.01mm)
            	= Image Width in Inches * Number of (0.01mm) per inch
            	= (Image Width in Pixels / Graphics Context's Horizontal Resolution) * 2540
            	= (Image Width in Pixels / Graphics.DpiX) * 2540
            
            B	= current height of the metafile in hundredths of millimeters (0.01mm)
            	= Image Height in Inches * Number of (0.01mm) per inch
            	= (Image Height in Pixels / Graphics Context's Vertical Resolution) * 2540
            	= (Image Height in Pixels / Graphics.DpiX) * 2540
            
            C	= target width of the metafile in twips
            	= Image Width in Inches * Number of twips per inch
            	= (Image Width in Pixels / Graphics Context's Horizontal Resolution) * 1440
            	= (Image Width in Pixels / Graphics.DpiX) * 1440
            
            D	= target height of the metafile in twips
            	= Image Height in Inches * Number of twips per inch
            	= (Image Height in Pixels / Graphics Context's Horizontal Resolution) * 1440
            	= (Image Height in Pixels / Graphics.DpiX) * 1440
            
            </summary>
            <remarks>
            The Graphics Context's resolution is simply the current resolution at which
            windows is being displayed.  Normally it's 96 dpi, but instead of assuming
            I just added the code.
            
            According to Ken Howe at pbdr.com, "Twips are screen-independent units
            used to ensure that the placement and proportion of screen elements in
            your screen application are the same on all display systems."
            
            Units Used
            ----------
            1 Twip = 1/20 Point
            1 Point = 1/72 Inch
            1 Twip = 1/1440 Inch
            
            1 Inch = 2.54 cm
            1 Inch = 25.4 mm
            1 Inch = 2540 (0.01)mm
            </remarks>
            <param name="_image"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.GdipEmfToWmfBits(System.IntPtr,System.UInt32,System.Byte[],System.Int32,Netron.Neon.NRichTextBox.EmfToWmfBitsFlags)">
            <summary>
            Use the EmfToWmfBits function in the GDI+ specification to convert a 
            Enhanced Metafile to a Windows Metafile
            </summary>
            <param name="_hEmf">
            A handle to the Enhanced Metafile to be converted
            </param>
            <param name="_bufferSize">
            The size of the buffer used to store the Windows Metafile bits returned
            </param>
            <param name="_buffer">
            An array of bytes used to hold the Windows Metafile bits returned
            </param>
            <param name="_mappingMode">
            The mapping mode of the image.  This control uses MM_ANISOTROPIC.
            </param>
            <param name="_flags">
            Flags used to specify the format of the Windows Metafile returned
            </param>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.GetRtfImage(System.Drawing.Image)">
            <summary>
            Wraps the image in an Enhanced Metafile by drawing the image onto the
            graphics context, then converts the Enhanced Metafile to a Windows
            Metafile, and finally appends the bits of the Windows Metafile in HEX
            to a string and returns the string.
            </summary>
            <param name="_image"></param>
            <returns>
            A string containing the bits of a Windows Metafile in HEX
            </returns>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.GetFontTable(System.Drawing.Font)">
            <summary>
            Creates a font table from a font object.  When an Insert or Append 
            operation is performed a font is either specified or the default font
            is used.  In any case, on any Insert or Append, only one font is used,
            thus the font table will always contain a single font.  The font table
            should have the form ...
            
            {\fonttbl{\f0\[FAMILY]\fcharset0 [FONT_NAME];}
            </summary>
            <param name="_font"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.GetColorTable(Netron.Neon.RtfColor,Netron.Neon.RtfColor)">
            <summary>
            Creates a font table from the RtfColor structure.  When an Insert or Append
            operation is performed, _textColor and _backColor are either specified
            or the default is used.  In any case, on any Insert or Append, only three
            colors are used.  The default color of the RichTextBox (signified by a
            semicolon (;) without a definition), is always the first color (index 0) in
            the color table.  The second color is always the text color, and the third
            is always the highlight color (color behind the text).  The color table
            should have the form ...
            
            {\colortbl ;[TEXT_COLOR];[HIGHLIGHT_COLOR];}
            
            </summary>
            <param name="_textColor"></param>
            <param name="_backColor"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.Neon.NRichTextBox.RemoveBadChars(System.String)">
            <summary>
            Called by overrided RichTextBox.Rtf accessor.
            Removes the null character from the RTF.  This is residue from developing
            the control for a specific instant messaging protocol and can be ommitted.
            </summary>
            <param name="_originalRtf"></param>
            <returns>RTF without null character</returns>
        </member>
        <member name="T:Netron.Neon.NSplitter">
            <summary>
            Splitter which on double-click will hide/show the selected (adjacent) panel.
            It uses the MinMax property of the splitter to flatten the adjacent panel.
            A double-arrow is drawn to emphasize the effect.
            TODO: menu or popup help
            </summary>
        </member>
        <member name="T:Netron.Neon.NStatusBar">
            <summary>
            Summary description for NStatusBar.
            </summary>
        </member>
        <member name="F:Netron.Neon.NStatusBar.gradientAngle">
            <summary>
            the angle of the gradient
            </summary>
        </member>
        <member name="F:Netron.Neon.NStatusBar.shadowPen">
            <summary>
            the shadow pen
            </summary>
        </member>
        <member name="F:Netron.Neon.NStatusBar.bellShaped">
            <summary>
            whether the gradient is bell-shaped
            </summary>
        </member>
        <member name="F:Netron.Neon.NStatusBar.bellCenter">
            <summary>
            the center of the bell, between 0 and 1
            </summary>
        </member>
        <member name="F:Netron.Neon.NStatusBar.bellFalloff">
            <summary>
            the falloff of the bell, between 0 and 1
            </summary>
        </member>
        <member name="P:Netron.Neon.NStatusBar.BellCenter">
            <summary>
            The center of the bell-shaped gradient is a floating value between 0 and 1.
            </summary>
        </member>
        <member name="P:Netron.Neon.NStatusBar.BellFalloff">
            <summary>
            The fall-off of the  bell-shaped gradient is a floating value between 0 and 1.
            </summary>
        </member>
        <member name="P:Netron.Neon.NStatusBar.BellShaped">
            <summary>
            Whether the gradient is bell-shaped
            </summary>
        </member>
        <member name="P:Netron.Neon.NStatusBar.GradientAngle">
            <summary>
            The gradient angle
            </summary>
        </member>
        <member name="P:Netron.Neon.NStatusBar.LightColor">
            <summary>
            The lighter gradient color
            </summary>
        </member>
        <member name="P:Netron.Neon.NStatusBar.DarkColor">
            <summary>
            The darker gradient color
            </summary>
        </member>
        <member name="T:Netron.Neon.ATP">
            <summary>
            The only way to make a dragdrop-able object
            is to have it serializable. The TabPage isn't, so
            this struct does the trick.
            </summary>
        </member>
        <member name="F:Netron.Neon.ATP.Element">
            <summary>
            The actual dragged page
            </summary>
        </member>
        <member name="F:Netron.Neon.ATP.Origin">
            <summary>
            The tabcontrol it's coming from
            </summary>
        </member>
        <member name="T:Netron.Neon.NTabControl">
            <summary>
            Owner drawn tabcontrol with dragdrop functionality
            See below for a necessary fix in the hosting form
            </summary>
        </member>
        <member name="F:Netron.Neon.NTabControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="F:Netron.Neon.NTabControl.darkColor">
            <summary>
            the darker color of the gradient of the selected tab
            </summary>
        </member>
        <member name="F:Netron.Neon.NTabControl.lightColor">
            <summary>
            the lighter color of the gradient of the selected tab
            </summary>
        </member>
        <member name="F:Netron.Neon.NTabControl.unselectedTabColor">
            <summary>
            the color of the unselected tab
            </summary>
        </member>
        <member name="F:Netron.Neon.NTabControl.unselectedEdgeColor">
            <summary>
            the color of the edge of the unselected tab
            </summary>
        </member>
        <member name="F:Netron.Neon.NTabControl.unselectedForeColor">
            <summary>
            the color of the text of the unselected tab
            </summary>
        </member>
        <member name="F:Netron.Neon.NTabControl.tabBrush">
            <summary>
            the brush of the selected tab
            </summary>
        </member>
        <member name="F:Netron.Neon.NTabControl.unselectedForeBrush">
            <summary>
            the brush of the unselected tab
            </summary>
        </member>
        <member name="F:Netron.Neon.NTabControl.darkBrush">
            <summary>
            the brush to draw the rectangle around the selected tab page
            </summary>
        </member>
        <member name="F:Netron.Neon.NTabControl.unselectedTabBrush">
            <summary>
            the brush for the unselected tab
            </summary>
        </member>
        <member name="F:Netron.Neon.NTabControl.unselectedEdgePen">
            <summary>
            the pen to draw the rectangle around the unselected tabs
            </summary>
        </member>
        <member name="F:Netron.Neon.NTabControl.bellCenter">
            <summary>
            the center of the bell, between 0 and 1
            </summary>
        </member>
        <member name="F:Netron.Neon.NTabControl.bellFalloff">
            <summary>
            the falloff of the bell, between 0 and 1
            </summary>
        </member>
        <member name="F:Netron.Neon.NTabControl.gradientAngle">
            <summary>
            the angle of the gradient
            </summary>
        </member>
        <member name="F:Netron.Neon.NTabControl.bellShaped">
            <summary>
            whether the gradient is bell-shaped
            </summary>
        </member>
        <member name="P:Netron.Neon.NTabControl.GradientAngle">
            <summary>
            The gradient angle
            </summary>
        </member>
        <member name="P:Netron.Neon.NTabControl.BellCenter">
            <summary>
            The center of the bell-shaped gradient is a floating value between 0 and 1.
            </summary>
        </member>
        <member name="P:Netron.Neon.NTabControl.BellFalloff">
            <summary>
            The fall-off of the  bell-shaped gradient is a floating value between 0 and 1.
            </summary>
        </member>
        <member name="P:Netron.Neon.NTabControl.BellShaped">
            <summary>
            Whether the gradient is bell-shaped
            </summary>
        </member>
        <member name="M:Netron.Neon.NTabControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Netron.Neon.NTabControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.Neon.NTabControl.FindIndex(System.Windows.Forms.TabPage)">
            <summary> 
            Loops over all the TabPages to find the index of the given TabPage. 
            </summary> 
            <param name="page">The TabPage we want the index for.</param> 
            <returns>The index of the given TabPage(-1 if it isn't found.)</returns> 
        </member>
        <member name="T:Netron.Neon.NTask">
            <summary>
            Encapsulates a single task item
            Task = description + filename + linenumber + status
            </summary>
        </member>
        <member name="T:Netron.Neon.NTasks">
            <summary>
            
            </summary>
        </member>
        <member name="P:Netron.Neon.NTasks.ComboBox">
            <summary>
            Gets the combo box which is used as a dropdown selection 
            </summary>
        </member>
        <member name="M:Netron.Neon.NTasks.AddTask(Netron.Neon.NTask)">
            <summary>
            Adds a task item to the tasks
            </summary>
            <param name="task">a NTask item</param>
        </member>
        <member name="M:Netron.Neon.NTasks.NewTask">
            <summary>
            Adds a new line and sets the edit mode on the first colom
            </summary>
        </member>
        <member name="M:Netron.Neon.NTasks.RemoveSelected">
            <summary>
            Removes the currently selected item from the list
            </summary>
        </member>
        <member name="M:Netron.Neon.NTasks.GetTask(System.Int32)">
            <summary>
            Retrieves a task from the panel with the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.Neon.NTasks.EditColumn(System.Int32)">
            <summary>
            Sets the control in edit mode on the specified column
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Netron.Neon.NTasks.FocusOver(System.Object,System.EventArgs)">
            <summary>
            Handles the edit change when the focus gets lost
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.Neon.NTasks.EditOver(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Handles the enter key event on one of the editors
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Netron.Neon.NTitleBar">
            <summary>
            Neon titlebar
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.neon">
            <summary>
            adds the bezier rounding at the left
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.root">
            <summary>
            pointer to the root
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.lightColor">
            <summary>
            the lighter color of the gradient
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.darkColor">
            <summary>
            the darker color of the gradient
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.shadowColor">
            <summary>
            the shadow color underneath the bar, if set to visible
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.frontBrush">
            <summary>
            the brush of the main part
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.textBrush">
            <summary>
            the brush to draw the text
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.rectangle">
            <summary>
            the rectangle wherein the smooth transition occurs
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.tracking">
            <summary>
            tracking bit
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.x">
            <summary>
            last position of the mouse after a press
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.y">
            <summary>
            last position of the mouse after a press
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.popMenu">
            <summary>
            the popup menu if enable
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.gradientAngle">
            <summary>
            the angle of the gradient
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.shadowPen">
            <summary>
            the shadow pen
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.showShadow">
            <summary>
            whether to draw the shadow
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.bellShaped">
            <summary>
            whether the gradient is bell-shaped
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.bellCenter">
            <summary>
            the center of the bell, between 0 and 1
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.bellFalloff">
            <summary>
            the falloff of the bell, between 0 and 1
            </summary>
        </member>
        <member name="F:Netron.Neon.NTitleBar.enableMenu">
            <summary>
            whether the default menu is enabled
            </summary>
        </member>
        <member name="P:Netron.Neon.NTitleBar.Root">
            <summary>
            Gets or sets the root
            </summary>
        </member>
        <member name="P:Netron.Neon.NTitleBar.BellCenter">
            <summary>
            The center of the bell-shaped gradient is a floating value between 0 and 1.
            </summary>
        </member>
        <member name="P:Netron.Neon.NTitleBar.BellFalloff">
            <summary>
            The fall-off of the  bell-shaped gradient is a floating value between 0 and 1.
            </summary>
        </member>
        <member name="P:Netron.Neon.NTitleBar.ShowShadow">
            <summary>
            Whether to show the shadow underneath
            </summary>
        </member>
        <member name="P:Netron.Neon.NTitleBar.ShowDefaultMenu">
            <summary>
            Whether to show the pop-up menu
            </summary>
        </member>
        <member name="P:Netron.Neon.NTitleBar.BellShaped">
            <summary>
            Whether the gradient is bell-shaped
            </summary>
        </member>
        <member name="P:Netron.Neon.NTitleBar.GradientAngle">
            <summary>
            The gradient angle
            </summary>
        </member>
        <member name="P:Netron.Neon.NTitleBar.Text">
            <summary>
            The caption
            </summary>
        </member>
        <member name="P:Netron.Neon.NTitleBar.LightColor">
            <summary>
            The lighter gradient color
            </summary>
        </member>
        <member name="P:Netron.Neon.NTitleBar.ShadowColor">
            <summary>
            The shadow color
            </summary>
        </member>
        <member name="P:Netron.Neon.NTitleBar.DarkColor">
            <summary>
            The darker gradient color
            </summary>
        </member>
        <member name="P:Netron.Neon.NTitleBar.Font">
            <summary>
            Overrides the font to update the brushes
            </summary>
        </member>
        <member name="P:Netron.Neon.NTitleBar.ForeColor">
            <summary>
            Overrides the ForeColor to update the brushes
            </summary>
        </member>
        <member name="M:Netron.Neon.NTitleBar.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Netron.Neon.NTitleBar.mnuExit_Click(System.Object,System.EventArgs)">
            <summary>
            Ends the application
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.Neon.NTitleBar.mnuMaximize_Click(System.Object,System.EventArgs)">
            <summary>
            Maximizes the window
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.Neon.NTitleBar.mnuMinimize_Click(System.Object,System.EventArgs)">
            <summary>
            Minimizes the window
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.Neon.NTitleBar.BuildMenu">
            <summary>
            Builds the context menu
            </summary>
        </member>
        <member name="M:Netron.Neon.NTitleBar.OnResize(System.EventArgs)">
            <summary>
            Resizes the drawing
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Netron.Neon.NTitleBar.SetBrush">
            <summary>
            Sets the brushes in function of the chosen colors
            </summary>
        </member>
        <member name="M:Netron.Neon.NTitleBar.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Netron.Neon.NTitleBar.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Netron.Neon.NTitleBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the control
            </summary>
            <param name="pe"></param>
        </member>
        <member name="M:Netron.Neon.NTitleBar.NAFTitleBar_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse down event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.Neon.NTitleBar.NAFTitleBar_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse up event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.Neon.NTitleBar.NAFTitleBar_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the mouse move event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Netron.Neon.NTitleBar.NAFTitleBar_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Handles the double-click event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Netron.Neon.GenericValueEditor">
            <summary>
            Represents a Windows control that allows you to edit a value of any type.
            </summary>
            <remarks>
            <p>The <strong>GenericValueEditor</strong> control allows the user to edit
            values of a specific type. Use the <see cref="P:Netron.Neon.GenericValueEditor.Value"/> property to access
            the edited value.</p>
            <p>The type of objects to edit is defined by the
            <see cref="P:Netron.Neon.GenericValueEditor.EditedType"/> property of this control. The
            <strong>GenericValueEditor</strong> uses the <see cref="T:System.Drawing.Design.UITypeEditor"/> and
            <see cref="T:System.ComponentModel.TypeConverter"/> installed on that type to edit and validate values.</p>
            <p>When the <see cref="T:System.Drawing.Design.UITypeEditor"/> associated with the edited type has the style
            <strong>DropDown</strong> (see <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/>), then
            this control will display a down arrow button that drops the custom editor.
            When the <see cref="T:System.Drawing.Design.UITypeEditor"/> associated with the edited type has the style
            <strong>Modal</strong>, then this control will display a <strong>...</strong> button
            that opens the modal dialog.</p>
            <p>When no <see cref="T:System.Drawing.Design.UITypeEditor"/> is associated with the edited type or the
            associated editor is of style <strong>None</strong>, then the behavior of the
            control depends on the edited type. If the type is enumerated, then the control acts
            like a combo box of the enumerated values. If the type is not an enumerated type,
            then the control acts like a text box.</p>
            <p>If the editor associated with the edited type can display a representation of
            the edited value (see 
            <see cref="M:System.Drawing.Design.UITypeEditor.GetPaintValueSupported">UITypeEditor.GetPaintValueSupported</see>),
            then a small rectangle showing this representation will be displayed in addition to the
            textual value.</p> 
            </remarks>
            <example>
            <para lang="C#,Visual Basic">The following code sample shows how to create a <strong>GenericValueEditor</strong> for editing 
            a <see cref="T:System.Drawing.Color"/> stucture.
            </para>
            <code lang="C#">
            private GenericValueEditor GetColorEditor(Color startColor) {
            	GenericValueEditor editor = new GenericValueEditor();
            	editor.EditedType = typeof(Color);
            	editor.Value = startColor;
            	return editor;
            }
            </code>
            <code lang="Visual Basic">
            Private Funtion GetColorEditor(ByVal startColor As Color) as GenericValueEditor
            	Dim editor as GenericValueEditor = New GenericValueEditor()
            	editor.EditedType = GetType(Color)
            	editor.Value = startColor
            	Return editor
            End Function
            </code>
            </example>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.autoSize">
            <summary>
            Indicates whether the control is in auto size mode.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.borderStyle">
            <summary>
            The border style. Note that initialization must be done here.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.editedType">
            <summary>
            Edited type.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.converter">
            <summary>
            The type converter for the edited type.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.editor">
            <summary>
            The editor for the currently edited type.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.currentValue">
            <summary>
            Current value of the editor.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.textBox">
            <summary>
            The text box for editing text.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.editorButton">
            <summary>
            A button used to drop UI type editors, if any.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.previewControl">
            <summary>
            A control used to paint the current value.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.hasButton">
            <summary>
            Indicates whether a button should be displayed to drop a <strong>UITypeEditor</strong>
            or the standard value list box.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.editorService">
            <summary>
            The <strong>IWindowsFormsEditorService</strong> that 
            allows you to drop UI type editors.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.paintValueSupported">
            <summary>
            Indicates if the UITypeEditor can paint the value.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.hasStandardValues">
            <summary>
            Indicates if the type converter defines standard values for the type.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.showPreviewOnly">
            <summary>
            Indicates if we want to hide the textbox and only paint the value.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.PAINT_VALUE_WIDTH">
            <summary>
            Default width of the paint value rectangle.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.standardValuesUIEditor">
            <summary>
            UITypeEditor for types with standard values.
            </summary>
        </member>
        <member name="E:Netron.Neon.GenericValueEditor.ValueChanged">
            <summary>
            Event fired when the <see cref="P:Netron.Neon.GenericValueEditor.Value"/> property is changed on the control.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Netron.Neon.GenericValueEditor"/> class.
            </summary>
            <remarks>The default edited type is <see cref="T:System.String"/>.</remarks>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Netron.Neon.GenericValueEditor"/> class using
            the specified type.
            </summary>
            <param name="editedType">The <see cref="T:System.Type"/> of object that can be edited by this control.</param>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.InitTextBox">
            <summary>
            Initializes the text box .
            </summary>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.BackgroundImage">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.BackgroundImage">Control.BackgroundImage</see>.
            </summary>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.ForeColor">
            <summary>
            Gets or sets the foreground color of the control.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the foreground color of the control.
            The default value is the value for window text (<see cref="P:System.Drawing.SystemColors.WindowText">SystemColors.WindowText</see>).</value>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.ResetForeColor">
            <summary>
            Resets the <see cref="P:Netron.Neon.GenericValueEditor.ForeColor"/> property to its default value.
            </summary>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.BackColor">
            <summary>
            Gets or sets the background color of the control.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the background color of the control.
            The default value is the value for window text (<see cref="P:System.Drawing.SystemColors.Window">SystemColors.Window</see>).</value>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.ResetBackColor">
            <summary>
            Resets the <see cref="P:Netron.Neon.GenericValueEditor.BackColor"/> property to its default value.
            </summary>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.AutoSize">
            <summary>
            Gets or sets a value indicating whether the control automatically adjusts its height to the font height.
            </summary>
            <value><see langword="true"/> if the control adjusts its height to closely fit 
            its contents; <see langword="false"/> otherwise. The default value is <see langword="true"/>.</value>
        </member>
        <member name="E:Netron.Neon.GenericValueEditor.AutoSizeChanged">
            <summary>
            Event fired when the <see cref="P:Netron.Neon.GenericValueEditor.AutoSize"/> property is changed on the control.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnAutoSizeChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:Netron.Neon.GenericValueEditor.AutoSize"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>AutoSize</strong> property is changed.</remarks>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.CreateParams">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.CreateParams">Control.CreateParams</see>.
            </summary>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.BorderStyle">
            <summary>
            Gets or sets the border style of the control.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.BorderStyle"/> values. The default value
            is <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D"/>.</value>
        </member>
        <member name="E:Netron.Neon.GenericValueEditor.BorderStyleChanged">
            <summary>
            Event fired when the <see cref="P:Netron.Neon.GenericValueEditor.BorderStyle"/> property is changed on the control.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnBorderStyleChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:Netron.Neon.GenericValueEditor.BorderStyle"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>BorderStyle</strong> property is changed.</remarks>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.TextAlign">
            <summary>
            Gets or sets the way text is aligned in a <see cref="T:Netron.Neon.GenericValueEditor"/> control.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.HorizontalAlignment"/> enumeration values that specifies 
            how text is aligned in the control. The default value is <see cref="F:System.Windows.Forms.HorizontalAlignment.Left"/>.</value>
        </member>
        <member name="E:Netron.Neon.GenericValueEditor.TextAlignChanged">
            <summary>
            Event fired when the <see cref="P:Netron.Neon.GenericValueEditor.TextAlign"/> property is changed on the control.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnTextAlignChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:Netron.Neon.GenericValueEditor.TextAlign"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>TextAlign</strong> property is changed.</remarks>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.ReadOnly">
            <summary>
            Gets or sets a value indicating whether text in the text box is read-only.
            </summary>
            <value><see langword="true"/> if the text box is read-only; <see langword="false"/> otherwise. The default value is 
            <see langword="false"/>.</value>
            <remarks>When this property is set to <see langword="true"/>, the contents of the control cannot be 
            changed by the user at runtime. With this property set to <see langword="true"/>, you can still set 
            the value of the <see cref="P:Netron.Neon.GenericValueEditor.Text"/> property in code. You can use this feature instead of disabling 
            the control with the <see cref="P:System.Windows.Forms.Control.Enabled"/> property to allow the contents to be copied.
            </remarks>
        </member>
        <member name="E:Netron.Neon.GenericValueEditor.ReadOnlyChanged">
            <summary>
            Event fired when the <see cref="P:Netron.Neon.GenericValueEditor.ReadOnly"/> property is changed on the control.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnReadOnlyChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:Netron.Neon.GenericValueEditor.ReadOnly"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>ReadOnly</strong> property is changed.</remarks>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.ShowPreviewOnly">
            <summary>
            Gets or sets a value indicating whether to show only the rectangle 
            that displays a representation of the edited value.
            </summary>
            <value><see langword="true"/> if the control shows only the rectangle that displays 
            a representation of the edited value; <see langword="false"/> otherwise. The textual value is then not visible.</value>
            <remarks>
            When the editor can paint a representation of the value
            (see <see cref="M:System.Drawing.Design.UITypeEditor.GetPaintValueSupported">UITypeEditor.GetPaintValueSupported</see>)
            this control will show both a textual value and a rectangle that displays a
            representation of the value.
            Setting this property to <see langword="true"/> will hide the textual value.
            Not all editors can paint a representation of the edited value. If the
            editor cannot paint the edited value, then the value 
            of this property is meaningless.
            </remarks>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.Value">
            <summary>
            Gets or sets the value edited by the control.
            </summary>
            <value>The current value of the editor.</value>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnValueChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:Netron.Neon.GenericValueEditor.Value"/> property is changed on the control.
            </summary>
            <param name="e">A <see cref="!:ValueChangedEventArgs"/> that contains the event data.</param>
            <remarks>Called when the <strong>Value</strong> property is changed.</remarks>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.SelectionStart">
            <summary>
            Gets or sets the starting point of text selected in the control.
            </summary>
            <value>The starting position of text selected in the control.</value>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.SelectionLength">
            <summary>
            Gets or sets the number of characters selected in the control.
            </summary>
            <value>The number of characters selected in the control.</value>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.Text">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.Text">Control.Text</see>.
            </summary>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.EditedType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> this control can edit.
            </summary>
            <value>A <see cref="T:System.Type"/> instance that represents the type of object that can be edited 
            by the editor.</value>
            <exception cref="T:System.ArgumentNullException">The property value is
            <see langword="null"/>.</exception>
            <remarks>Changing this property also changes the <see cref="P:Netron.Neon.GenericValueEditor.Value"/>,
            <see cref="P:Netron.Neon.GenericValueEditor.Converter"/>, and <see cref="P:Netron.Neon.GenericValueEditor.Editor"/> properties.</remarks>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.Converter">
            <summary>
            Gets or sets the type converter used by the editor.
            </summary>
            <value>A <see cref="T:System.ComponentModel.TypeConverter"/> instance that is used to convert the edited value from and to text.</value>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.Editor">
            <summary>
            Gets or sets the type editor for this control.
            </summary>
            <value>A <see cref="T:System.Drawing.Design.UITypeEditor"/> instance that defines the way this control will edit the value.</value>
            <remarks>
            <p>When the editor has the style <strong>DropDown</strong>
            (see <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/>), then this control will display a
            down-arrow button that drops the custom editor. When the editor has the style
            <strong>Modal</strong>, then this control will display a <strong>...</strong>
            button that opens the modal dialog.</p>
            <p>When no editor is set or the editor is of style <strong>None</strong>, then
            the behavior of the control depends on the edited type. If the type is enumerated
            then the control acts like a combo box of the enumerated values. If the type is
            not an enumerated type, then the control acts like a text box.</p>
            <p>If the editor can display a representation of the edited value
            (see <see cref="M:System.Drawing.Design.UITypeEditor.GetPaintValueSupported">UITypeEditor.GetPaintValueSupported</see>),
            then a small rectangle showing this representation will be displayed in addition
            to the textual value.</p>
            </remarks>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnSystemColorsChanged(System.EventArgs)">
            <summary>
            This members overrides <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)">Control.OnSystemColorsChanged</see>.
            </summary>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.DefaultSize">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.DefaultSize">Control.DefaultSize</see>.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnCursorChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)">Control.OnCursorChanged</see>.
            </summary>
            <param name="args">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">Control.SetBoundsCore</see>.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnFontChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">Control.OnFontChanged</see>.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnHandleCreated(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">Control.OnHandleCreated</see>.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)">Control.OnValidating</see>.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnLeave(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)">Control.OnLeave</see>.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnGotFocus(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)">Control.OnGotFocus</see>.
            </summary>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.Focused">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.Focused">Control.Focused</see>.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">Control.OnMouseDown</see>.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnEnabledChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)">Control.OnEnabledChanged</see>.
            </summary>
        </member>
        <member name="P:Netron.Neon.GenericValueEditor.PreviewControl">
            <summary>
            Gets the picture box of the control.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.PreviewControlClicked(System.Object,System.EventArgs)">
            <summary>
            Invoked when clicking the picture box.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.ButtonClicked(System.Object,System.EventArgs)">
            <summary>
            Invoked when clicking the drop button.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.GetStandardValues">
            <summary>
            Gets the list of standard values from the converter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.DropEditor">
            <summary>
            Drops the <see cref="T:System.Drawing.Design.UITypeEditor"/> associated with the edited value.
            </summary>
            <remarks>The method may also drop a list box if the edited value does not 
            have any editor and the type proposes standard values.
            </remarks>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">Control.OnKeyPress</see>.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">Control.OnMouseWheel</see>.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the data.</param>
            <remarks>The default implementation iterates on the standard values proposed by
            the edited type, if any.</remarks>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">Control.OnKeyDown</see>.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.ValidateText">
            <summary>
            Is called to validate the text that is currently edited by the control.
            </summary>
            <returns><see langword="true"/> if the string has been successfully converted into 
            the type defined by the property <see cref="P:Netron.Neon.GenericValueEditor.EditedType"/>; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:Netron.Neon.GenericValueEditor.EditorService">
            <summary>
            The <strong>IWindowsFormsEditorService</strong> that allows you to
            drop dialog and UI type editors for a <see cref="T:Netron.Neon.GenericValueEditor"/>.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.EditorService.editor">
            <summary>
            The control that uses this service.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.EditorService.dropDownForm">
            <summary>
            A control that holds the dropped editors.
            </summary>
        </member>
        <member name="F:Netron.Neon.GenericValueEditor.EditorService.closingDropDown">
            <summary>
            Indicates whether we are currently closing the drop-down form.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.EditorService.#ctor(Netron.Neon.GenericValueEditor)">
            <summary>
            Creates the editor service.
            </summary>
            <param name="editor">The cell editor.</param>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.EditorService.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.EditorService.DropDownControl(System.Windows.Forms.Control)">
            <summary>
            Drops the editor control.
            </summary>
            <param name="ctl">The control to drop.</param>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.EditorService.HideForm">
            <summary>
            Hides the drop-down editor.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.EditorService.CloseDropDown">
            <summary>
            Closes the dropped editor.
            </summary>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.EditorService.ShowDialog(System.Windows.Forms.Form)">
            <summary>
            Opens a dialog editor.
            </summary>
            <param name="dialog">The dialog to open.</param>
        </member>
        <member name="M:Netron.Neon.GenericValueEditor.EditorService.SystemColorsChanged">
            <summary>
            Is Called when the SystemColorsChanged event is received
            by the GenericValueEditor.
            </summary>
        </member>
        <member name="T:Netron.Neon.PreviewControl">
            <summary>
            The small rectangle that paints the current edited value.
            </summary>
        </member>
        <member name="T:Netron.Neon.EditorButton">
            <summary>
            The button that opens <see cref="T:System.Drawing.Design.UITypeEditor"/> controls.
            </summary>
        </member>
        <member name="F:Netron.Neon.EditorButton.dialog">
            <summary>
            Indicates whether the button should be displayed as a 
            drop-down arrow or as a dialog button.
            </summary>
        </member>
        <member name="M:Netron.Neon.EditorButton.#ctor">
            <summary>
            Creates a <strong>EditorButton</strong>.
            </summary>
        </member>
        <member name="P:Netron.Neon.EditorButton.IsDialog">
            <summary>
            Gets or sets a value indicating if the button should be 
            drawn as a drop dialog button or as a drop button.
            </summary>
            <value><see langword="true"/> if the button should be 
            drawn as a drop dialog button; <see langword="false"/> otherwise.</value>
        </member>
        <member name="M:Netron.Neon.EditorButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">Control.OnPaint</see>.
            </summary>
        </member>
        <member name="T:Netron.Neon.StandardValuesListBox">
            <summary>
            <strong>ListBox</strong> which is dropped when the type contains standard values.
            </summary>
            
        </member>
        <member name="M:Netron.Neon.StandardValuesListBox.#ctor(Netron.Neon.GenericValueEditor)">
            <summary>
            Creates a <strong>DropListBox</strong>.
            </summary>
        </member>
        <member name="M:Netron.Neon.StandardValuesListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">ListBox.OnDrawItem</see>.
            </summary>
        </member>
        <member name="M:Netron.Neon.StandardValuesListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)">ListBox.OnMeasureItem</see>.
            </summary>
        </member>
        <member name="T:Netron.Neon.DropDownForm">
            <summary>
            The form that contains the dropped down editor.
            </summary>
        </member>
        <member name="F:Netron.Neon.DropDownForm.currentControl">
            <summary>
            Currently dropped control.
            </summary>
        </member>
        <member name="F:Netron.Neon.DropDownForm.service">
            <summary>
            The service that dropped this form.
            </summary>
        </member>
        <member name="M:Netron.Neon.DropDownForm.#ctor(System.Windows.Forms.Design.IWindowsFormsEditorService)">
            <summary>
            Creates a <strong>DropDownForm</strong>.
            </summary>
            <param name="service">The service that drops this form.</param>
        </member>
        <member name="M:Netron.Neon.DropDownForm.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">Control.OnMouseDown</see>.
            </summary>
            <remarks>
            Closes the form when the left button is clicked.
            </remarks>
        </member>
        <member name="M:Netron.Neon.DropDownForm.OnClosed(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Form.OnClosed(System.EventArgs)">Form.OnClosed</see>.
            </summary>
        </member>
        <member name="M:Netron.Neon.DropDownForm.OnDeactivate(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Form.OnDeactivate(System.EventArgs)">Form.OnDeactivate</see>.
            </summary>
        </member>
        <member name="P:Netron.Neon.DropDownForm.Component">
            <summary>
            Gets or sets the control displayed by the form.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Control"/> instance.</value>
        </member>
        <member name="M:Netron.Neon.DropDownForm.OnCurrentControlResize(System.Object,System.EventArgs)">
            <summary>
            Invoked when the dropped control is resized.
            This resizes the form and realigns it.
            </summary>
        </member>
        <member name="M:Netron.Neon.DropDownForm.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Invoked when the form is resized.
            </summary>
        </member>
        <member name="T:Netron.Neon.PropertySpec">
            <summary>
            Represents a single property in a PropertySpec.
            </summary>
        </member>
        <member name="M:Netron.Neon.PropertySpec.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
        </member>
        <member name="M:Netron.Neon.PropertySpec.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
        </member>
        <member name="M:Netron.Neon.PropertySpec.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
        </member>
        <member name="M:Netron.Neon.PropertySpec.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category"></param>
        </member>
        <member name="M:Netron.Neon.PropertySpec.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
        </member>
        <member name="M:Netron.Neon.PropertySpec.#ctor(System.String,System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
        </member>
        <member name="M:Netron.Neon.PropertySpec.#ctor(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
        </member>
        <member name="M:Netron.Neon.PropertySpec.#ctor(System.String,System.Type,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
        </member>
        <member name="M:Netron.Neon.PropertySpec.#ctor(System.String,System.String,System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The fully qualified name of the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The fully qualified name of the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Netron.Neon.PropertySpec.#ctor(System.String,System.Type,System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The fully qualified name of the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The fully qualified name of the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Netron.Neon.PropertySpec.#ctor(System.String,System.String,System.String,System.String,System.Object,System.Type,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The Type that represents the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The fully qualified name of the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Netron.Neon.PropertySpec.#ctor(System.String,System.Type,System.String,System.String,System.Object,System.Type,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The Type that represents the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The fully qualified name of the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Netron.Neon.PropertySpec.#ctor(System.String,System.String,System.String,System.String,System.Object,System.String,System.Type)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The fully qualified name of the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The Type that represents the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Netron.Neon.PropertySpec.#ctor(System.String,System.Type,System.String,System.String,System.Object,System.String,System.Type)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The fully qualified name of the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The Type that represents the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Netron.Neon.PropertySpec.#ctor(System.String,System.String,System.String,System.String,System.Object,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">The fully qualified name of the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The Type that represents the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The Type that represents the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Netron.Neon.PropertySpec.#ctor(System.String,System.Type,System.String,System.String,System.Object,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="type">A Type that represents the type of the property.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The Type that represents the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The Type that represents the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="P:Netron.Neon.PropertySpec.Attributes">
            <summary>
            Gets or sets a collection of additional Attributes for this property.  This can
            be used to specify attributes beyond those supported intrinsically by the
            PropertySpec class, such as ReadOnly and Browsable.
            </summary>
        </member>
        <member name="P:Netron.Neon.PropertySpec.Category">
            <summary>
            Gets or sets the category name of this property.
            </summary>
        </member>
        <member name="P:Netron.Neon.PropertySpec.ConverterTypeName">
            <summary>
            Gets or sets the fully qualified name of the type converter
            type for this property.
            </summary>
        </member>
        <member name="P:Netron.Neon.PropertySpec.DefaultValue">
            <summary>
            Gets or sets the default value of this property.
            </summary>
        </member>
        <member name="P:Netron.Neon.PropertySpec.Description">
            <summary>
            Gets or sets the help text description of this property.
            </summary>
        </member>
        <member name="P:Netron.Neon.PropertySpec.EditorTypeName">
            <summary>
            Gets or sets the fully qualified name of the editor type for
            this property.
            </summary>
        </member>
        <member name="P:Netron.Neon.PropertySpec.Name">
            <summary>
            Gets or sets the name of this property.
            </summary>
        </member>
        <member name="P:Netron.Neon.PropertySpec.TypeName">
            <summary>
            Gets or sets the fully qualfied name of the type of this
            property.
            </summary>
        </member>
        <member name="T:Netron.Neon.PropertySpecEventArgs">
            <summary>
            Provides data for the GetValue and SetValue events of the PropertyBag class.
            </summary>
        </member>
        <member name="M:Netron.Neon.PropertySpecEventArgs.#ctor(Netron.Neon.PropertySpec,System.Object)">
            <summary>
            Initializes a new instance of the PropertySpecEventArgs class.
            </summary>
            <param name="property">The PropertySpec that represents the property whose
            value is being requested or set.</param>
            <param name="val">The current value of the property.</param>
        </member>
        <member name="P:Netron.Neon.PropertySpecEventArgs.Property">
            <summary>
            Gets the PropertySpec that represents the property whose value is being
            requested or set.
            </summary>
        </member>
        <member name="P:Netron.Neon.PropertySpecEventArgs.Value">
            <summary>
            Gets or sets the current value of the property.
            </summary>
        </member>
        <member name="T:Netron.Neon.PropertySpecEventHandler">
            <summary>
            Represents the method that will handle the GetValue and SetValue events of the
            PropertyBag class.
            </summary>
        </member>
        <member name="T:Netron.Neon.PropertyBag">
            <summary>
            Represents a collection of custom properties that can be selected into a
            PropertyGrid to provide functionality beyond that of the simple reflection
            normally used to query an object's properties.
            </summary>
        </member>
        <member name="T:Netron.Neon.PropertyBag.PropertySpecCollection">
            <summary>
            Encapsulates a collection of PropertySpec objects.
            </summary>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.#ctor">
            <summary>
            Initializes a new instance of the PropertySpecCollection class.
            </summary>
        </member>
        <member name="P:Netron.Neon.PropertyBag.PropertySpecCollection.Count">
            <summary>
            Gets the number of elements in the PropertySpecCollection.
            </summary>
            <value>
            The number of elements contained in the PropertySpecCollection.
            </value>
        </member>
        <member name="P:Netron.Neon.PropertyBag.PropertySpecCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the PropertySpecCollection has a fixed size.
            </summary>
            <value>
            true if the PropertySpecCollection has a fixed size; otherwise, false.
            </value>
        </member>
        <member name="P:Netron.Neon.PropertyBag.PropertySpecCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the PropertySpecCollection is read-only.
            </summary>
        </member>
        <member name="P:Netron.Neon.PropertyBag.PropertySpecCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <value>
            true if access to the PropertySpecCollection is synchronized (thread-safe); otherwise, false.
            </value>
        </member>
        <member name="P:Netron.Neon.PropertyBag.PropertySpecCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
            <value>
            An object that can be used to synchronize access to the collection.
            </value>
        </member>
        <member name="P:Netron.Neon.PropertyBag.PropertySpecCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            In C#, this property is the indexer for the PropertySpecCollection class.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>
            The element at the specified index.
            </value>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.Add(Netron.Neon.PropertySpec)">
            <summary>
            Adds a PropertySpec to the end of the PropertySpecCollection.
            </summary>
            <param name="value">The PropertySpec to be added to the end of the PropertySpecCollection.</param>
            <returns>The PropertySpecCollection index at which the value has been added.</returns>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.AddRange(Netron.Neon.PropertySpec[])">
            <summary>
            Adds the elements of an array of PropertySpec objects to the end of the PropertySpecCollection.
            </summary>
            <param name="array">The PropertySpec array whose elements should be added to the end of the
            PropertySpecCollection.</param>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.Clear">
            <summary>
            Removes all elements from the PropertySpecCollection.
            </summary>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.Contains(Netron.Neon.PropertySpec)">
            <summary>
            Determines whether a PropertySpec is in the PropertySpecCollection.
            </summary>
            <param name="item">The PropertySpec to locate in the PropertySpecCollection. The element to locate
            can be a null reference (Nothing in Visual Basic).</param>
            <returns>true if item is found in the PropertySpecCollection; otherwise, false.</returns>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.Contains(System.String)">
            <summary>
            Determines whether a PropertySpec with the specified name is in the PropertySpecCollection.
            </summary>
            <param name="name">The name of the PropertySpec to locate in the PropertySpecCollection.</param>
            <returns>true if item is found in the PropertySpecCollection; otherwise, false.</returns>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.CopyTo(Netron.Neon.PropertySpec[])">
            <summary>
            Copies the entire PropertySpecCollection to a compatible one-dimensional Array, starting at the
            beginning of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied
            from PropertySpecCollection. The Array must have zero-based indexing.</param>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.CopyTo(Netron.Neon.PropertySpec[],System.Int32)">
            <summary>
            Copies the PropertySpecCollection or a portion of it to a one-dimensional array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied
            from the collection.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the PropertySpecCollection.
            </summary>
            <returns>An IEnumerator for the entire PropertySpecCollection.</returns>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.IndexOf(Netron.Neon.PropertySpec)">
            <summary>
            Searches for the specified PropertySpec and returns the zero-based index of the first
            occurrence within the entire PropertySpecCollection.
            </summary>
            <param name="value">The PropertySpec to locate in the PropertySpecCollection.</param>
            <returns>The zero-based index of the first occurrence of value within the entire PropertySpecCollection,
            if found; otherwise, -1.</returns>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.IndexOf(System.String)">
            <summary>
            Searches for the PropertySpec with the specified name and returns the zero-based index of
            the first occurrence within the entire PropertySpecCollection.
            </summary>
            <param name="name">The name of the PropertySpec to locate in the PropertySpecCollection.</param>
            <returns>The zero-based index of the first occurrence of value within the entire PropertySpecCollection,
            if found; otherwise, -1.</returns>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.Insert(System.Int32,Netron.Neon.PropertySpec)">
            <summary>
            Inserts a PropertySpec object into the PropertySpecCollection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The PropertySpec to insert.</param>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.Remove(Netron.Neon.PropertySpec)">
            <summary>
            Removes the first occurrence of a specific object from the PropertySpecCollection.
            </summary>
            <param name="obj">The PropertySpec to remove from the PropertySpecCollection.</param>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.Remove(System.String)">
            <summary>
            Removes the property with the specified name from the PropertySpecCollection.
            </summary>
            <param name="name">The name of the PropertySpec to remove from the PropertySpecCollection.</param>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the object at the specified index of the PropertySpecCollection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.ToArray">
            <summary>
            Copies the elements of the PropertySpecCollection to a new PropertySpec array.
            </summary>
            <returns>A PropertySpec array containing copies of the elements of the PropertySpecCollection.</returns>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Netron.Neon.PropertyBag.PropertySpecCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Netron.Neon.PropertyBag.PropertySpecCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Netron.Neon.PropertyBag.#ctor">
            <summary>
            Initializes a new instance of the PropertyBag class.
            </summary>
        </member>
        <member name="P:Netron.Neon.PropertyBag.DefaultProperty">
            <summary>
            Gets or sets the name of the default property in the collection.
            </summary>
        </member>
        <member name="P:Netron.Neon.PropertyBag.Properties">
            <summary>
            Gets the collection of properties contained within this PropertyBag.
            </summary>
        </member>
        <member name="E:Netron.Neon.PropertyBag.GetValue">
            <summary>
            Occurs when a PropertyGrid requests the value of a property.
            </summary>
        </member>
        <member name="E:Netron.Neon.PropertyBag.SetValue">
            <summary>
            Occurs when the user changes the value of a property in a PropertyGrid.
            </summary>
        </member>
        <member name="M:Netron.Neon.PropertyBag.OnGetValue(Netron.Neon.PropertySpecEventArgs)">
            <summary>
            Raises the GetValue event.
            </summary>
            <param name="e">A PropertySpecEventArgs that contains the event data.</param>
        </member>
        <member name="M:Netron.Neon.PropertyBag.OnSetValue(Netron.Neon.PropertySpecEventArgs)">
            <summary>
            Raises the SetValue event.
            </summary>
            <param name="e">A PropertySpecEventArgs that contains the event data.</param>
        </member>
        <member name="T:Netron.Neon.PropertyTable">
            <summary>
            An extension of PropertyBag that manages a table of property values, in
            addition to firing events when property values are requested or set.
            </summary>
        </member>
        <member name="M:Netron.Neon.PropertyTable.#ctor">
            <summary>
            Initializes a new instance of the PropertyTable class.
            </summary>
        </member>
        <member name="P:Netron.Neon.PropertyTable.Item(System.String)">
            <summary>
            Gets or sets the value of the property with the specified name.
            <p>In C#, this property is the indexer of the PropertyTable class.</p>
            </summary>
        </member>
        <member name="M:Netron.Neon.PropertyTable.OnGetValue(Netron.Neon.PropertySpecEventArgs)">
            <summary>
            This member overrides PropertyBag.OnGetValue.
            </summary>
        </member>
        <member name="M:Netron.Neon.PropertyTable.OnSetValue(Netron.Neon.PropertySpecEventArgs)">
            <summary>
            This member overrides PropertyBag.OnSetValue.
            </summary>
        </member>
        <member name="T:Netron.Xeon.ServletPage">
            <summary>
            Serves to tag the servlet classes
            </summary>
        </member>
        <member name="T:Netron.Xeon.ExceptionManagementMode">
            <summary>
            Enum containing the mode options for the exceptionManagement tag.
            </summary>
        </member>
        <member name="F:Netron.Xeon.ExceptionManagementMode.Off">
            <summary>The ExceptionManager should not process exceptions.</summary>
        </member>
        <member name="F:Netron.Xeon.ExceptionManagementMode.On">
            <summary>The ExceptionManager should process exceptions. This is the default.</summary>
        </member>
        <member name="T:Netron.Xeon.WebServerConfiguration">
            <summary>
            Implements the IConfigurationSectionHandler and reads the config section.
            </summary>
        </member>
        <member name="M:Netron.Xeon.WebServerConfiguration.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Required method in the IConfigurationSectionHandler and creates a DebugSetting class
            per read node in the app.config.
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.Xeon.WebServerSettings">
            <summary>
            Collects the configuration of the Xeon settings
            </summary>
        </member>
        <member name="P:Netron.Xeon.WebServerSettings.ServerPort">
            <summary>
            Gets or sets the webserver port number
            </summary>
        </member>
        <member name="P:Netron.Xeon.WebServerSettings.StaticContent">
            <summary>
            Gets or sets the location of the static content
            </summary>
        </member>
        <member name="P:Netron.Xeon.WebServerSettings.DynamicContent">
            <summary>
            Gets or sets the location of the assembly where the dynamic pages reside
            </summary>
        </member>
        <member name="T:Netron.Xeon.ExceptionWebRequest">
            <summary>
            This class packages a webrequest which can be used to show an exception, 
            it's a virutal request since it never can come from a client.
            </summary>
        </member>
        <member name="P:Netron.Xeon.ExceptionWebRequest.Exception">
            <summary>
            Gets the exception that is encapsulated in this virtual request
            </summary>
        </member>
        <member name="P:Netron.Xeon.ExceptionWebRequest.OriginalPage">
            <summary>
            Gets the original page request that has thrown an exception
            </summary>
        </member>
        <member name="T:Netron.Xeon.IResourceResolver">
            <summary>
            This is the resolver class.
            </summary>
            <remarks>
            A resolver is like a plugable file system. See the <see cref="N:Netron.Xeon"/> class.
            </remarks>
        </member>
        <member name="M:Netron.Xeon.IResourceResolver.Resolves(Netron.Xeon.WebRequest)">
            <summary>
            This function tells the WebServer whether the resolver recognizes the requested resource
            </summary>
            <param name="aRequest">the request object</param>
            <returns>true - if it recognizes it, false otherwise</returns>
        </member>
        <member name="M:Netron.Xeon.IResourceResolver.Answer(Netron.Xeon.WebRequest)">
            <summary>
            If the resolver has recognized the request, this function is called to let the resolver
            generate the content sent back to the client
            </summary>
            <param name="aRequest">the request object</param>
        </member>
        <member name="M:Netron.Xeon.IResourceResolver.GetResourceAsStream(System.String)">
            <summary>
            Gets a static resource (one that doesnt change depending on the request)
            as a Stream
            </summary>
        </member>
        <member name="T:Netron.Xeon.IServletPage">
            <summary>
            Servlets interface
            </summary>
        </member>
        <member name="P:Netron.Xeon.IServletPage.Address">
            <summary>
            Gets the address the servlet will answer to
            </summary>
        </member>
        <member name="M:Netron.Xeon.IServletPage.Answer(Netron.Xeon.WebRequest)">
            <summary>
            Answers the actual request
            </summary>
            <param name="aRequest"></param>
        </member>
        <member name="M:Netron.Xeon.IServletPage.getExceptionPage(Netron.Xeon.WebRequest)">
            <summary>
            Gets the exception page associated to this servlet
            </summary>
            <param name="aRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.Xeon.IServletPage.Initialize">
            <summary>
            Initialization of the servlet
            </summary>
        </member>
        <member name="T:Netron.Xeon.MIMEManager">
            <summary>
            MIME related functionalities
            </summary>
        </member>
        <member name="M:Netron.Xeon.MIMEManager.getMIME(System.String)">
            <summary>
            Gets the MIME application associated with a type to send to the browser,
            which will handle the rest.
            </summary>
            <param name="sExt"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.Xeon.ContentLocationResolver">
            <summary>
            This is a static resolver that links the virtual adress space of the
            web server to a physical file system
            </summary>
        </member>
        <member name="M:Netron.Xeon.ContentLocationResolver.#ctor(System.String)">
            <summary>
            Creates a ContentLocationResolver
            </summary>
            <param name="sContentPath">the physical path that is linked</param>
            <remarks>
            This contructor installs the filesystem in the root of the virtual
            adress space of the web server
            </remarks>
        </member>
        <member name="M:Netron.Xeon.ContentLocationResolver.#ctor(System.String,System.String)">
            <summary>
            Same as above
            </summary>
            <param name="sContentPath">the physical path that is linked</param>
            <param name="sMapToPath">the root in the virtual file system</param>
        </member>
        <member name="T:Netron.Xeon.EmbeddedLocationResolver">
            <summary>
            This resolver links the virtual file system to the embedded reources in
            some assembly.
            </summary>
            <example>
            if aRootLocation is "ImageViewerExample" and m_mapToPath is "view/"
            '/view/stefan/stf.xslt' will map to the manifest resource 'ImageViewerExample.stefan.stf.xslt'
            </example>
        </member>
        <member name="T:Netron.Xeon.MyComputerResolver">
            <summary>
            Allows to browse the local machine via something like
            http://localhost:8080/MyComputer/c:/temp/csharp.txt
            </summary>
        </member>
        <member name="T:Netron.Xeon.ServletResolver">
            <summary>
            Resolves the servlets, ie the compiled page which will answers .xsp requests.
            The servlets are loaded at runtime from given assemblies specified in the app.config.
            </summary>
        </member>
        <member name="T:Netron.Xeon.ResolverThreadPool">
            <summary>
            A thread pool class
            </summary>
            <remarks>
            This class is used to manage the simultanous execution of the Answer routine
            of the ResourceResolcer class.
            When adding a resolver to the WebServer the program specifies two numbers :
            the number of pooled answer threads and the number of maximum answer threads.
            When a request is made, the server passes it on to this class's Answer routine
            The Resolvers anwer routine is then executed in a different thread from the server's
            one. 
            There are 2 types of threads - pooled and free.
            Pooled threads are threads that are in sleeping mode. When <code>answer</code>
            it first sees if there is currently a sleeping thread. If yes it wakes it up
            and passes the request object to it. The thread than invokes the answer routine
            of the Resolver and after that goes to sleep again. If all pooled threads are
            currently working a new thread is created - a free thread. It proccesses the
            request and than terminates. If the number of free threads + the number of
            pooled threads is >= the number of maximum threads, the request is queued and
            is processed the moment a thread becomes available
            </remarks>
        </member>
        <member name="P:Netron.Xeon.ResolverThreadPool.Resolver">
            <summary>
            Gets the resolver this pool is serving
            </summary>
        </member>
        <member name="F:Netron.Xeon.XHelp.contentLocation">
            <summary>
            where the xml stuff is
            </summary>
        </member>
        <member name="M:Netron.Xeon.ShowPicure.getTransformation(Netron.Xeon.WebRequest,System.Xml.Xsl.XslTransform@,System.Xml.Xsl.XsltArgumentList@)">
            <summary>
            Takes the transfo from the assembly
            </summary>
            <param name="aRequest"></param>
            <param name="aTransformation"></param>
            <param name="aArguments"></param>
        </member>
        <member name="T:Netron.Xeon.TestPage">
            <summary>
            This is the simplest example of a custom servlet.
            It derives from the ServletPageBase and does not require XML data.
            </summary>
        </member>
        <member name="M:Netron.Xeon.TestPage.Answer(Netron.Xeon.WebRequest)">
            <summary>
            Here you can try out whatever and write to the browser.
            </summary>
            <param name="aRequest"></param>
        </member>
        <member name="P:Netron.Xeon.TestPage.Address">
            <summary>
            The address of this page
            </summary>
        </member>
        <member name="P:Netron.Xeon.TestPage.ExceptionPage">
            <summary>
            In case of troubles this will be the page that is served.
            </summary>
        </member>
        <member name="T:Netron.Xeon.ServletPageBase">
            <summary>
            Abstract base class for servlets
            </summary>
        </member>
        <member name="P:Netron.Xeon.ServletPageBase.Address">
            <summary>
            Gets the address the servlet will answer to
            </summary>
        </member>
        <member name="M:Netron.Xeon.ServletPageBase.Initialize">
            <summary>
            Initialization of the servlet
            </summary>
        </member>
        <member name="M:Netron.Xeon.ServletPageBase.Answer(Netron.Xeon.WebRequest)">
            <summary>
            Answers the actual request
            </summary>
            <param name="aRequest"></param>
        </member>
        <member name="M:Netron.Xeon.ServletPageBase.getExceptionPage(Netron.Xeon.WebRequest)">
            <summary>
            Gets the exception page associated to this servlet
            </summary>
            <param name="aRequest"></param>
            <returns></returns>
        </member>
        <member name="T:Netron.Xeon.XsltServletPage">
            <summary>
            Abstract base class for XSL server pages
            </summary>
        </member>
        <member name="T:Netron.Xeon.StaticResolverBase">
            <summary>
            This is a base class for static resolvers. A static resolver is a resolver
            whose answer does not depend on the parameters of the request
            </summary>
            <remarks>
            This class simplifies the development of static resolvers. It provides an 
            implementation of Answer based only on GetResourceAsStream.
            </remarks>
        </member>
        <member name="M:Netron.Xeon.StaticResolverBase.Answer(Netron.Xeon.WebRequest)">
            <summary>
            Answers the web request.
            </summary>
            <param name="aRequest"></param>
        </member>
        <member name="T:Netron.Xeon.WebRequest">
            <summary>
            This is the web request class. It is used to acces the paramters of
            the query;
            </summary>
        </member>
        <member name="M:Netron.Xeon.WebRequest.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Netron.Xeon.WebRequest.#ctor(Netron.Xeon.WebRequest)">
            <summary>
            Ctor
            </summary>
            <param name="aRequest"></param>
        </member>
        <member name="M:Netron.Xeon.WebRequest.#ctor(System.IO.Stream,Netron.Xeon.WebServer)">
            <summary>
            Ctor
            </summary>
            <param name="smRequest"></param>
            <param name="aServer"></param>
        </member>
        <member name="P:Netron.Xeon.WebRequest.Server">
            <summary>
            The server object that created the request
            </summary>
        </member>
        <member name="P:Netron.Xeon.WebRequest.File">
            <summary>
            Gets or sets the file requested.
            The set method allows for a redirect, e.g. when requesting the root (=/) of the server.
            </summary>
        </member>
        <member name="P:Netron.Xeon.WebRequest.Method">
            <summary>
            The request method
            </summary>
        </member>
        <member name="P:Netron.Xeon.WebRequest.Response">
            <summary>
            Returns the response object. Use it to answer the client
            </summary>
        </member>
        <member name="M:Netron.Xeon.WebRequest.Unescape(System.String)">
            <summary>
            Reformats the url escape codes
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Netron.Xeon.WebRequest.ParseParams(System.String)">
            <summary>
            Parses the parameters of the request
            </summary>
            <param name="sRequest">the incoming request</param>
        </member>
        <member name="P:Netron.Xeon.WebRequest.Item(System.String)">
            <summary>
            The request parameters
            </summary>
        </member>
        <member name="T:Netron.Xeon.WebResponse">
            <summary>
            This is the response class. Used to answer the client
            </summary>
        </member>
        <member name="P:Netron.Xeon.WebResponse.OutStream">
            <summary>
            The output stream. It is preferable not to use it directly
            </summary>
        </member>
        <member name="P:Netron.Xeon.WebResponse.Header">
            <summary>
            A hash table containing the Response header parameters
            </summary>
            <example>
            Key: 'content-location'
            Value: 'http://localhost:8080/view/stf.xsp'
            </example>
        </member>
        <member name="P:Netron.Xeon.WebResponse.HTTPCode">
            <summary>
            The http status code of the reaponse
            </summary>
        </member>
        <member name="P:Netron.Xeon.WebResponse.HTTPMessage">
            <summary>
            The HTTP status message of the response
            </summary>
        </member>
        <member name="M:Netron.Xeon.WebResponse.ClearHeader">
            <summary>
            Used to clear the header + Code + Message 
            </summary>
        </member>
        <member name="M:Netron.Xeon.WebResponse.SendHeader">
            <summary>
            Writes the header to the output stream
            </summary>
        </member>
        <member name="M:Netron.Xeon.WebResponse.FillRedirectHeader(System.String)">
            <summary>
            Fills in a redirect header
            </summary>
            <param name="aURL">the new URL</param>
        </member>
        <member name="M:Netron.Xeon.WebResponse.SendRedirect(System.String)">
            <summary>
            Fills in and send a redirect header
            </summary>
            <param name="aURL">the new URL</param>
        </member>
        <member name="M:Netron.Xeon.WebResponse.SendFileNotFound">
            <summary>
            Sends a file not found error
            </summary>
        </member>
        <member name="M:Netron.Xeon.WebResponse.FillContentHeader(System.String)">
            <summary>
            Fills a content header
            </summary>
            <param name="sEncoding">the MIME encoding of the content</param>
        </member>
        <member name="M:Netron.Xeon.WebResponse.SendContent(System.String)">
            <summary>
            Fills and sends a content header
            </summary>
            <param name="sEncoding"></param>
        </member>
        <member name="M:Netron.Xeon.WebResponse.Write(System.String)">
            <summary>
            Writes a string to the output stream
            </summary>
            <param name="sContent">the string to be written</param>
        </member>
        <member name="M:Netron.Xeon.WebResponse.WriteLine(System.String)">
            <summary>
            Writes a line to the output stream
            </summary>
            <param name="sContent">the string to be written</param>
        </member>
        <member name="M:Netron.Xeon.WebResponse.Write(System.IO.Stream)">
            <summary>
            Copies a stream to the output stream
            </summary>
            <param name="aStream">the stream to be copied</param>
        </member>
        <member name="M:Netron.Xeon.WebResponse.WriteResource(System.String)">
            <summary>
            Writes a file from the Resources
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Netron.Xeon.WebResponse.SwitchToMemoryStream">
            <summary>
            If nothing has been sent this method replaces the output stream with
            a memory stream. All that is written to the response after that is actually
            buffered. When <code>Done</code> is called the memory stream is flushed
            to the network stream
            </summary>
        </member>
        <member name="P:Netron.Xeon.WebResponse.IsInMemoryStreamMode">
            <summary>
            Tells whether a Memory stream or a network stream is currently in use
            </summary>
        </member>
        <member name="M:Netron.Xeon.WebResponse.Done">
            <summary>
            Flushes the memory stream to the network one and than flushes the network stream
            </summary>
        </member>
        <member name="M:Netron.Xeon.WebResponse.Reset">
            <summary>
            If the Response is currently using a memory stream it clears the stream (buffer)
            </summary>
        </member>
        <member name="T:Netron.Xeon.WebServer">
            <summary>
            This is the web server class. See the remarks to undestand how it works
            </summary>
            <remarks>
            The web server is a true web server but with very limited functionality.
            It has a collection of resolvers. The resovler is like a pluggable file system.
            When the web server receives a request from the client it start walking this collection
            until it finds a suitable resolver - one that claims it can handle the request.
            The resolvers are tested using their <code>Resolves</code> function. Once a suitable
            resolver is found it's Answer function is called. This function should send 
            the content of the Requested resource back to the client. If no suitable resolver
            is found a 404 http error is sent.
            
            The Answer method of the resolver can be called multiple times simultaniosly - 
            running in different threads. For more information see the ResolverThreadPool class
            </remarks>
        </member>
        <member name="F:Netron.Xeon.WebServer.serverThread">
            <summary>
            the thread onto which the server runs
            </summary>
        </member>
        <member name="F:Netron.Xeon.WebServer.serverPort">
            <summary>
            The port on which the server operates
            </summary>
        </member>
        <member name="F:Netron.Xeon.WebServer.resolvers">
            <summary>
            The collection of resolvers
            </summary>
            <remarks>
            This collection actualy contains objects of type ResolverThreadPool,
            the resolvers are pooled
            </remarks>
        </member>
        <member name="F:Netron.Xeon.WebServer.tcpListener">
            <summary>
            standard .Net TCP listener
            </summary>
        </member>
        <member name="M:Netron.Xeon.WebServer.#ctor(System.Int32)">
            <summary>
            Creates the web server
            </summary>
            <param name="aPort">The port on which the server listens</param>
        </member>
        <member name="M:Netron.Xeon.WebServer.AddResolver(Netron.Xeon.IResourceResolver,System.Int32,System.Int32)">
            <summary>
            Adds a resolver to the resolvers collection
            </summary>
            <param name="aLocation">the resolver to be added</param>
            <param name="aMinThreads">The number of pooled threads</param>
            <param name="aMaxThreads">The maximum number of threads. -1 for unlimited</param>
            <remarks>For more information see the ResolverThreadPool class</remarks>
        </member>
        <member name="M:Netron.Xeon.WebServer.Answer(Netron.Xeon.WebRequest,System.Net.Sockets.TcpClient,System.Net.Sockets.NetworkStream)">
            <summary>
            Internal routine. Finds the suitable resolver an runs it's answer routine
            in a different thread. Thread control is done by the ResolverThreadPool class
            </summary>
            <param name="webRequest"></param>
            <param name="aClient"></param>
            <param name="aStream"></param>
        </member>
        <member name="M:Netron.Xeon.WebServer.Run">
            <summary>
            The main loop of the server; the runnable on the thread(pool).
            </summary>
        </member>
        <member name="M:Netron.Xeon.WebServer.Start">
            <summary>
            This function starts the web server on the separate thread from the main thread
            </summary>
        </member>
        <member name="M:Netron.Xeon.WebServer.Stop">
            <summary>
            This function stops the web server. Be sure to call or your program wont exit
            </summary>
        </member>
        <member name="M:Netron.Xeon.WebServer.GetResourceAsStream(System.String)">
            <summary>
            Gets a static resource as a stream. To do so it calls the <code>GetResourceAsStream</code>
            function of all installed resolvers. See <code>IResourceResolver.GetResourceAsStream</code>
            </summary>
            <param name="sName">the name of the resource</param>
            <returns>a stream for reading from the resource</returns>
        </member>
        <member name="M:Netron.Xeon.WebServer.InvokeRequest(Netron.Xeon.WebRequest)">
            <summary>
            Internal routine. Used for exception page handling
            </summary>
            <param name="webRequest">the request object passed to the page</param>
        </member>
    </members>
</doc>
